on:
  schedule:
  - cron: '0 */4 * * *'
  push:
    branches:
    - master
  pull_request:
    paths:
    - .github/workflows/e2e-fsevents-workflow.yml
    - scripts/e2e-setup-ci.sh

name: 'E2E FSEvents'
jobs:
  chore:
    name: 'Validating FSEvents'
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@master

    - name: 'Use Node.js 10.x'
      uses: actions/setup-node@master
      with:
        node-version: 10.x

    - name: 'Build the standard bundle'
      run: |
        node ./scripts/run-yarn.js build:cli

    - name: 'Running the integration test (FSEvents ^1)'
      run: |
        source scripts/e2e-setup-ci.sh
        yarn init
        yarn add fsevents@^1

        cat > test.js <<EOT
          const fsevents = require('fsevents');
          const fs = require('fs');
          const path = require('path');

          const virtualP = path.resolve('./$$virtual/foo/0');

          const watcher = fsevents(virtualP);
          watcher.start();

          let resolve, deferred = new Promise(resolveDeferred => {
              resolve = resolveDeferred;
          });

          watcher.on('change', (p, info) => {
              resolve(p === virtualP && info.path === virtualP ? 0 : 1);
          });

          setTimeout(() => {
              resolve(1);
          }, 5000);

          fs.writeFileSync('./helloworld', 'some new text');

          deferred.then(exitCode => {
              process.exit(exitCode);
          });
        EOT

        yarn node ./test.js

    - name: 'Running the integration test (FSEvents ^1)'
      run: |
        source scripts/e2e-setup-ci.sh
        yarn init
        yarn add fsevents@latest

        cat > test.js <<EOT
          const fsevents = require('fsevents');
          const fs = require('fs');
          const path = require('path');

          const virtualP = path.resolve('./$$virtual/foo/0');

          let resolve, deferred = new Promise(resolveDeferred => {
              resolve = resolveDeferred;
          });

          fsevents(virtualP, p => {
              resolve(p === virtualP ? 0 : 1);
          });

          setTimeout(() => {
              resolve(1);
          }, 5000);

          fs.writeFileSync('./helloworld', 'some new text');

          deferred.then(exitCode => {
              process.exit(exitCode);
          });
        EOT

        yarn node ./test.js
