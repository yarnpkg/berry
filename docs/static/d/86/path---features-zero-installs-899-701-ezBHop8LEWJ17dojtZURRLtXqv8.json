{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"/features/constraints","title":"Constraints"}}},{"node":{"frontmatter":{"path":"/features/offline-cache","title":"Offline Cache"}}},{"node":{"frontmatter":{"path":"/features/pnp","title":"Plug'n'Play"}}},{"node":{"frontmatter":{"path":"/features/plugins","title":"Plugins"}}},{"node":{"frontmatter":{"path":"/features/protocols","title":"Protocols"}}},{"node":{"frontmatter":{"path":"/features/workspaces","title":"Workspaces"}}},{"node":{"frontmatter":{"path":"/features/zero-installs","title":"Zero-Installs"}}}]},"markdownRemark":{"html":"<p>While not a feature in itself, the term \"Zero Install\" encompasses a lot of Yarn features tailored around one specific purpose: make your projects as stable and fast as they could ever be by removing one of the main entropy factor from the equation: Yarn itself.</p>\n<h2>How does Yarn impacts a project stability?</h2>\n<p>Yarn does its best to guarantee that when running <code>yarn install</code> twice, the result will be the same in both cases. The main way we currently achieve this purpose is through a lockfile, which gives us all the information we need to install a project in a reproducible way. But is it really enough?</p>\n<p>While we do our best to guarantee that what works now will always work, there's the off chance that a future release introduces a bug that'll prevent you from installing your project. Or maybe your production machines environment change and <code>yarn install</code> cannot write in the temporary directory anymore, or the network falls and your packages aren't available, or your credentials rotate and you get authentication issues, or ... so many things can go wrong.</p>\n<p>Finally, note that isn't only about Yarn - you probably still remember some npm bugs where system files were being removed from production servers. That's what we mean: a code that runs is a code that will eventually fail. The only definite way to prevent such issues, now and in the future, is to ensure that as few code needs to run as possible.</p>\n<h2>How to reach this \"zero-install\" state you're advocating for?</h2>\n<p>In order to make a project zero-install, you must be able to use it as soon as you clone it. This is very easy starting from Yarn 2!</p>\n<ul>\n<li>\n<p>The cache folder is by default stored within your project folder (in <code>.yarn/cache</code>). Just make sure you add it to your repository (see also, <a href=\"/berry/features/offline-cache\">Offline Cache</a>).</p>\n</li>\n<li>\n<p>When running <code>yarn install</code>, Yarn will generate a <code>.pnp.js</code> and a <code>.yarn/virtuals</code> file. Add them both to your repository (the <code>virtuals</code> folder contains a bunch of symlinks used to disambiguate peer dependencies - it might look weird, but it's what allows <code>yarn link</code> to work A-OK with peer dependencies).</p>\n</li>\n<li>\n<p>Depending on whether you use install scripts or not (we advise you to disable them if you write Javascript, as most use cases for native packages are better solved by wasm-powered packages anyway) also add the <code>.yarn/unplugged</code> and <code>.yarn/build-state.yml</code> entries.</p>\n</li>\n</ul>\n<p>And that's it! Push your changes to your repository, checkout a fresh new one somewhere, and check whether running <code>yarn start</code> (or whatever other script you'd normally use) works.</p>\n<h2>Security concerns</h2>\n<p>Note that, by design, this setup requires that you trust people modifying your repository. In particular projects accepting PRs from external users will have to be careful that the PRs affecting the package archives are legit (since it would otherwise be possible to a malicious user to send a PR for a new dependency after having altered its archive content). The best way to do this would be to add a CI step (for untrusted PRs only) that removes the cache before running an install:</p>\n<pre><code>$> rm -rf $(yarn cache dir)\n$> yarn install\n</code></pre>\n<p>This way Yarn will redownload the package files from whatever their remote location would be, and would report any mismatching checksum.</p>","frontmatter":{"path":"/features/zero-installs","title":"Zero-Installs"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"category":"features"}}