{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"/features/offline-cache","title":"Offline Cache"}}},{"node":{"frontmatter":{"path":"/features/pnp","title":"Plug'n'Play"}}},{"node":{"frontmatter":{"path":"/features/plugins","title":"Plugins"}}},{"node":{"frontmatter":{"path":"/features/protocols","title":"Protocols"}}},{"node":{"frontmatter":{"path":"/features/workspaces","title":"Workspaces"}}},{"node":{"frontmatter":{"path":"/features/zero-installs","title":"Zero-Installs"}}}]},"markdownRemark":{"html":"<p>Unveiled in September 2018, Plug'n'Play is an alternative installation strategy for Node. Based on prior works from other languages, it presents interesting characteristics that build upon the regular commonjs <code>require</code> workflow in a completely backward-compatible way.</p>\n<h2>The node_modules problem</h2>\n<p>The way installs used to work was simple: Yarn generated a <code>node_modules</code> directory that Node was then able to consume thanks to its builtin Node Resolution Algorithm. In this context, Node didn't had to know the first thing about what being a package was: it only reasoned in terms of files. \"Does this file exists here? No? Let's look in the parent <code>node_modules</code> then. Does it exists here? Still no? Too bad... let's keep going until we find the right one!\". This process was vastly inefficient for a lot of reasons:</p>\n<ul>\n<li>\n<p>The <code>node_modules</code> directories typically contained gargantuan amounts of files. Generating them could make up for more than 70% of the time needed to run <code>yarn install</code> - the effects being amplified when operating with warm caches.</p>\n</li>\n<li>\n<p>Because the <code>node_modules</code> generation was I/O bound, package managers couldn't really optimize it a lot either - we could use hardlinks or copy-on-write, but even then we still needed to make a bunch of syscalls that slowed us down dramatically.</p>\n</li>\n<li>\n<p>Because Node had no concept of \"package\", it didn't know whether a file was <em>meant</em> to be accessed (rather than simply being available through hoisting). It was entirely possible that the code you wrote worked one day in development but broke in production because you forgot to list one of your dependencies in your <code>package.json</code>.</p>\n</li>\n<li>\n<p>Even at runtime, the Node resolution had to make a bunch of <code>stat</code> and <code>readdir</code> calls in order to figure out from where to load every single required file. It was extremely wasteful, and was part of why booting Node applications took so much time.</p>\n</li>\n<li>\n<p>Finally, the very design of the <code>node_modules</code> folder was impractical in that it didn't allow package managers to properly dedupe packages. Even though we designed algorithms allowing us to optimize parts of the tree, we still ended up unable to optimize some particular patterns - causing not only the disk to take more space than needed, but also some packages to be instantiated multiple times in memory.</p>\n</li>\n</ul>\n<h2>Fixing node_modules</h2>\n<p>When you think about it, Yarn knows everything about your dependency tree - you even ask it to install it for you! So why did we let Node locate our packages on the disk? Why didn't we simply tell Node where to find the Yarn package, and inform it that any require call to X by Y was meant to read files from a specific location? This is from this postulate that Plug'n'Play was created.</p>\n<p>In this install mode (now the default starting from Yarn v2), Yarn generates a single <code>.pnp.js</code> file instead of the usual <code>node_modules</code>. Instead of containing the source code of the installed packages, the <code>.pnp.js</code> file contains a map linking a package name and version to a location on the disk, and another map linking a package name and version to its set of dependencies. Thanks to this efficient system, Node can directly know where to look for files being required - regardless who asks for them!</p>\n<p>This approach as various benefits:</p>\n<ul>\n<li>\n<p>Since we only need to generate a single text file instead of tens of thousands, installs are now pretty much instantaneous - their only bottleneck now is the number of dependencies in your project.</p>\n</li>\n<li>\n<p>Since we aren't supported by a filesystem hierarchy anymore, we can both guarantee a perfect optimization and predictable package instantiations.</p>\n</li>\n<li>\n<p>The generated file can be checked into the repository as part of the <a href=\"/berry/features/zero-installs\">Zero-Installs</a> effort, making your production systems stabler than ever.</p>\n</li>\n<li>\n<p>Programs start faster, because the Node resolution doesn't have to iterate over the filesystem hierarchy nearly as much as before (and soon won't have to do it at all!).</p>\n</li>\n</ul>\n<h2>Caveats and work-in-progress</h2>\n<p>During the years that led to Plug'n'Play being designed and adopted as main install strategy, various projects came up with their own implementation of the Node Resolution Algorithm - usually to circumvent shortcomings of the <code>require.resolve</code> API. Such projects can be Webpack (<code>enhanced-resolve</code>), Babel (<code>resolve</code>), Jest (<code>jest-resolve</code>), Metro (<code>metro-resolver</code>), ...</p>\n<p>The following compatibility table gives you an idea of the integration status with various tools from the community. Note that only CLI tools are listed there, as frontend libraries (such as <code>react</code>, <code>vue</code>, <code>lodash</code>, ...) don't reimplement the Node resolution and as such don't need any special logic to take advantage from Plug'n'Play:</p>\n<table>\n<thead>\n<tr>\n<th>Project name</th>\n<th>Status</th>\n<th>Note</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Webpack</td>\n<td>Plugin</td>\n<td>Via <a href=\"https://github.com/arcanis/pnp-webpack-plugin\">pnp-webpack-plugin</a></td>\n</tr>\n<tr>\n<td>Babel</td>\n<td>Native</td>\n<td>Starting from <code>resolve</code> 1.9+</td>\n</tr>\n<tr>\n<td>Jest</td>\n<td>Native</td>\n<td>Starting from 24.1+</td>\n</tr>\n<tr>\n<td>Create-React-App</td>\n<td>Native</td>\n<td>Starting from 2.0+</td>\n</tr>\n<tr>\n<td>Gatsby</td>\n<td>Partial</td>\n<td>Check <a href=\"https://github.com/yarnpkg/berry/issues/9\">the investigation thread</a> for more info</td>\n</tr>\n<tr>\n<td>ESLint</td>\n<td>Partial</td>\n<td>Check <a href=\"https://github.com/yarnpkg/berry/issues/8\">the investigation thread</a> for more info</td>\n</tr>\n<tr>\n<td>React Native</td>\n<td>Has blockers</td>\n<td>Work in progress</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"path":"/features/pnp","title":"Plug'n'Play"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}