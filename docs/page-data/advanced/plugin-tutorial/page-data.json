{"componentChunkName":"component---src-templates-article-js","path":"/advanced/plugin-tutorial","webpackCompilationHash":"b972b7714fecf20fdeee","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"/advanced/architecture","title":"Architecture"}}},{"node":{"frontmatter":{"path":"/advanced/contributing","title":"Contributing"}}},{"node":{"frontmatter":{"path":"/advanced/error-codes","title":"Error Codes"}}},{"node":{"frontmatter":{"path":"/advanced/lexicon","title":"Lexicon"}}},{"node":{"frontmatter":{"path":"/advanced/migration","title":"Migration"}}},{"node":{"frontmatter":{"path":"/advanced/peer-dependencies","title":"Peer Dependencies"}}},{"node":{"frontmatter":{"path":"/advanced/plugin-tutorial","title":"Plugin Tutorial"}}},{"node":{"frontmatter":{"path":"/advanced/pnpapi","title":"PnP API"}}},{"node":{"frontmatter":{"path":"/advanced/pnpify","title":"PnPify"}}}]},"markdownRemark":{"html":"<p>Starting from the v2, Yarn now supports plugins. For more information about what they are and in which case you'd want to use them, consult the <a href=\"/berry/features/plugins\">dedicated page</a>. We'll talk here about the exact steps needed to write one. It's quite simple, really!</p>\n<h2 id=\"what-does-a-plugin-look-like\"><a href=\"#what-does-a-plugin-look-like\" aria-label=\"what does a plugin look like permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What does a plugin look like?</h2>\n<p>Plugins are scripts that get loaded at runtime by Yarn, and that can inject new behaviors into it. They also can require some packages provided by Yarn itself, such as <code class=\"language-text\">@berry/core</code>. This allows you to use the exact same core API as the Yarn binary currently in use, kinda like if it was a peer dependency!</p>\n<blockquote>\n<p><strong>Important:</strong> Since plugins are loaded before Yarn starts (and thus before you make your first install), it's strongly advised to write your plugins in such a way that they work without dependencies. If that becomes difficult, know that we provide a tool that can bundle your plugins into a single Javascript file, ready to be published.</p>\n</blockquote>\n<h2 id=\"writing-our-first-plugin\"><a href=\"#writing-our-first-plugin\" aria-label=\"writing our first plugin permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing our first plugin</h2>\n<p>Open in a text editor a new file called <code class=\"language-text\">plugin-hello-world.js</code>, and type the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`plugin-hello-world`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">factory</span><span class=\"token punctuation\">:</span> <span class=\"token parameter\">require</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We have our plugin, but now we need to register it so that Yarn knows where to find it. To do this, we'll just add an entry within the <code class=\"language-text\">.yarnrc.yml</code> file at the root of the repository:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> ./plugin<span class=\"token punctuation\">-</span>hello<span class=\"token punctuation\">-</span>world.js</code></pre></div>\n<p>That's it! You have your first plugin, congratulations! Of course it doesn't do much (or anything at all, really), but we'll see how to extend it to make it more powerful.</p>\n<h2 id=\"using-hooks\"><a href=\"#using-hooks\" aria-label=\"using hooks permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using hooks</h2>\n<p>Plugins can register to various events in the Yarn lifetime, and provide them additional information to alter their behavior. To do this, you just need to declare a new <code class=\"language-text\">hooks</code> property in your plugin and add members for each hook you want to listen to:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`plugin-hello-world`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">factory</span><span class=\"token punctuation\">:</span> <span class=\"token parameter\">require</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      hooks<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setupScriptEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">scriptEnv</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          scriptEnv<span class=\"token punctuation\">.</span><span class=\"token constant\">HELLO_WORLD</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`my first plugin!`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In this example, we registered to the <code class=\"language-text\">setupScriptEnvironment</code> hook and used it to inject an argument into the environment. Now, each time you'll run a script, you'll see that your env will contain a new value called <code class=\"language-text\">HELLO_WORLD</code>!</p>\n<p>Hooks are numerous, and we're still working on them. Some might be added, removed, or changed, based on your feedback. So if you'd like to do something hooks don't allow you to do yet, come tell us!</p>\n<h2 id=\"using-commands\"><a href=\"#using-commands\" aria-label=\"using commands permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using commands</h2>\n<p>Plugins can also register their own commands. To do this, we just have to write them using the <a href=\"https://github.com/arcanis/clipanion\"><code class=\"language-text\">clipanion</code></a> library - and we don't even have to add it to our dependencies! Let's see an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`plugin-hello-world`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">factory</span><span class=\"token punctuation\">:</span> <span class=\"token parameter\">require</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>Command<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`clipanion`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorldCommand</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Command</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">async</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`This is my very own plugin 😎\\n`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        commands<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          HelloWorldCommand<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, try to run <code class=\"language-text\">yarn hello world</code>. You'll see your message appear! Note that you can use the full set of features provided by clipanion, including short options, long options, variadic argument lists, ... You can even validate your options using the <a href=\"https://github.com/jquense/yup\"><code class=\"language-text\">yup</code></a> library, which we provide. Here's an example where we only accept email addresses as parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`plugin-hello-world`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">factory</span><span class=\"token punctuation\">:</span> <span class=\"token parameter\">require</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>Command<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`clipanion`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> yup <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`yup`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorldCommand</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Command</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">async</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>email<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 💌\\n`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Note: This curious syntax is because @Command.String is actually</span>\n    <span class=\"token comment\">// a decorator! But since they aren't supported in native JS at the</span>\n    <span class=\"token comment\">// moment, we need to call them manually.</span>\n    Command<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`--email`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorldCommand</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`email`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Similarly, native JS doesn't support member variable as of today,</span>\n    <span class=\"token comment\">// hence the awkward writing.</span>\n    HelloWorldCommand<span class=\"token punctuation\">.</span>schema <span class=\"token operator\">=</span> yup<span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      email<span class=\"token punctuation\">:</span> yup<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">required</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      commands<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        HelloWorldCommand<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"path":"/advanced/plugin-tutorial","title":"Plugin Tutorial"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"category":"advanced"}}}