{"componentChunkName":"component---src-templates-article-js","path":"/advanced/managing-releases","webpackCompilationHash":"a7a641c4afaba59f14a1","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"/advanced/architecture","title":"Architecture"}}},{"node":{"frontmatter":{"path":"/advanced/contributing","title":"Contributing"}}},{"node":{"frontmatter":{"path":"/advanced/error-codes","title":"Error Codes"}}},{"node":{"frontmatter":{"path":"/advanced/lexicon","title":"Lexicon"}}},{"node":{"frontmatter":{"path":"/advanced/managing-releases","title":"Managing Releases"}}},{"node":{"frontmatter":{"path":"/advanced/migration","title":"Migration"}}},{"node":{"frontmatter":{"path":"/advanced/peer-dependencies","title":"Peer Dependencies"}}},{"node":{"frontmatter":{"path":"/advanced/plugin-tutorial","title":"Plugin Tutorial"}}},{"node":{"frontmatter":{"path":"/advanced/pnpapi","title":"PnP API"}}},{"node":{"frontmatter":{"path":"/advanced/pnpify","title":"PnPify"}}}]},"markdownRemark":{"html":"<p>An hard task when working in a monorepo, and in particular when managing multiple packages, is to figure out which packages should be bumped when doing a new release. Yarn offers a few tools that aim to make this workflow easier without need for third-party softwares, althought it's possible to leverage those tools and build more integrated workflows.</p>\n<h2 id=\"auto-updated-dependencies\"><a href=\"#auto-updated-dependencies\" aria-label=\"auto updated dependencies permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Auto-updated dependencies</h2>\n<p>When running the <code class=\"language-text\">yarn version</code> command to upgrade the version of a workspace, every other workspace that depend on the first one through a basic semver ranges (<code class=\"language-text\">^x.y.z</code>, <code class=\"language-text\">~x.y.z</code>, ...) will get auto-updated to reference the new version. For example, let's say we have the following workspaces:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/packages/common (1.0.0)\n/packages/server (depends on common@^1.0.0)\n/packages/client (depends on common@^1.0.0)</code></pre></div>\n<p>In pre-2.0, upgrading <code class=\"language-text\">common</code> would have required you to run the command there, then go into each of <code class=\"language-text\">server</code> and <code class=\"language-text\">client</code> to manually upgrade their dependencies to reference the new version. But not anymore! If we run <code class=\"language-text\">yarn version 1.1.1</code> into <code class=\"language-text\">common</code>, the following changes will be applied:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/packages/common (1.1.1)\n/packages/server (depends on common@^1.1.1)\n/packages/client (depends on common@^1.1.1)</code></pre></div>\n<p>Of course it's not that important when the packages from the monorepo are always meant to be used as part of the monorepo, but it becomes much more interesting when you work with multiple packages meant to be published. Had you forget to bump the referenced range of either of your dependent packages, your users would have potentially downloaded an old version of <code class=\"language-text\">common</code> which wouldn't have been compatible with the newer one.</p>\n<h2 id=\"deferred-versioning\"><a href=\"#deferred-versioning\" aria-label=\"deferred versioning permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deferred versioning</h2>\n<p>Starting from the 2.0, the <code class=\"language-text\">yarn version</code> command now accepts a new flag: <code class=\"language-text\">--deferred</code>. When set, this flag will cause the command to not directly change the <code class=\"language-text\">version</code> field of the local manifest, but instead create a new field called <code class=\"language-text\">nextVersion</code>. For example, the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> version 1.0.0\n<span class=\"token function\">yarn</span> version minor --deferred</code></pre></div>\n<p>Would generate the following field:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"nextVersion\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"semver\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.1.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"nonce\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"102039092\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>One question you might have is: why? Why does it matter? To answer it, let's take the case of a successful open-source project which receives many contributions. Users work on various features, which you merge, and every once in a while you make a release for everything that got modified.</p>\n<p>But now the problem is: how do you choose which packages to bump? Some tools offer to detect it based on the commit messages, but that implies that a specific style of commit message must be followed - and it causes ambiguities when multiple packages are modified in a single commit with various degrees of severity.</p>\n<p>What <code class=\"language-text\">--deferred</code> offers, instead, is to let your users (and reviewers) decide when should a package be bumped. By using this flag, they're essentially telling Yarn: \"at some point, I'll need to bump this package by at least a minor\". Then once all the changes have been made, once all the pull requests have been merged, all that remains is to run <code class=\"language-text\">yarn version apply</code> to simultaneously update the version numbers of all the packages that were scheduled for a bump.</p>\n<h2 id=\"ensuring-that-versions-are-bumped-ci\"><a href=\"#ensuring-that-versions-are-bumped-ci\" aria-label=\"ensuring that versions are bumped ci permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ensuring that versions are bumped (CI)</h2>\n<p>One problem with the <code class=\"language-text\">--deferred</code> flag, however, is that it becomes impossible to distinguish whether a PR bumped a package via a redundant strategy (for example when merging two minor features for the same release), or whether the PR author simply forgot to run the command on the affected package.</p>\n<p>To solve this problem in an automated way, the <code class=\"language-text\">yarn version check</code> command appeared. When run, this command will figure out which packages changed and whether they received a version bump. If they didn't, an error will be thrown and assuming to integrate this into a CI system the PR author will be asked to be explicit about whether their changes should cause any package to be bumped.</p>\n<p>Even better, <code class=\"language-text\">yarn version check</code> also works through transitive dependencies. So going back on our past example, should you modify your <code class=\"language-text\">common</code> package, running <code class=\"language-text\">yarn version check</code> will ask you to explicitly bump any non-private package that would happen to depend on it. Private packages get a pass because they're assumed to only work within the context of your repository, and thus don't need to have their version bumped.</p>\n<p>Some changes don't require any version bump, of course! For those, just run <code class=\"language-text\">yarn version decline --deferred</code> and Yarn will take care of the rest.</p>\n<blockquote>\n<p><strong>How does it work?</strong></p>\n<p>You might have seen in the previous section this interesting <code class=\"language-text\">nonce</code> field. The nonce is used to mark whether a package received an explicit version bump or not. When running <code class=\"language-text\">yarn version check</code>, Yarn checks whether each workspace that got modified lists a new nonce compared to master. If they don't, it will recommand you to run <code class=\"language-text\">yarn version ... --deferred</code>, which will generate a new nonce regardless of whether a version bump would be redundant or not.</p>\n</blockquote>","frontmatter":{"path":"/advanced/managing-releases","title":"Managing Releases"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"category":"advanced"}}}