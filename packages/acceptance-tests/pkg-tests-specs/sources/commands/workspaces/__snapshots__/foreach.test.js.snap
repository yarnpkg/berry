// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Commands workspace foreach --since --recursive runs on workspaces changed and their dependents 1`] = `
{
  "code": 0,
  "stderr": "",
  "stdout": "Test Workspace A
Test Workspace B
Test Workspace D
Test Workspace E
Test Workspace F
Test Workspace C
Done
",
}
`;

exports[`Commands workspace foreach --since runs on no workspaces if there are no staged or unstaged changes on the default branch 1`] = `
{
  "code": 0,
  "stderr": "",
  "stdout": "Done
",
}
`;

exports[`Commands workspace foreach --since runs on no workspaces if there have been no changes 1`] = `
{
  "code": 0,
  "stderr": "",
  "stdout": "Done
",
}
`;

exports[`Commands workspace foreach --since runs on workspaces changed since branching from the default branch 1`] = `
{
  "code": 0,
  "stderr": "",
  "stdout": "Test Workspace B
Test Workspace C
Test Workspace D
Test Workspace E
Test Workspace F
Test Workspace G
Done
",
}
`;

exports[`Commands workspace foreach --since runs on workspaces changed since commit 1`] = `
{
  "code": 0,
  "stderr": "",
  "stdout": "Test Workspace B
Test Workspace C
Test Workspace D
Test Workspace E
Test Workspace F
Test Workspace G
Done
",
}
`;

exports[`Commands workspace foreach --since runs only on changed workspaces 1`] = `
{
  "code": 0,
  "stderr": "",
  "stdout": "Test Workspace A
Done
",
}
`;

exports[`Commands workspace foreach can run on public workspaces only 1`] = `
{
  "code": 0,
  "stderr": "",
  "stdout": "Test Workspace A
Test Workspace C
Done
",
}
`;

exports[`Commands workspace foreach should execute 'node' command 1`] = `
{
  "code": 0,
  "orderedStdout": [
    "workspace-c",
    "workspace-d",
    "workspace-e",
    "workspace-f",
    "workspace-g",
  ],
  "stderr": "",
}
`;

exports[`Commands workspace foreach should handle global scripts getting downgraded to a normal script 1`] = `
{
  "code": 0,
  "stderr": "",
  "stdout": "root workspace
Test Workspace G
Done
",
}
`;

exports[`Commands workspace foreach should include dependencies if using --recursive 1`] = `
{
  "code": 0,
  "stderr": "",
  "stdout": "Test Workspace A
Test Workspace C
Test Workspace B
Done
",
}
`;

exports[`Commands workspace foreach should include dependencies of workspaces matching the from filter if using --from and --recursive 1`] = `
{
  "code": 0,
  "stderr": "",
  "stdout": "Test Workspace A
Test Workspace G
Test Workspace C
Test Workspace B
Done
",
}
`;

exports[`Commands workspace foreach should never run the scripts on workspaces that match the --exclude list 1`] = `
{
  "code": 0,
  "stderr": "",
  "stdout": "[workspace-c]: Process started
[workspace-c]: Test Workspace C
[workspace-c]: Process exited (exit code 0)

[workspace-d]: Process started
[workspace-d]: Test Workspace D
[workspace-d]: Process exited (exit code 0)

[workspace-e]: Process started
[workspace-e]: Test Workspace E
[workspace-e]: Process exited (exit code 0)

[workspace-f]: Process started
[workspace-f]: Test Workspace F
[workspace-f]: Process exited (exit code 0)

[workspace-g]: Process started
[workspace-g]: Test Workspace G
[workspace-g]: Process exited (exit code 0)
Done
",
}
`;

exports[`Commands workspace foreach should not fall into endless loop if foreach cmd is the same as lifecycle script name 1`] = `
{
  "code": 0,
  "stderr": "",
  "stdout": "Test Workspace A
Test Workspace B
Test Workspace C
Test Workspace D
Test Workspace E
Test Workspace F
Test Workspace G
Done
",
}
`;

exports[`Commands workspace foreach should not include the prefix or a âž¤ character when run with --no-verbose 1`] = `
{
  "code": 0,
  "stderr": "",
  "stdout": "Test Workspace A
Test Workspace B
Test Workspace C
Test Workspace D
Test Workspace E
Test Workspace F
Test Workspace G
Done
",
}
`;

exports[`Commands workspace foreach should only run the scripts on workspaces that match the --include list 1`] = `
{
  "code": 0,
  "stderr": "",
  "stdout": "[workspace-a]: Process started
[workspace-a]: Test Workspace A
[workspace-a]: Process exited (exit code 0)

[workspace-b]: Process started
[workspace-b]: Test Workspace B
[workspace-b]: Process exited (exit code 0)
Done
",
}
`;

exports[`Commands workspace foreach should prefix the output with run with --verbose 1`] = `
{
  "code": 0,
  "stderr": "",
  "stdout": "[workspace-a]: Process started
[workspace-a]: Test Workspace A
[workspace-a]: Process exited (exit code 0)

[workspace-b]: Process started
[workspace-b]: Test Workspace B
[workspace-b]: Process exited (exit code 0)

[workspace-c]: Process started
[workspace-c]: Test Workspace C
[workspace-c]: Process exited (exit code 0)

[workspace-d]: Process started
[workspace-d]: Test Workspace D
[workspace-d]: Process exited (exit code 0)

[workspace-e]: Process started
[workspace-e]: Test Workspace E
[workspace-e]: Process exited (exit code 0)

[workspace-f]: Process started
[workspace-f]: Test Workspace F
[workspace-f]: Process exited (exit code 0)

[workspace-g]: Process started
[workspace-g]: Test Workspace G
[workspace-g]: Process exited (exit code 0)
Done
",
}
`;

exports[`Commands workspace foreach should run execute global scripts even on workspaces that don't declare them 1`] = `
{
  "code": 0,
  "stderr": "",
  "stdout": "One execution
One execution
One execution
One execution
One execution
One execution
One execution
One execution
Done
",
}
`;

exports[`Commands workspace foreach should run on current and descendant workspaces by default 1`] = `
{
  "code": 0,
  "stderr": "",
  "stdout": "Test Workspace C
Test Workspace D
Test Workspace E
Test Workspace F
Test Workspace G
Done
",
}
`;

exports[`Commands workspace foreach should run scripts in parallel but following the topological order when run with --parallel --topological 1`] = `
[
  "C",
  "B",
  "D",
  "E",
  "F",
]
`;

exports[`Commands workspace foreach should run scripts in parallel but following the topological order when run with --parallel --topological 2`] = `
{
  "code": 0,
  "stderr": "",
}
`;

exports[`Commands workspace foreach should start all the processes at once when --jobs is unlimited 1`] = `
{
  "code": 0,
  "first7Lines": "[workspace-a]: Process started
[workspace-b]: Process started
[workspace-c]: Process started
[workspace-d]: Process started
[workspace-e]: Process started
[workspace-f]: Process started
[workspace-g]: Process started",
  "stderr": "",
}
`;
