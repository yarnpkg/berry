module.exports = "(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pnpHook\"] = factory();\n\telse\n\t\troot[\"pnpHook\"] = factory();\n})(global, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 12);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst path_1 = __importDefault(__webpack_require__(7));\n\nexports.PortablePath = {\n  root: `/`,\n  dot: `.`\n};\nexports.Filename = {\n  nodeModules: `node_modules`,\n  manifest: `package.json`,\n  lockfile: `yarn.lock`\n};\nexports.npath = Object.create(path_1.default);\nexports.ppath = Object.create(path_1.default.posix);\n\nexports.npath.cwd = () => process.cwd();\n\nexports.ppath.cwd = () => toPortablePath(process.cwd());\n\nexports.ppath.resolve = (...segments) => path_1.default.posix.resolve(exports.ppath.cwd(), ...segments);\n\nconst contains = function (pathUtils, from, to) {\n  from = pathUtils.normalize(from);\n  to = pathUtils.normalize(to);\n  if (from === to) return `.`;\n  if (!from.endsWith(pathUtils.sep)) from = from + pathUtils.sep;\n\n  if (to.startsWith(from)) {\n    return to.slice(from.length);\n  } else {\n    return null;\n  }\n};\n\nexports.npath.fromPortablePath = fromPortablePath;\nexports.npath.toPortablePath = toPortablePath;\n\nexports.npath.contains = (from, to) => contains(exports.npath, from, to);\n\nexports.ppath.contains = (from, to) => contains(exports.ppath, from, to);\n\nconst WINDOWS_PATH_REGEXP = /^([a-zA-Z]:.*)$/;\nconst UNC_WINDOWS_PATH_REGEXP = /^\\\\\\\\(\\.\\\\)?(.*)$/;\nconst PORTABLE_PATH_REGEXP = /^\\/([a-zA-Z]:.*)$/;\nconst UNC_PORTABLE_PATH_REGEXP = /^\\/unc\\/(\\.dot\\/)?(.*)$/; // Path should look like \"/N:/berry/scripts/plugin-pack.js\"\n// And transform to \"N:\\berry\\scripts\\plugin-pack.js\"\n\nfunction fromPortablePath(p) {\n  if (process.platform !== `win32`) return p;\n  if (p.match(PORTABLE_PATH_REGEXP)) p = p.replace(PORTABLE_PATH_REGEXP, `$1`);else if (p.match(UNC_PORTABLE_PATH_REGEXP)) p = p.replace(UNC_PORTABLE_PATH_REGEXP, (match, p1, p2) => `\\\\\\\\${p1 ? `.\\\\` : ``}${p2}`);else return p;\n  return p.replace(/\\//g, `\\\\`);\n} // Path should look like \"N:/berry/scripts/plugin-pack.js\"\n// And transform to \"/N:/berry/scripts/plugin-pack.js\"\n\n\nfunction toPortablePath(p) {\n  if (process.platform !== `win32`) return p;\n  if (p.match(WINDOWS_PATH_REGEXP)) p = p.replace(WINDOWS_PATH_REGEXP, `/$1`);else if (p.match(UNC_WINDOWS_PATH_REGEXP)) p = p.replace(UNC_WINDOWS_PATH_REGEXP, (match, p1, p2) => `/unc/${p1 ? `.dot/` : ``}${p2}`);\n  return p.replace(/\\\\/g, `/`);\n}\n\nfunction convertPath(targetPathUtils, sourcePath) {\n  return targetPathUtils === exports.npath ? fromPortablePath(sourcePath) : toPortablePath(sourcePath);\n}\n\nexports.convertPath = convertPath;\n\nfunction toFilename(filename) {\n  if (exports.npath.parse(filename).dir !== `` || exports.ppath.parse(filename).dir !== ``) throw new Error(`Invalid filename: \"${filename}\"`);\n  return filename;\n}\n\nexports.toFilename = toFilename;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs_1 = __importDefault(__webpack_require__(2));\n\nconst FakeFS_1 = __webpack_require__(3);\n\nconst path_1 = __webpack_require__(0);\n\nclass NodeFS extends FakeFS_1.BasePortableFakeFS {\n  constructor(realFs = fs_1.default) {\n    super();\n    this.realFs = realFs;\n  }\n\n  getExtractHint() {\n    return false;\n  }\n\n  getRealPath() {\n    return path_1.PortablePath.root;\n  }\n\n  async openPromise(p, flags, mode) {\n    return await new Promise((resolve, reject) => {\n      this.realFs.open(path_1.npath.fromPortablePath(p), flags, mode, this.makeCallback(resolve, reject));\n    });\n  }\n\n  openSync(p, flags, mode) {\n    return this.realFs.openSync(path_1.npath.fromPortablePath(p), flags, mode);\n  }\n\n  async readPromise(fd, buffer, offset = 0, length = 0, position = -1) {\n    return await new Promise((resolve, reject) => {\n      this.realFs.read(fd, buffer, offset, length, position, (error, bytesRead) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(bytesRead);\n        }\n      });\n    });\n  }\n\n  readSync(fd, buffer, offset, length, position) {\n    return this.realFs.readSync(fd, buffer, offset, length, position);\n  }\n\n  async writePromise(fd, buffer, offset, length, position) {\n    return await new Promise((resolve, reject) => {\n      if (typeof buffer === `string`) {\n        return this.realFs.write(fd, buffer, offset, this.makeCallback(resolve, reject));\n      } else {\n        return this.realFs.write(fd, buffer, offset, length, position, this.makeCallback(resolve, reject));\n      }\n    });\n  }\n\n  writeSync(fd, buffer, offset, length, position) {\n    if (typeof buffer === `string`) {\n      return this.realFs.writeSync(fd, buffer, offset);\n    } else {\n      return this.realFs.writeSync(fd, buffer, offset, length, position);\n    }\n  }\n\n  async closePromise(fd) {\n    await new Promise((resolve, reject) => {\n      this.realFs.close(fd, this.makeCallback(resolve, reject));\n    });\n  }\n\n  closeSync(fd) {\n    this.realFs.closeSync(fd);\n  }\n\n  createReadStream(p, opts) {\n    const realPath = p !== null ? path_1.npath.fromPortablePath(p) : p;\n    return this.realFs.createReadStream(realPath, opts);\n  }\n\n  createWriteStream(p, opts) {\n    const realPath = p !== null ? path_1.npath.fromPortablePath(p) : p;\n    return this.realFs.createWriteStream(realPath, opts);\n  }\n\n  async realpathPromise(p) {\n    return await new Promise((resolve, reject) => {\n      this.realFs.realpath(path_1.npath.fromPortablePath(p), {}, this.makeCallback(resolve, reject));\n    }).then(path => {\n      return path_1.npath.toPortablePath(path);\n    });\n  }\n\n  realpathSync(p) {\n    return path_1.npath.toPortablePath(this.realFs.realpathSync(path_1.npath.fromPortablePath(p), {}));\n  }\n\n  async existsPromise(p) {\n    return await new Promise(resolve => {\n      this.realFs.exists(path_1.npath.fromPortablePath(p), resolve);\n    });\n  }\n\n  accessSync(p, mode) {\n    return this.realFs.accessSync(path_1.npath.fromPortablePath(p), mode);\n  }\n\n  async accessPromise(p, mode) {\n    return await new Promise((resolve, reject) => {\n      this.realFs.access(path_1.npath.fromPortablePath(p), mode, this.makeCallback(resolve, reject));\n    });\n  }\n\n  existsSync(p) {\n    return this.realFs.existsSync(path_1.npath.fromPortablePath(p));\n  }\n\n  async statPromise(p) {\n    return await new Promise((resolve, reject) => {\n      this.realFs.stat(path_1.npath.fromPortablePath(p), this.makeCallback(resolve, reject));\n    });\n  }\n\n  statSync(p) {\n    return this.realFs.statSync(path_1.npath.fromPortablePath(p));\n  }\n\n  async lstatPromise(p) {\n    return await new Promise((resolve, reject) => {\n      this.realFs.lstat(path_1.npath.fromPortablePath(p), this.makeCallback(resolve, reject));\n    });\n  }\n\n  lstatSync(p) {\n    return this.realFs.lstatSync(path_1.npath.fromPortablePath(p));\n  }\n\n  async chmodPromise(p, mask) {\n    return await new Promise((resolve, reject) => {\n      this.realFs.chmod(path_1.npath.fromPortablePath(p), mask, this.makeCallback(resolve, reject));\n    });\n  }\n\n  chmodSync(p, mask) {\n    return this.realFs.chmodSync(path_1.npath.fromPortablePath(p), mask);\n  }\n\n  async renamePromise(oldP, newP) {\n    return await new Promise((resolve, reject) => {\n      this.realFs.rename(path_1.npath.fromPortablePath(oldP), path_1.npath.fromPortablePath(newP), this.makeCallback(resolve, reject));\n    });\n  }\n\n  renameSync(oldP, newP) {\n    return this.realFs.renameSync(path_1.npath.fromPortablePath(oldP), path_1.npath.fromPortablePath(newP));\n  }\n\n  async copyFilePromise(sourceP, destP, flags = 0) {\n    return await new Promise((resolve, reject) => {\n      this.realFs.copyFile(path_1.npath.fromPortablePath(sourceP), path_1.npath.fromPortablePath(destP), flags, this.makeCallback(resolve, reject));\n    });\n  }\n\n  copyFileSync(sourceP, destP, flags = 0) {\n    return this.realFs.copyFileSync(path_1.npath.fromPortablePath(sourceP), path_1.npath.fromPortablePath(destP), flags);\n  }\n\n  async appendFilePromise(p, content, opts) {\n    return await new Promise((resolve, reject) => {\n      const fsNativePath = typeof p === `string` ? path_1.npath.fromPortablePath(p) : p;\n\n      if (opts) {\n        this.realFs.appendFile(fsNativePath, content, opts, this.makeCallback(resolve, reject));\n      } else {\n        this.realFs.appendFile(fsNativePath, content, this.makeCallback(resolve, reject));\n      }\n    });\n  }\n\n  appendFileSync(p, content, opts) {\n    const fsNativePath = typeof p === `string` ? path_1.npath.fromPortablePath(p) : p;\n\n    if (opts) {\n      this.realFs.appendFileSync(fsNativePath, content, opts);\n    } else {\n      this.realFs.appendFileSync(fsNativePath, content);\n    }\n  }\n\n  async writeFilePromise(p, content, opts) {\n    return await new Promise((resolve, reject) => {\n      const fsNativePath = typeof p === `string` ? path_1.npath.fromPortablePath(p) : p;\n\n      if (opts) {\n        this.realFs.writeFile(fsNativePath, content, opts, this.makeCallback(resolve, reject));\n      } else {\n        this.realFs.writeFile(fsNativePath, content, this.makeCallback(resolve, reject));\n      }\n    });\n  }\n\n  writeFileSync(p, content, opts) {\n    const fsNativePath = typeof p === `string` ? path_1.npath.fromPortablePath(p) : p;\n\n    if (opts) {\n      this.realFs.writeFileSync(fsNativePath, content, opts);\n    } else {\n      this.realFs.writeFileSync(fsNativePath, content);\n    }\n  }\n\n  async unlinkPromise(p) {\n    return await new Promise((resolve, reject) => {\n      this.realFs.unlink(path_1.npath.fromPortablePath(p), this.makeCallback(resolve, reject));\n    });\n  }\n\n  unlinkSync(p) {\n    return this.realFs.unlinkSync(path_1.npath.fromPortablePath(p));\n  }\n\n  async utimesPromise(p, atime, mtime) {\n    return await new Promise((resolve, reject) => {\n      this.realFs.utimes(path_1.npath.fromPortablePath(p), atime, mtime, this.makeCallback(resolve, reject));\n    });\n  }\n\n  utimesSync(p, atime, mtime) {\n    this.realFs.utimesSync(path_1.npath.fromPortablePath(p), atime, mtime);\n  }\n\n  async mkdirPromise(p, opts) {\n    return await new Promise((resolve, reject) => {\n      this.realFs.mkdir(path_1.npath.fromPortablePath(p), opts, this.makeCallback(resolve, reject));\n    });\n  }\n\n  mkdirSync(p, opts) {\n    return this.realFs.mkdirSync(path_1.npath.fromPortablePath(p), opts);\n  }\n\n  async rmdirPromise(p) {\n    return await new Promise((resolve, reject) => {\n      this.realFs.rmdir(path_1.npath.fromPortablePath(p), this.makeCallback(resolve, reject));\n    });\n  }\n\n  rmdirSync(p) {\n    return this.realFs.rmdirSync(path_1.npath.fromPortablePath(p));\n  }\n\n  async symlinkPromise(target, p, type) {\n    const symlinkType = type || (target.endsWith(`/`) ? `dir` : `file`);\n    return await new Promise((resolve, reject) => {\n      this.realFs.symlink(path_1.npath.fromPortablePath(target.replace(/\\/+$/, ``)), path_1.npath.fromPortablePath(p), symlinkType, this.makeCallback(resolve, reject));\n    });\n  }\n\n  symlinkSync(target, p, type) {\n    const symlinkType = type || (target.endsWith(`/`) ? `dir` : `file`);\n    return this.realFs.symlinkSync(path_1.npath.fromPortablePath(target.replace(/\\/+$/, ``)), path_1.npath.fromPortablePath(p), symlinkType);\n  }\n\n  async readFilePromise(p, encoding) {\n    return await new Promise((resolve, reject) => {\n      const fsNativePath = typeof p === `string` ? path_1.npath.fromPortablePath(p) : p;\n      this.realFs.readFile(fsNativePath, encoding, this.makeCallback(resolve, reject));\n    });\n  }\n\n  readFileSync(p, encoding) {\n    const fsNativePath = typeof p === `string` ? path_1.npath.fromPortablePath(p) : p;\n    return this.realFs.readFileSync(fsNativePath, encoding);\n  }\n\n  async readdirPromise(p, {\n    withFileTypes\n  } = {}) {\n    return await new Promise((resolve, reject) => {\n      if (withFileTypes) {\n        this.realFs.readdir(path_1.npath.fromPortablePath(p), {\n          withFileTypes: true\n        }, this.makeCallback(resolve, reject));\n      } else {\n        this.realFs.readdir(path_1.npath.fromPortablePath(p), this.makeCallback(value => resolve(value), reject));\n      }\n    });\n  }\n\n  readdirSync(p, {\n    withFileTypes\n  } = {}) {\n    if (withFileTypes) {\n      return this.realFs.readdirSync(path_1.npath.fromPortablePath(p), {\n        withFileTypes: true\n      });\n    } else {\n      return this.realFs.readdirSync(path_1.npath.fromPortablePath(p));\n    }\n  }\n\n  async readlinkPromise(p) {\n    return await new Promise((resolve, reject) => {\n      this.realFs.readlink(path_1.npath.fromPortablePath(p), this.makeCallback(resolve, reject));\n    }).then(path => {\n      return path_1.npath.toPortablePath(path);\n    });\n  }\n\n  readlinkSync(p) {\n    return path_1.npath.toPortablePath(this.realFs.readlinkSync(path_1.npath.fromPortablePath(p)));\n  }\n\n  watch(p, a, b) {\n    return this.realFs.watch(path_1.npath.fromPortablePath(p), // @ts-ignore\n    a, b);\n  }\n\n  makeCallback(resolve, reject) {\n    return (err, result) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(result);\n      }\n    };\n  }\n\n}\n\nexports.NodeFS = NodeFS;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"fs\");\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst os_1 = __webpack_require__(9);\n\nconst copyPromise_1 = __webpack_require__(13);\n\nconst path_1 = __webpack_require__(0);\n\nconst path_2 = __webpack_require__(0);\n\nclass FakeFS {\n  constructor(pathUtils) {\n    this.pathUtils = pathUtils;\n  }\n\n  async removePromise(p) {\n    let stat;\n\n    try {\n      stat = await this.lstatPromise(p);\n    } catch (error) {\n      if (error.code === `ENOENT`) {\n        return;\n      } else {\n        throw error;\n      }\n    }\n\n    if (stat.isDirectory()) {\n      for (const entry of await this.readdirPromise(p)) await this.removePromise(this.pathUtils.resolve(p, entry)); // 5 gives 1s worth of retries at worst\n\n\n      for (let t = 0; t < 5; ++t) {\n        try {\n          await this.rmdirPromise(p);\n          break;\n        } catch (error) {\n          if (error.code === `EBUSY` || error.code === `ENOTEMPTY`) {\n            await new Promise(resolve => setTimeout(resolve, t * 100));\n            continue;\n          } else {\n            throw error;\n          }\n        }\n      }\n    } else {\n      await this.unlinkPromise(p);\n    }\n  }\n\n  removeSync(p) {\n    let stat;\n\n    try {\n      stat = this.lstatSync(p);\n    } catch (error) {\n      if (error.code === `ENOENT`) {\n        return;\n      } else {\n        throw error;\n      }\n    }\n\n    if (stat.isDirectory()) {\n      for (const entry of this.readdirSync(p)) this.removeSync(this.pathUtils.resolve(p, entry));\n\n      this.rmdirSync(p);\n    } else {\n      this.unlinkSync(p);\n    }\n  }\n\n  async mkdirpPromise(p, {\n    chmod,\n    utimes\n  } = {}) {\n    p = this.resolve(p);\n    if (p === this.pathUtils.dirname(p)) return;\n    const parts = p.split(this.pathUtils.sep);\n\n    for (let u = 2; u <= parts.length; ++u) {\n      const subPath = parts.slice(0, u).join(this.pathUtils.sep);\n\n      if (!this.existsSync(subPath)) {\n        try {\n          await this.mkdirPromise(subPath);\n        } catch (error) {\n          if (error.code === `EEXIST`) {\n            continue;\n          } else {\n            throw error;\n          }\n        }\n\n        if (chmod != null) await this.chmodPromise(subPath, chmod);\n\n        if (utimes != null) {\n          await this.utimesPromise(subPath, utimes[0], utimes[1]);\n        } else {\n          const parentStat = await this.statPromise(this.pathUtils.dirname(subPath));\n          await this.utimesPromise(subPath, parentStat.atime, parentStat.mtime);\n        }\n      }\n    }\n  }\n\n  mkdirpSync(p, {\n    chmod,\n    utimes\n  } = {}) {\n    p = this.resolve(p);\n    if (p === this.pathUtils.dirname(p)) return;\n    const parts = p.split(this.pathUtils.sep);\n\n    for (let u = 2; u <= parts.length; ++u) {\n      const subPath = parts.slice(0, u).join(this.pathUtils.sep);\n\n      if (!this.existsSync(subPath)) {\n        try {\n          this.mkdirSync(subPath);\n        } catch (error) {\n          if (error.code === `EEXIST`) {\n            continue;\n          } else {\n            throw error;\n          }\n        }\n\n        if (chmod != null) this.chmodSync(subPath, chmod);\n\n        if (utimes != null) {\n          this.utimesSync(subPath, utimes[0], utimes[1]);\n        } else {\n          const parentStat = this.statSync(this.pathUtils.dirname(subPath));\n          this.utimesSync(subPath, parentStat.atime, parentStat.mtime);\n        }\n      }\n    }\n  }\n\n  async copyPromise(destination, source, {\n    baseFs = this,\n    overwrite = true\n  } = {}) {\n    return await copyPromise_1.copyPromise(this, destination, baseFs, source, {\n      overwrite\n    });\n  }\n\n  copySync(destination, source, {\n    baseFs = this,\n    overwrite = true\n  } = {}) {\n    const stat = baseFs.lstatSync(source);\n    const exists = this.existsSync(destination);\n\n    if (stat.isDirectory()) {\n      this.mkdirpSync(destination);\n      const directoryListing = baseFs.readdirSync(source);\n\n      for (const entry of directoryListing) {\n        this.copySync(this.pathUtils.join(destination, entry), baseFs.pathUtils.join(source, entry), {\n          baseFs,\n          overwrite\n        });\n      }\n    } else if (stat.isFile()) {\n      if (!exists || overwrite) {\n        if (exists) this.removeSync(destination);\n        const content = baseFs.readFileSync(source);\n        this.writeFileSync(destination, content);\n      }\n    } else if (stat.isSymbolicLink()) {\n      if (!exists || overwrite) {\n        if (exists) this.removeSync(destination);\n        const target = baseFs.readlinkSync(source);\n        this.symlinkSync(path_2.convertPath(this.pathUtils, target), destination);\n      }\n    } else {\n      throw new Error(`Unsupported file type (file: ${source}, mode: 0o${stat.mode.toString(8).padStart(6, `0`)})`);\n    }\n\n    const mode = stat.mode & 0o777;\n    this.chmodSync(destination, mode);\n  }\n\n  async changeFilePromise(p, content, {\n    automaticNewlines\n  } = {}) {\n    let current = ``;\n\n    try {\n      current = await this.readFilePromise(p, `utf8`);\n    } catch (error) {// ignore errors, no big deal\n    }\n\n    const normalizedContent = automaticNewlines ? normalizeLineEndings(current, content) : content;\n    if (current === normalizedContent) return;\n    await this.writeFilePromise(p, normalizedContent);\n  }\n\n  changeFileSync(p, content, {\n    automaticNewlines = false\n  } = {}) {\n    let current = ``;\n\n    try {\n      current = this.readFileSync(p, `utf8`);\n    } catch (error) {// ignore errors, no big deal\n    }\n\n    const normalizedContent = automaticNewlines ? normalizeLineEndings(current, content) : content;\n    if (current === normalizedContent) return;\n    this.writeFileSync(p, normalizedContent);\n  }\n\n  async movePromise(fromP, toP) {\n    try {\n      await this.renamePromise(fromP, toP);\n    } catch (error) {\n      if (error.code === `EXDEV`) {\n        await this.copyPromise(toP, fromP);\n        await this.removePromise(fromP);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  moveSync(fromP, toP) {\n    try {\n      this.renameSync(fromP, toP);\n    } catch (error) {\n      if (error.code === `EXDEV`) {\n        this.copySync(toP, fromP);\n        this.removeSync(fromP);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  async lockPromise(affectedPath, callback) {\n    const lockPath = `${affectedPath}.flock`;\n    const interval = 1000 / 60;\n    const startTime = Date.now();\n    let fd = null; // Even when we detect that a lock file exists, we still look inside to see\n    // whether the pid that created it is still alive. It's not foolproof\n    // (there are false positive), but there are no false negative and that's\n    // all that matters in 99% of the cases.\n\n    const isAlive = async () => {\n      let pid;\n\n      try {\n        [pid] = await this.readJsonPromise(lockPath);\n      } catch (error) {\n        // If we can't read the file repeatedly, we assume the process was\n        // aborted before even writing finishing writing the payload.\n        return Date.now() - startTime < 500;\n      }\n\n      try {\n        // \"As a special case, a signal of 0 can be used to test for the\n        // existence of a process\" - so we check whether it's alive.\n        process.kill(pid, 0);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    };\n\n    while (fd === null) {\n      try {\n        fd = await this.openPromise(lockPath, `wx`);\n      } catch (error) {\n        if (error.code === `EEXIST`) {\n          if (!(await isAlive())) {\n            try {\n              await this.unlinkPromise(lockPath);\n              continue;\n            } catch (error) {// No big deal if we can't remove it. Just fallback to wait for\n              // it to be eventually released by its owner.\n            }\n          }\n\n          if (Date.now() - startTime < 60 * 1000) {\n            await new Promise(resolve => setTimeout(resolve, interval));\n          } else {\n            throw new Error(`Couldn't acquire a lock in a reasonable time (via ${lockPath})`);\n          }\n        } else {\n          throw error;\n        }\n      }\n    }\n\n    await this.writePromise(fd, JSON.stringify([process.pid]));\n\n    try {\n      return await callback();\n    } finally {\n      try {\n        await this.unlinkPromise(lockPath);\n        await this.closePromise(fd);\n      } catch (error) {// noop\n      }\n    }\n  }\n\n  async readJsonPromise(p) {\n    const content = await this.readFilePromise(p, `utf8`);\n\n    try {\n      return JSON.parse(content);\n    } catch (error) {\n      error.message += ` (in ${p})`;\n      throw error;\n    }\n  }\n\n  async readJsonSync(p) {\n    const content = this.readFileSync(p, `utf8`);\n\n    try {\n      return JSON.parse(content);\n    } catch (error) {\n      error.message += ` (in ${p})`;\n      throw error;\n    }\n  }\n\n  async writeJsonPromise(p, data) {\n    return await this.writeFilePromise(p, `${JSON.stringify(data, null, 2)}\\n`);\n  }\n\n  writeJsonSync(p, data) {\n    return this.writeFileSync(p, `${JSON.stringify(data, null, 2)}\\n`);\n  }\n\n  async preserveTimePromise(p, cb) {\n    const stat = await this.lstatPromise(p);\n    const result = await cb();\n    if (typeof result !== `undefined`) p = result;\n\n    if (this.lutimesPromise) {\n      await this.lutimesPromise(p, stat.atime, stat.mtime);\n    } else if (!stat.isSymbolicLink()) {\n      await this.utimesPromise(p, stat.atime, stat.mtime);\n    }\n  }\n\n  async preserveTimeSync(p, cb) {\n    const stat = this.lstatSync(p);\n    const result = cb();\n    if (typeof result !== `undefined`) p = result;\n\n    if (this.lutimesSync) {\n      this.lutimesSync(p, stat.atime, stat.mtime);\n    } else if (!stat.isSymbolicLink()) {\n      this.utimesSync(p, stat.atime, stat.mtime);\n    }\n  }\n\n}\n\nexports.FakeFS = FakeFS;\nFakeFS.DEFAULT_TIME = 315532800;\n\nclass BasePortableFakeFS extends FakeFS {\n  constructor() {\n    super(path_2.ppath);\n  }\n\n  resolve(p) {\n    return this.pathUtils.resolve(path_1.PortablePath.root, p);\n  }\n\n}\n\nexports.BasePortableFakeFS = BasePortableFakeFS;\n\nfunction getEndOfLine(content) {\n  const matches = content.match(/\\r?\\n/g);\n  if (matches === null) return os_1.EOL;\n  const crlf = matches.filter(nl => nl === `\\r\\n`).length;\n  const lf = matches.length - crlf;\n  return crlf > lf ? `\\r\\n` : `\\n`;\n}\n\nfunction normalizeLineEndings(originalContent, newContent) {\n  return newContent.replace(/\\r?\\n/g, getEndOfLine(originalContent));\n}\n\nexports.normalizeLineEndings = normalizeLineEndings;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst FakeFS_1 = __webpack_require__(3);\n\nclass ProxiedFS extends FakeFS_1.FakeFS {\n  getExtractHint(hints) {\n    return this.baseFs.getExtractHint(hints);\n  }\n\n  resolve(path) {\n    return this.mapFromBase(this.baseFs.resolve(this.mapToBase(path)));\n  }\n\n  getRealPath() {\n    return this.mapFromBase(this.baseFs.getRealPath());\n  }\n\n  openPromise(p, flags, mode) {\n    return this.baseFs.openPromise(this.mapToBase(p), flags, mode);\n  }\n\n  openSync(p, flags, mode) {\n    return this.baseFs.openSync(this.mapToBase(p), flags, mode);\n  }\n\n  async readPromise(fd, buffer, offset, length, position) {\n    return await this.baseFs.readPromise(fd, buffer, offset, length, position);\n  }\n\n  readSync(fd, buffer, offset, length, position) {\n    return this.baseFs.readSync(fd, buffer, offset, length, position);\n  }\n\n  async writePromise(fd, buffer, offset, length, position) {\n    if (typeof buffer === `string`) {\n      return await this.baseFs.writePromise(fd, buffer, offset);\n    } else {\n      return await this.baseFs.writePromise(fd, buffer, offset, length, position);\n    }\n  }\n\n  writeSync(fd, buffer, offset, length, position) {\n    if (typeof buffer === `string`) {\n      return this.baseFs.writeSync(fd, buffer, offset);\n    } else {\n      return this.baseFs.writeSync(fd, buffer, offset, length, position);\n    }\n  }\n\n  closePromise(fd) {\n    return this.baseFs.closePromise(fd);\n  }\n\n  closeSync(fd) {\n    this.baseFs.closeSync(fd);\n  }\n\n  createReadStream(p, opts) {\n    return this.baseFs.createReadStream(p !== null ? this.mapToBase(p) : p, opts);\n  }\n\n  createWriteStream(p, opts) {\n    return this.baseFs.createWriteStream(p !== null ? this.mapToBase(p) : p, opts);\n  }\n\n  async realpathPromise(p) {\n    return this.mapFromBase((await this.baseFs.realpathPromise(this.mapToBase(p))));\n  }\n\n  realpathSync(p) {\n    return this.mapFromBase(this.baseFs.realpathSync(this.mapToBase(p)));\n  }\n\n  existsPromise(p) {\n    return this.baseFs.existsPromise(this.mapToBase(p));\n  }\n\n  existsSync(p) {\n    return this.baseFs.existsSync(this.mapToBase(p));\n  }\n\n  accessSync(p, mode) {\n    return this.baseFs.accessSync(this.mapToBase(p), mode);\n  }\n\n  accessPromise(p, mode) {\n    return this.baseFs.accessPromise(this.mapToBase(p), mode);\n  }\n\n  statPromise(p) {\n    return this.baseFs.statPromise(this.mapToBase(p));\n  }\n\n  statSync(p) {\n    return this.baseFs.statSync(this.mapToBase(p));\n  }\n\n  lstatPromise(p) {\n    return this.baseFs.lstatPromise(this.mapToBase(p));\n  }\n\n  lstatSync(p) {\n    return this.baseFs.lstatSync(this.mapToBase(p));\n  }\n\n  chmodPromise(p, mask) {\n    return this.baseFs.chmodPromise(this.mapToBase(p), mask);\n  }\n\n  chmodSync(p, mask) {\n    return this.baseFs.chmodSync(this.mapToBase(p), mask);\n  }\n\n  renamePromise(oldP, newP) {\n    return this.baseFs.renamePromise(this.mapToBase(oldP), this.mapToBase(newP));\n  }\n\n  renameSync(oldP, newP) {\n    return this.baseFs.renameSync(this.mapToBase(oldP), this.mapToBase(newP));\n  }\n\n  copyFilePromise(sourceP, destP, flags = 0) {\n    return this.baseFs.copyFilePromise(this.mapToBase(sourceP), this.mapToBase(destP), flags);\n  }\n\n  copyFileSync(sourceP, destP, flags = 0) {\n    return this.baseFs.copyFileSync(this.mapToBase(sourceP), this.mapToBase(destP), flags);\n  }\n\n  appendFilePromise(p, content, opts) {\n    return this.baseFs.appendFilePromise(this.fsMapToBase(p), content, opts);\n  }\n\n  appendFileSync(p, content, opts) {\n    return this.baseFs.appendFileSync(this.fsMapToBase(p), content, opts);\n  }\n\n  writeFilePromise(p, content, opts) {\n    return this.baseFs.writeFilePromise(this.fsMapToBase(p), content, opts);\n  }\n\n  writeFileSync(p, content, opts) {\n    return this.baseFs.writeFileSync(this.fsMapToBase(p), content, opts);\n  }\n\n  unlinkPromise(p) {\n    return this.baseFs.unlinkPromise(this.mapToBase(p));\n  }\n\n  unlinkSync(p) {\n    return this.baseFs.unlinkSync(this.mapToBase(p));\n  }\n\n  utimesPromise(p, atime, mtime) {\n    return this.baseFs.utimesPromise(this.mapToBase(p), atime, mtime);\n  }\n\n  utimesSync(p, atime, mtime) {\n    return this.baseFs.utimesSync(this.mapToBase(p), atime, mtime);\n  }\n\n  mkdirPromise(p, opts) {\n    return this.baseFs.mkdirPromise(this.mapToBase(p), opts);\n  }\n\n  mkdirSync(p, opts) {\n    return this.baseFs.mkdirSync(this.mapToBase(p), opts);\n  }\n\n  rmdirPromise(p) {\n    return this.baseFs.rmdirPromise(this.mapToBase(p));\n  }\n\n  rmdirSync(p) {\n    return this.baseFs.rmdirSync(this.mapToBase(p));\n  }\n\n  symlinkPromise(target, p, type) {\n    return this.baseFs.symlinkPromise(this.mapToBase(target), this.mapToBase(p), type);\n  }\n\n  symlinkSync(target, p, type) {\n    return this.baseFs.symlinkSync(this.mapToBase(target), this.mapToBase(p), type);\n  }\n\n  readFilePromise(p, encoding) {\n    // This weird condition is required to tell TypeScript that the signatures are proper (otherwise it thinks that only the generic one is covered)\n    if (encoding === `utf8`) {\n      return this.baseFs.readFilePromise(this.fsMapToBase(p), encoding);\n    } else {\n      return this.baseFs.readFilePromise(this.fsMapToBase(p), encoding);\n    }\n  }\n\n  readFileSync(p, encoding) {\n    // This weird condition is required to tell TypeScript that the signatures are proper (otherwise it thinks that only the generic one is covered)\n    if (encoding === `utf8`) {\n      return this.baseFs.readFileSync(this.fsMapToBase(p), encoding);\n    } else {\n      return this.baseFs.readFileSync(this.fsMapToBase(p), encoding);\n    }\n  }\n\n  async readdirPromise(p, {\n    withFileTypes\n  } = {}) {\n    return this.baseFs.readdirPromise(this.mapToBase(p), {\n      withFileTypes: withFileTypes\n    });\n  }\n\n  readdirSync(p, {\n    withFileTypes\n  } = {}) {\n    return this.baseFs.readdirSync(this.mapToBase(p), {\n      withFileTypes: withFileTypes\n    });\n  }\n\n  async readlinkPromise(p) {\n    return this.mapFromBase((await this.baseFs.readlinkPromise(this.mapToBase(p))));\n  }\n\n  readlinkSync(p) {\n    return this.mapFromBase(this.baseFs.readlinkSync(this.mapToBase(p)));\n  }\n\n  watch(p, a, b) {\n    return this.baseFs.watch(this.mapToBase(p), // @ts-ignore\n    a, b);\n  }\n\n  fsMapToBase(p) {\n    if (typeof p === `number`) {\n      return p;\n    } else {\n      return this.mapToBase(p);\n    }\n  }\n\n}\n\nexports.ProxiedFS = ProxiedFS;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst os_1 = __importDefault(__webpack_require__(9));\n\nconst util_1 = __webpack_require__(10);\n\nconst NodeFS_1 = __webpack_require__(1);\n\nconst path_1 = __webpack_require__(0);\n\nvar FakeFS_1 = __webpack_require__(3);\n\nexports.normalizeLineEndings = FakeFS_1.normalizeLineEndings;\n\nvar ZipFS_1 = __webpack_require__(8);\n\nexports.DEFAULT_COMPRESSION_LEVEL = ZipFS_1.DEFAULT_COMPRESSION_LEVEL;\n\nvar path_2 = __webpack_require__(0);\n\nexports.PortablePath = path_2.PortablePath;\nexports.Filename = path_2.Filename;\n\nvar path_3 = __webpack_require__(0);\n\nexports.npath = path_3.npath;\nexports.ppath = path_3.ppath;\nexports.toFilename = path_3.toFilename;\n\nvar AliasFS_1 = __webpack_require__(16);\n\nexports.AliasFS = AliasFS_1.AliasFS;\n\nvar FakeFS_2 = __webpack_require__(3);\n\nexports.FakeFS = FakeFS_2.FakeFS;\n\nvar CwdFS_1 = __webpack_require__(17);\n\nexports.CwdFS = CwdFS_1.CwdFS;\n\nvar JailFS_1 = __webpack_require__(18);\n\nexports.JailFS = JailFS_1.JailFS;\n\nvar LazyFS_1 = __webpack_require__(19);\n\nexports.LazyFS = LazyFS_1.LazyFS;\n\nvar NoFS_1 = __webpack_require__(20);\n\nexports.NoFS = NoFS_1.NoFS;\n\nvar NodeFS_2 = __webpack_require__(1);\n\nexports.NodeFS = NodeFS_2.NodeFS;\n\nvar PosixFS_1 = __webpack_require__(21);\n\nexports.PosixFS = PosixFS_1.PosixFS;\n\nvar ProxiedFS_1 = __webpack_require__(4);\n\nexports.ProxiedFS = ProxiedFS_1.ProxiedFS;\n\nvar VirtualFS_1 = __webpack_require__(22);\n\nexports.VirtualFS = VirtualFS_1.VirtualFS;\n\nvar ZipFS_2 = __webpack_require__(8);\n\nexports.ZipFS = ZipFS_2.ZipFS;\n\nvar ZipOpenFS_1 = __webpack_require__(23);\n\nexports.ZipOpenFS = ZipOpenFS_1.ZipOpenFS;\n\nfunction getTempName(prefix) {\n  const tmpdir = path_1.npath.toPortablePath(os_1.default.tmpdir());\n  const hash = Math.ceil(Math.random() * 0x100000000).toString(16).padStart(8, `0`);\n  return path_1.ppath.join(tmpdir, `${prefix}${hash}`);\n}\n\nfunction patchFs(patchedFs, fakeFs) {\n  const SYNC_IMPLEMENTATIONS = new Set([`accessSync`, `appendFileSync`, `createReadStream`, `chmodSync`, `closeSync`, `copyFileSync`, `lstatSync`, `mkdirSync`, `openSync`, `readSync`, `readlinkSync`, `readFileSync`, `readdirSync`, `readlinkSync`, `realpathSync`, `renameSync`, `rmdirSync`, `statSync`, `symlinkSync`, `unlinkSync`, `utimesSync`, `watch`, `writeFileSync`, `writeSync`]);\n  const ASYNC_IMPLEMENTATIONS = new Set([`accessPromise`, `appendFilePromise`, `chmodPromise`, `closePromise`, `copyFilePromise`, `lstatPromise`, `mkdirPromise`, `openPromise`, `readdirPromise`, `realpathPromise`, `readFilePromise`, `readdirPromise`, `readlinkPromise`, `renamePromise`, `rmdirPromise`, `statPromise`, `symlinkPromise`, `unlinkPromise`, `utimesPromise`, `writeFilePromise`, `writeSync`]);\n\n  const setupFn = (target, name, replacement) => {\n    const orig = target[name];\n    if (typeof orig === `undefined`) return;\n    target[name] = replacement;\n\n    if (typeof orig[util_1.promisify.custom] !== `undefined`) {\n      replacement[util_1.promisify.custom] = orig[util_1.promisify.custom];\n    }\n  };\n\n  setupFn(patchedFs, `existsSync`, p => {\n    try {\n      return fakeFs.existsSync(p);\n    } catch (error) {\n      return false;\n    }\n  });\n  setupFn(patchedFs, `exists`, (p, ...args) => {\n    const hasCallback = typeof args[args.length - 1] === `function`;\n    const callback = hasCallback ? args.pop() : () => {};\n    process.nextTick(() => {\n      fakeFs.existsPromise(p).then(exists => {\n        callback(exists);\n      }, () => {\n        callback(false);\n      });\n    });\n  });\n  setupFn(patchedFs, `read`, (p, buffer, ...args) => {\n    const hasCallback = typeof args[args.length - 1] === `function`;\n    const callback = hasCallback ? args.pop() : () => {};\n    process.nextTick(() => {\n      fakeFs.readPromise(p, buffer, ...args).then(bytesRead => {\n        callback(null, bytesRead, buffer);\n      }, error => {\n        callback(error);\n      });\n    });\n  });\n\n  for (const fnName of ASYNC_IMPLEMENTATIONS) {\n    const fakeImpl = fakeFs[fnName].bind(fakeFs);\n    const origName = fnName.replace(/Promise$/, ``);\n    setupFn(patchedFs, origName, (...args) => {\n      const hasCallback = typeof args[args.length - 1] === `function`;\n      const callback = hasCallback ? args.pop() : () => {};\n      process.nextTick(() => {\n        fakeImpl(...args).then(result => {\n          callback(null, result);\n        }, error => {\n          callback(error);\n        });\n      });\n    });\n  }\n\n  for (const fnName of SYNC_IMPLEMENTATIONS) {\n    const fakeImpl = fakeFs[fnName].bind(fakeFs);\n    const origName = fnName;\n    setupFn(patchedFs, origName, fakeImpl);\n  }\n\n  patchedFs.realpathSync.native = patchedFs.realpathSync;\n  patchedFs.realpath.native = patchedFs.realpath;\n}\n\nexports.patchFs = patchFs;\n\nfunction extendFs(realFs, fakeFs) {\n  const patchedFs = Object.create(realFs);\n  patchFs(patchedFs, fakeFs);\n  return patchedFs;\n}\n\nexports.extendFs = extendFs;\nconst tmpdirs = new Set();\nlet cleanExitRegistered = false;\n\nfunction registerCleanExit() {\n  if (!cleanExitRegistered) cleanExitRegistered = true;else return;\n\n  const cleanExit = () => {\n    process.off(`exit`, cleanExit);\n\n    for (const p of tmpdirs) {\n      tmpdirs.delete(p);\n\n      try {\n        exports.xfs.removeSync(p);\n      } catch (_a) {// Too bad if there's an error\n      }\n    }\n  };\n\n  process.on(`exit`, cleanExit);\n}\n\nexports.xfs = Object.assign(new NodeFS_1.NodeFS(), {\n  detachTemp(p) {\n    tmpdirs.delete(p);\n  },\n\n  mktempSync(cb) {\n    registerCleanExit();\n\n    while (true) {\n      const p = getTempName(`xfs-`);\n\n      try {\n        this.mkdirSync(p);\n      } catch (error) {\n        if (error.code === `EEXIST`) {\n          continue;\n        } else {\n          throw error;\n        }\n      }\n\n      const realP = this.realpathSync(p);\n      tmpdirs.add(realP);\n\n      if (typeof cb !== `undefined`) {\n        try {\n          return cb(realP);\n        } finally {\n          if (tmpdirs.has(realP)) {\n            tmpdirs.delete(realP);\n\n            try {\n              this.removeSync(realP);\n            } catch (_a) {// Too bad if there's an error\n            }\n          }\n        }\n      } else {\n        return p;\n      }\n    }\n  },\n\n  async mktempPromise(cb) {\n    registerCleanExit();\n\n    while (true) {\n      const p = getTempName(`xfs-`);\n\n      try {\n        await this.mkdirPromise(p);\n      } catch (error) {\n        if (error.code === `EEXIST`) {\n          continue;\n        } else {\n          throw error;\n        }\n      }\n\n      const realP = await this.realpathPromise(p);\n      tmpdirs.add(realP);\n\n      if (typeof cb !== `undefined`) {\n        try {\n          return await cb(realP);\n        } finally {\n          if (tmpdirs.has(realP)) {\n            tmpdirs.delete(realP);\n\n            try {\n              await this.removePromise(realP);\n            } catch (_a) {// Too bad if there's an error\n            }\n          }\n        }\n      } else {\n        return realP;\n      }\n    }\n  }\n\n});\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"module\");\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"path\");\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs_1 = __webpack_require__(2);\n\nconst stream_1 = __webpack_require__(14);\n\nconst util_1 = __webpack_require__(10);\n\nconst FakeFS_1 = __webpack_require__(3);\n\nconst NodeFS_1 = __webpack_require__(1);\n\nconst errors = __importStar(__webpack_require__(15));\n\nconst path_1 = __webpack_require__(0);\n\nexports.DEFAULT_COMPRESSION_LEVEL = `mixed`;\nconst S_IFMT = 0o170000;\nconst S_IFDIR = 0o040000;\nconst S_IFREG = 0o100000;\nconst S_IFLNK = 0o120000;\n\nclass DirEntry {\n  constructor() {\n    this.name = ``;\n    this.mode = 0;\n  }\n\n  isBlockDevice() {\n    return false;\n  }\n\n  isCharacterDevice() {\n    return false;\n  }\n\n  isDirectory() {\n    return (this.mode & S_IFMT) === S_IFDIR;\n  }\n\n  isFIFO() {\n    return false;\n  }\n\n  isFile() {\n    return (this.mode & S_IFMT) === S_IFREG;\n  }\n\n  isSocket() {\n    return false;\n  }\n\n  isSymbolicLink() {\n    return (this.mode & S_IFMT) === S_IFLNK;\n  }\n\n}\n\nclass StatEntry {\n  constructor() {\n    this.dev = 0;\n    this.ino = 0;\n    this.mode = 0;\n    this.nlink = 1;\n    this.rdev = 0;\n    this.blocks = 1;\n  }\n\n  isBlockDevice() {\n    return false;\n  }\n\n  isCharacterDevice() {\n    return false;\n  }\n\n  isDirectory() {\n    return (this.mode & S_IFMT) === S_IFDIR;\n  }\n\n  isFIFO() {\n    return false;\n  }\n\n  isFile() {\n    return (this.mode & S_IFMT) === S_IFREG;\n  }\n\n  isSocket() {\n    return false;\n  }\n\n  isSymbolicLink() {\n    return (this.mode & S_IFMT) === S_IFLNK;\n  }\n\n}\n\nfunction makeDefaultStats() {\n  return Object.assign(new StatEntry(), {\n    uid: 0,\n    gid: 0,\n    size: 0,\n    blksize: 0,\n    atimeMs: 0,\n    mtimeMs: 0,\n    ctimeMs: 0,\n    birthtimeMs: 0,\n    atime: new Date(0),\n    mtime: new Date(0),\n    ctime: new Date(0),\n    birthtime: new Date(0),\n    mode: S_IFREG | 0o644\n  });\n}\n\nfunction toUnixTimestamp(time) {\n  if (typeof time === `string` && String(+time) === time) return +time; // @ts-ignore\n\n  if (Number.isFinite(time)) {\n    if (time < 0) {\n      return Date.now() / 1000;\n    } else {\n      return time;\n    }\n  } // convert to 123.456 UNIX timestamp\n\n\n  if (util_1.isDate(time)) return time.getTime() / 1000;\n  throw new Error(`Invalid time`);\n}\n\nclass ZipFS extends FakeFS_1.BasePortableFakeFS {\n  constructor(source, opts) {\n    super();\n    this.listings = new Map();\n    this.entries = new Map();\n    this.fds = new Map();\n    this.nextFd = 0;\n    this.ready = false;\n    this.readOnly = false;\n    this.libzip = opts.libzip;\n    const pathOptions = opts;\n    this.level = typeof pathOptions.level !== `undefined` ? pathOptions.level : exports.DEFAULT_COMPRESSION_LEVEL;\n\n    if (typeof source === `string`) {\n      const {\n        baseFs = new NodeFS_1.NodeFS()\n      } = pathOptions;\n      this.baseFs = baseFs;\n      this.path = source;\n    } else {\n      this.path = null;\n      this.baseFs = null;\n    }\n\n    if (opts.stats) {\n      this.stats = opts.stats;\n    } else {\n      if (typeof source === `string`) {\n        try {\n          this.stats = this.baseFs.statSync(source);\n        } catch (error) {\n          if (error.code === `ENOENT` && pathOptions.create) {\n            this.stats = makeDefaultStats();\n          } else {\n            throw error;\n          }\n        }\n      } else {\n        this.stats = makeDefaultStats();\n      }\n    }\n\n    const errPtr = this.libzip.malloc(4);\n\n    try {\n      let flags = 0;\n      if (typeof source === `string` && pathOptions.create) flags |= this.libzip.ZIP_CREATE | this.libzip.ZIP_TRUNCATE;\n\n      if (opts.readOnly) {\n        flags |= this.libzip.ZIP_RDONLY;\n        this.readOnly = true;\n      }\n\n      if (typeof source === `string`) {\n        this.zip = this.libzip.open(path_1.npath.fromPortablePath(source), flags, errPtr);\n      } else {\n        const lzSource = this.allocateUnattachedSource(source);\n\n        try {\n          this.zip = this.libzip.openFromSource(lzSource, flags, errPtr);\n        } catch (error) {\n          this.libzip.source.free(lzSource);\n          throw error;\n        }\n      }\n\n      if (this.zip === 0) {\n        const error = this.libzip.struct.errorS();\n        this.libzip.error.initWithCode(error, this.libzip.getValue(errPtr, `i32`));\n        throw new Error(this.libzip.error.strerror(error));\n      }\n    } finally {\n      this.libzip.free(errPtr);\n    }\n\n    this.listings.set(path_1.PortablePath.root, new Set());\n    const entryCount = this.libzip.getNumEntries(this.zip, 0);\n\n    for (let t = 0; t < entryCount; ++t) {\n      const raw = this.libzip.getName(this.zip, t, 0);\n      if (path_1.ppath.isAbsolute(raw)) continue;\n      const p = path_1.ppath.resolve(path_1.PortablePath.root, raw);\n      this.registerEntry(p, t); // If the raw path is a directory, register it\n      // to prevent empty folder being skipped\n\n      if (raw.endsWith(`/`)) {\n        this.registerListing(p);\n      }\n    }\n\n    this.ready = true;\n  }\n\n  getExtractHint(hints) {\n    for (const fileName of this.entries.keys()) {\n      const ext = this.pathUtils.extname(fileName);\n\n      if (hints.relevantExtensions.has(ext)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getAllFiles() {\n    return Array.from(this.entries.keys());\n  }\n\n  getRealPath() {\n    if (!this.path) throw new Error(`ZipFS don't have real paths when loaded from a buffer`);\n    return this.path;\n  }\n\n  saveAndClose() {\n    if (!this.path || !this.baseFs) throw new Error(`ZipFS cannot be saved and must be discarded when loaded from a buffer`);\n    if (!this.ready) throw errors.EBUSY(`archive closed, close`);\n    if (this.readOnly) return this.discardAndClose();\n    const previousMod = this.baseFs.existsSync(this.path) ? this.baseFs.statSync(this.path).mode & 0o777 : null;\n    const rc = this.libzip.close(this.zip);\n    if (rc === -1) throw new Error(this.libzip.error.strerror(this.libzip.getError(this.zip))); // this.libzip overrides the chmod when writing the archive, which is a weird\n    // behavior I don't totally understand (plus the umask seems bogus in some\n    // weird cases - maybe related to emscripten?)\n    //\n    // See also https://github.com/nih-at/libzip/issues/77\n\n    if (previousMod === null) this.baseFs.chmodSync(this.path, this.stats.mode);else if (previousMod !== (this.baseFs.statSync(this.path).mode & 0o777)) this.baseFs.chmodSync(this.path, previousMod);\n    this.ready = false;\n  }\n\n  discardAndClose() {\n    if (!this.ready) throw errors.EBUSY(`archive closed, close`);\n    this.libzip.discard(this.zip);\n    this.ready = false;\n  }\n\n  async openPromise(p, flags, mode) {\n    return this.openSync(p, flags, mode);\n  }\n\n  openSync(p, flags, mode) {\n    const fd = this.nextFd++;\n    this.fds.set(fd, {\n      cursor: 0,\n      p\n    });\n    return fd;\n  }\n\n  async readPromise(fd, buffer, offset, length, position) {\n    return this.readSync(fd, buffer, offset, length, position);\n  }\n\n  readSync(fd, buffer, offset = 0, length = 0, position = -1) {\n    const entry = this.fds.get(fd);\n    if (typeof entry === `undefined`) throw errors.EBADF(`read`);\n    let realPosition;\n    if (position === -1 || position === null) realPosition = entry.cursor;else realPosition = position;\n    const source = this.readFileSync(entry.p);\n    source.copy(buffer, offset, realPosition, realPosition + length);\n    const bytesRead = Math.max(0, Math.min(source.length - realPosition, length));\n    if (position === -1) entry.cursor += bytesRead;\n    return bytesRead;\n  }\n\n  async writePromise(fd, buffer, offset, length, position) {\n    if (typeof buffer === `string`) {\n      return this.writeSync(fd, buffer, position);\n    } else {\n      return this.writeSync(fd, buffer, offset, length, position);\n    }\n  }\n\n  writeSync(fd, buffer, offset, length, position) {\n    const entry = this.fds.get(fd);\n    if (typeof entry === `undefined`) throw errors.EBADF(`read`);\n    throw new Error(`Unimplemented`);\n  }\n\n  async closePromise(fd) {\n    return this.closeSync(fd);\n  }\n\n  closeSync(fd) {\n    const entry = this.fds.get(fd);\n    if (typeof entry === `undefined`) throw errors.EBADF(`read`);\n    this.fds.delete(fd);\n  }\n\n  createReadStream(p, {\n    encoding\n  } = {}) {\n    if (p === null) throw new Error(`Unimplemented`);\n    const stream = Object.assign(new stream_1.PassThrough(), {\n      bytesRead: 0,\n      path: p,\n      close: () => {\n        clearImmediate(immediate);\n      }\n    });\n    const immediate = setImmediate(() => {\n      try {\n        const data = this.readFileSync(p, encoding);\n        stream.bytesRead = data.length;\n        stream.write(data);\n        stream.end();\n      } catch (error) {\n        stream.emit(`error`, error);\n        stream.end();\n      }\n    });\n    return stream;\n  }\n\n  createWriteStream(p, {\n    encoding\n  } = {}) {\n    if (this.readOnly) throw errors.EROFS(`open '${p}'`);\n    if (p === null) throw new Error(`Unimplemented`);\n    const stream = Object.assign(new stream_1.PassThrough(), {\n      bytesWritten: 0,\n      path: p,\n      close: () => {\n        stream.end();\n      }\n    });\n    const chunks = [];\n    stream.on(`data`, chunk => {\n      const chunkBuffer = Buffer.from(chunk);\n      stream.bytesWritten += chunkBuffer.length;\n      chunks.push(chunkBuffer);\n    });\n    stream.on(`end`, () => {\n      this.writeFileSync(p, Buffer.concat(chunks), encoding);\n    });\n    return stream;\n  }\n\n  async realpathPromise(p) {\n    return this.realpathSync(p);\n  }\n\n  realpathSync(p) {\n    const resolvedP = this.resolveFilename(`lstat '${p}'`, p);\n    if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP)) throw errors.ENOENT(`lstat '${p}'`);\n    return resolvedP;\n  }\n\n  async existsPromise(p) {\n    return this.existsSync(p);\n  }\n\n  existsSync(p) {\n    let resolvedP;\n\n    try {\n      resolvedP = this.resolveFilename(`stat '${p}'`, p);\n    } catch (error) {\n      return false;\n    }\n\n    return this.entries.has(resolvedP) || this.listings.has(resolvedP);\n  }\n\n  async accessPromise(p, mode) {\n    return this.accessSync(p, mode);\n  }\n\n  accessSync(p, mode = fs_1.constants.F_OK) {\n    const resolvedP = this.resolveFilename(`access '${p}'`, p);\n    if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP)) throw errors.ENOENT(`access '${p}'`);\n\n    if (this.readOnly && mode & fs_1.constants.W_OK) {\n      throw errors.EROFS(`access '${p}'`);\n    }\n  }\n\n  async statPromise(p) {\n    return this.statSync(p);\n  }\n\n  statSync(p) {\n    const resolvedP = this.resolveFilename(`stat '${p}'`, p);\n    if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP)) throw errors.ENOENT(`stat '${p}'`);\n    if (p[p.length - 1] === `/` && !this.listings.has(resolvedP)) throw errors.ENOTDIR(`stat '${p}'`);\n    return this.statImpl(`stat '${p}'`, resolvedP);\n  }\n\n  async lstatPromise(p) {\n    return this.lstatSync(p);\n  }\n\n  lstatSync(p) {\n    const resolvedP = this.resolveFilename(`lstat '${p}'`, p, false);\n    if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP)) throw errors.ENOENT(`lstat '${p}'`);\n    if (p[p.length - 1] === `/` && !this.listings.has(resolvedP)) throw errors.ENOTDIR(`lstat '${p}'`);\n    return this.statImpl(`lstat '${p}'`, resolvedP);\n  }\n\n  statImpl(reason, p) {\n    const entry = this.entries.get(p); // File, or explicit directory\n\n    if (typeof entry !== `undefined`) {\n      const stat = this.libzip.struct.statS();\n      const rc = this.libzip.statIndex(this.zip, entry, 0, 0, stat);\n      if (rc === -1) throw new Error(this.libzip.error.strerror(this.libzip.getError(this.zip)));\n      const uid = this.stats.uid;\n      const gid = this.stats.gid;\n      const size = this.libzip.struct.statSize(stat) >>> 0;\n      const blksize = 512;\n      const blocks = Math.ceil(size / blksize);\n      const mtimeMs = (this.libzip.struct.statMtime(stat) >>> 0) * 1000;\n      const atimeMs = mtimeMs;\n      const birthtimeMs = mtimeMs;\n      const ctimeMs = mtimeMs;\n      const atime = new Date(atimeMs);\n      const birthtime = new Date(birthtimeMs);\n      const ctime = new Date(ctimeMs);\n      const mtime = new Date(mtimeMs);\n      const type = this.listings.has(p) ? S_IFDIR : this.isSymbolicLink(entry) ? S_IFLNK : S_IFREG;\n      const defaultMode = type === S_IFDIR ? 0o755 : 0o644;\n      const mode = type | this.getUnixMode(entry, defaultMode) & 0o777;\n      return Object.assign(new StatEntry(), {\n        uid,\n        gid,\n        size,\n        blksize,\n        blocks,\n        atime,\n        birthtime,\n        ctime,\n        mtime,\n        atimeMs,\n        birthtimeMs,\n        ctimeMs,\n        mtimeMs,\n        mode\n      });\n    } // Implicit directory\n\n\n    if (this.listings.has(p)) {\n      const uid = this.stats.uid;\n      const gid = this.stats.gid;\n      const size = 0;\n      const blksize = 512;\n      const blocks = 0;\n      const atimeMs = this.stats.mtimeMs;\n      const birthtimeMs = this.stats.mtimeMs;\n      const ctimeMs = this.stats.mtimeMs;\n      const mtimeMs = this.stats.mtimeMs;\n      const atime = new Date(atimeMs);\n      const birthtime = new Date(birthtimeMs);\n      const ctime = new Date(ctimeMs);\n      const mtime = new Date(mtimeMs);\n      const mode = S_IFDIR | 0o755;\n      return Object.assign(new StatEntry(), {\n        uid,\n        gid,\n        size,\n        blksize,\n        blocks,\n        atime,\n        birthtime,\n        ctime,\n        mtime,\n        atimeMs,\n        birthtimeMs,\n        ctimeMs,\n        mtimeMs,\n        mode\n      });\n    }\n\n    throw new Error(`Unreachable`);\n  }\n\n  getUnixMode(index, defaultMode) {\n    const rc = this.libzip.file.getExternalAttributes(this.zip, index, 0, 0, this.libzip.uint08S, this.libzip.uint32S);\n    if (rc === -1) throw new Error(this.libzip.error.strerror(this.libzip.getError(this.zip)));\n    const opsys = this.libzip.getValue(this.libzip.uint08S, `i8`) >>> 0;\n    if (opsys !== this.libzip.ZIP_OPSYS_UNIX) return defaultMode;\n    return this.libzip.getValue(this.libzip.uint32S, `i32`) >>> 16;\n  }\n\n  registerListing(p) {\n    let listing = this.listings.get(p);\n    if (listing) return listing;\n    const parentListing = this.registerListing(path_1.ppath.dirname(p));\n    listing = new Set();\n    parentListing.add(path_1.ppath.basename(p));\n    this.listings.set(p, listing);\n    return listing;\n  }\n\n  registerEntry(p, index) {\n    const parentListing = this.registerListing(path_1.ppath.dirname(p));\n    parentListing.add(path_1.ppath.basename(p));\n    this.entries.set(p, index);\n  }\n\n  resolveFilename(reason, p, resolveLastComponent = true) {\n    if (!this.ready) throw errors.EBUSY(`archive closed, ${reason}`);\n    let resolvedP = path_1.ppath.resolve(path_1.PortablePath.root, p);\n    if (resolvedP === `/`) return path_1.PortablePath.root;\n\n    while (true) {\n      const parentP = this.resolveFilename(reason, path_1.ppath.dirname(resolvedP), true);\n      const isDir = this.listings.has(parentP);\n      const doesExist = this.entries.has(parentP);\n      if (!isDir && !doesExist) throw errors.ENOENT(reason);\n      if (!isDir) throw errors.ENOTDIR(reason);\n      resolvedP = path_1.ppath.resolve(parentP, path_1.ppath.basename(resolvedP));\n      if (!resolveLastComponent) break;\n      const index = this.libzip.name.locate(this.zip, resolvedP.slice(1));\n      if (index === -1) break;\n\n      if (this.isSymbolicLink(index)) {\n        const target = this.getFileSource(index).toString();\n        resolvedP = path_1.ppath.resolve(path_1.ppath.dirname(resolvedP), target);\n      } else {\n        break;\n      }\n    }\n\n    return resolvedP;\n  }\n\n  allocateBuffer(content) {\n    if (!Buffer.isBuffer(content)) content = Buffer.from(content);\n    const buffer = this.libzip.malloc(content.byteLength);\n    if (!buffer) throw new Error(`Couldn't allocate enough memory`); // Copy the file into the Emscripten heap\n\n    const heap = new Uint8Array(this.libzip.HEAPU8.buffer, buffer, content.byteLength);\n    heap.set(content);\n    return {\n      buffer,\n      byteLength: content.byteLength\n    };\n  }\n\n  allocateUnattachedSource(content) {\n    const error = this.libzip.struct.errorS();\n    const {\n      buffer,\n      byteLength\n    } = this.allocateBuffer(content);\n    const source = this.libzip.source.fromUnattachedBuffer(buffer, byteLength, 0, true, error);\n\n    if (source === 0) {\n      this.libzip.free(error);\n      throw new Error(this.libzip.error.strerror(error));\n    }\n\n    return source;\n  }\n\n  allocateSource(content) {\n    const {\n      buffer,\n      byteLength\n    } = this.allocateBuffer(content);\n    const source = this.libzip.source.fromBuffer(this.zip, buffer, byteLength, 0, true);\n\n    if (source === 0) {\n      this.libzip.free(buffer);\n      throw new Error(this.libzip.error.strerror(this.libzip.getError(this.zip)));\n    }\n\n    return source;\n  }\n\n  setFileSource(p, content) {\n    const target = path_1.ppath.relative(path_1.PortablePath.root, p);\n    const lzSource = this.allocateSource(content);\n\n    try {\n      const newIndex = this.libzip.file.add(this.zip, target, lzSource, this.libzip.ZIP_FL_OVERWRITE);\n\n      if (this.level !== `mixed`) {\n        // Use store for level 0, and deflate for 1..9\n        let method;\n        if (this.level === 0) method = this.libzip.ZIP_CM_STORE;else method = this.libzip.ZIP_CM_DEFLATE;\n        const rc = this.libzip.file.setCompression(this.zip, newIndex, 0, method, this.level);\n\n        if (rc === -1) {\n          throw new Error(this.libzip.error.strerror(this.libzip.getError(this.zip)));\n        }\n      }\n\n      return newIndex;\n    } catch (error) {\n      this.libzip.source.free(lzSource);\n      throw error;\n    }\n  }\n\n  isSymbolicLink(index) {\n    const attrs = this.libzip.file.getExternalAttributes(this.zip, index, 0, 0, this.libzip.uint08S, this.libzip.uint32S);\n    if (attrs === -1) throw new Error(this.libzip.error.strerror(this.libzip.getError(this.zip)));\n    const opsys = this.libzip.getValue(this.libzip.uint08S, `i8`) >>> 0;\n    if (opsys !== this.libzip.ZIP_OPSYS_UNIX) return false;\n    const attributes = this.libzip.getValue(this.libzip.uint32S, `i32`) >>> 16;\n    return (attributes & S_IFMT) === S_IFLNK;\n  }\n\n  getFileSource(index) {\n    const stat = this.libzip.struct.statS();\n    const rc = this.libzip.statIndex(this.zip, index, 0, 0, stat);\n    if (rc === -1) throw new Error(this.libzip.error.strerror(this.libzip.getError(this.zip)));\n    const size = this.libzip.struct.statSize(stat);\n    const buffer = this.libzip.malloc(size);\n\n    try {\n      const file = this.libzip.fopenIndex(this.zip, index, 0, 0);\n      if (file === 0) throw new Error(this.libzip.error.strerror(this.libzip.getError(this.zip)));\n\n      try {\n        const rc = this.libzip.fread(file, buffer, size, 0);\n        if (rc === -1) throw new Error(this.libzip.error.strerror(this.libzip.file.getError(file)));else if (rc < size) throw new Error(`Incomplete read`);else if (rc > size) throw new Error(`Overread`);\n        const memory = this.libzip.HEAPU8.subarray(buffer, buffer + size);\n        const data = Buffer.from(memory);\n        return data;\n      } finally {\n        this.libzip.fclose(file);\n      }\n    } finally {\n      this.libzip.free(buffer);\n    }\n  }\n\n  async chmodPromise(p, mask) {\n    return this.chmodSync(p, mask);\n  }\n\n  chmodSync(p, mask) {\n    if (this.readOnly) throw errors.EROFS(`chmod '${p}'`); // We don't allow to make the extracted entries group-writable\n\n    mask &= 0o755;\n    const resolvedP = this.resolveFilename(`chmod '${p}'`, p, false);\n    const entry = this.entries.get(resolvedP);\n    if (typeof entry === `undefined`) throw new Error(`Assertion failed: The entry should have been registered (${resolvedP})`);\n    const oldMod = this.getUnixMode(entry, S_IFREG | 0o000);\n    const newMod = oldMod & ~0o777 | mask;\n    const rc = this.libzip.file.setExternalAttributes(this.zip, entry, 0, 0, this.libzip.ZIP_OPSYS_UNIX, newMod << 16);\n\n    if (rc === -1) {\n      throw new Error(this.libzip.error.strerror(this.libzip.getError(this.zip)));\n    }\n  }\n\n  async renamePromise(oldP, newP) {\n    return this.renameSync(oldP, newP);\n  }\n\n  renameSync(oldP, newP) {\n    throw new Error(`Unimplemented`);\n  }\n\n  async copyFilePromise(sourceP, destP, flags) {\n    return this.copyFileSync(sourceP, destP, flags);\n  }\n\n  copyFileSync(sourceP, destP, flags = 0) {\n    if (this.readOnly) throw errors.EROFS(`copyfile '${sourceP} -> '${destP}'`);\n    if ((flags & fs_1.constants.COPYFILE_FICLONE_FORCE) !== 0) throw errors.ENOSYS(`unsupported clone operation`, `copyfile '${sourceP}' -> ${destP}'`);\n    const resolvedSourceP = this.resolveFilename(`copyfile '${sourceP} -> ${destP}'`, sourceP);\n    const indexSource = this.entries.get(resolvedSourceP);\n    if (typeof indexSource === `undefined`) throw errors.EINVAL(`copyfile '${sourceP}' -> '${destP}'`);\n    const resolvedDestP = this.resolveFilename(`copyfile '${sourceP}' -> ${destP}'`, destP);\n    const indexDest = this.entries.get(resolvedDestP);\n    if ((flags & (fs_1.constants.COPYFILE_EXCL | fs_1.constants.COPYFILE_FICLONE_FORCE)) !== 0 && typeof indexDest !== `undefined`) throw errors.EEXIST(`copyfile '${sourceP}' -> '${destP}'`);\n    const source = this.getFileSource(indexSource);\n    const newIndex = this.setFileSource(resolvedDestP, source);\n\n    if (newIndex !== indexDest) {\n      this.registerEntry(resolvedDestP, newIndex);\n    }\n  }\n\n  async appendFilePromise(p, content, opts) {\n    return this.appendFileSync(p, content, opts);\n  }\n\n  appendFileSync(p, content, opts = {}) {\n    if (this.readOnly) throw errors.EROFS(`open '${p}'`);\n    if (typeof opts === `undefined`) opts = {\n      flag: `a`\n    };else if (typeof opts === `string`) opts = {\n      flag: `a`,\n      encoding: opts\n    };else if (typeof opts.flag === `undefined`) opts = Object.assign({\n      flag: `a`\n    }, opts);\n    return this.writeFileSync(p, content, opts);\n  }\n\n  async writeFilePromise(p, content, opts) {\n    return this.writeFileSync(p, content, opts);\n  }\n\n  writeFileSync(p, content, opts) {\n    if (typeof p !== `string`) throw errors.EBADF(`read`);\n    if (this.readOnly) throw errors.EROFS(`open '${p}'`);\n    const resolvedP = this.resolveFilename(`open '${p}'`, p);\n    if (this.listings.has(resolvedP)) throw errors.EISDIR(`open '${p}'`);\n    const index = this.entries.get(resolvedP);\n    if (index !== undefined && typeof opts === `object` && opts.flag && opts.flag.includes(`a`)) content = Buffer.concat([this.getFileSource(index), Buffer.from(content)]);\n    let encoding = null;\n    if (typeof opts === `string`) encoding = opts;else if (typeof opts === `object` && opts.encoding) encoding = opts.encoding;\n    if (encoding !== null) content = content.toString(encoding);\n    const newIndex = this.setFileSource(resolvedP, content);\n\n    if (newIndex !== index) {\n      this.registerEntry(resolvedP, newIndex);\n    }\n  }\n\n  async unlinkPromise(p) {\n    return this.unlinkSync(p);\n  }\n\n  unlinkSync(p) {\n    throw new Error(`Unimplemented`);\n  }\n\n  async utimesPromise(p, atime, mtime) {\n    return this.utimesSync(p, atime, mtime);\n  }\n\n  utimesSync(p, atime, mtime) {\n    if (this.readOnly) throw errors.EROFS(`utimes '${p}'`);\n    const resolvedP = this.resolveFilename(`utimes '${p}'`, p);\n    this.utimesImpl(resolvedP, mtime);\n  }\n\n  async lutimesPromise(p, atime, mtime) {\n    return this.lutimesSync(p, atime, mtime);\n  }\n\n  lutimesSync(p, atime, mtime) {\n    if (this.readOnly) throw errors.EROFS(`lutimes '${p}'`);\n    const resolvedP = this.resolveFilename(`utimes '${p}'`, p, false);\n    this.utimesImpl(resolvedP, mtime);\n  }\n\n  utimesImpl(resolvedP, mtime) {\n    if (this.listings.has(resolvedP)) if (!this.entries.has(resolvedP)) this.hydrateDirectory(resolvedP);\n    const entry = this.entries.get(resolvedP);\n    if (entry === undefined) throw new Error(`Unreachable`);\n    const rc = this.libzip.file.setMtime(this.zip, entry, 0, toUnixTimestamp(mtime), 0);\n\n    if (rc === -1) {\n      throw new Error(this.libzip.error.strerror(this.libzip.getError(this.zip)));\n    }\n  }\n\n  async mkdirPromise(p, opts) {\n    return this.mkdirSync(p, opts);\n  }\n\n  mkdirSync(p, {\n    mode = 0o755,\n    recursive = false\n  } = {}) {\n    if (recursive) return this.mkdirpSync(p, {\n      chmod: mode\n    });\n    if (this.readOnly) throw errors.EROFS(`mkdir '${p}'`);\n    const resolvedP = this.resolveFilename(`mkdir '${p}'`, p);\n    if (this.entries.has(resolvedP) || this.listings.has(resolvedP)) throw errors.EEXIST(`mkdir '${p}'`);\n    this.hydrateDirectory(resolvedP);\n    this.chmodSync(resolvedP, mode);\n  }\n\n  async rmdirPromise(p) {\n    return this.rmdirSync(p);\n  }\n\n  rmdirSync(p) {\n    throw new Error(`Unimplemented`);\n  }\n\n  hydrateDirectory(resolvedP) {\n    const index = this.libzip.dir.add(this.zip, path_1.ppath.relative(path_1.PortablePath.root, resolvedP));\n    if (index === -1) throw new Error(this.libzip.error.strerror(this.libzip.getError(this.zip)));\n    this.registerListing(resolvedP);\n    this.registerEntry(resolvedP, index);\n    return index;\n  }\n\n  async symlinkPromise(target, p) {\n    return this.symlinkSync(target, p);\n  }\n\n  symlinkSync(target, p) {\n    if (this.readOnly) throw errors.EROFS(`symlink '${target}' -> '${p}'`);\n    const resolvedP = this.resolveFilename(`symlink '${target}' -> '${p}'`, p);\n    if (this.listings.has(resolvedP)) throw errors.EISDIR(`symlink '${target}' -> '${p}'`);\n    if (this.entries.has(resolvedP)) throw errors.EEXIST(`symlink '${target}' -> '${p}'`);\n    const index = this.setFileSource(resolvedP, target);\n    this.registerEntry(resolvedP, index);\n    const rc = this.libzip.file.setExternalAttributes(this.zip, index, 0, 0, this.libzip.ZIP_OPSYS_UNIX, (0o120000 | 0o777) << 16);\n\n    if (rc === -1) {\n      throw new Error(this.libzip.error.strerror(this.libzip.getError(this.zip)));\n    }\n  }\n\n  async readFilePromise(p, encoding) {\n    // This weird switch is required to tell TypeScript that the signatures are proper (otherwise it thinks that only the generic one is covered)\n    switch (encoding) {\n      case `utf8`:\n        return this.readFileSync(p, encoding);\n\n      default:\n        return this.readFileSync(p, encoding);\n    }\n  }\n\n  readFileSync(p, encoding) {\n    if (typeof p !== `string`) throw errors.EBADF(`read`); // This is messed up regarding the TS signatures\n\n    if (typeof encoding === `object`) // @ts-ignore\n      encoding = encoding ? encoding.encoding : undefined;\n    const resolvedP = this.resolveFilename(`open '${p}'`, p);\n    if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP)) throw errors.ENOENT(`open '${p}'`); // Ensures that the last component is a directory, if the user said so (even if it is we'll throw right after with EISDIR anyway)\n\n    if (p[p.length - 1] === `/` && !this.listings.has(resolvedP)) throw errors.ENOTDIR(`open '${p}'`);\n    if (this.listings.has(resolvedP)) throw errors.EISDIR(`read`);\n    const entry = this.entries.get(resolvedP);\n    if (entry === undefined) throw new Error(`Unreachable`);\n    const data = this.getFileSource(entry);\n    return encoding ? data.toString(encoding) : data;\n  }\n\n  async readdirPromise(p, {\n    withFileTypes\n  } = {}) {\n    return this.readdirSync(p, {\n      withFileTypes: withFileTypes\n    });\n  }\n\n  readdirSync(p, {\n    withFileTypes\n  } = {}) {\n    const resolvedP = this.resolveFilename(`scandir '${p}'`, p);\n    if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP)) throw errors.ENOENT(`scandir '${p}'`);\n    const directoryListing = this.listings.get(resolvedP);\n    if (!directoryListing) throw errors.ENOTDIR(`scandir '${p}'`);\n    const entries = [...directoryListing];\n    if (!withFileTypes) return entries;\n    return entries.map(name => {\n      return Object.assign(this.statImpl(`lstat`, path_1.ppath.join(p, name)), {\n        name\n      });\n    });\n  }\n\n  async readlinkPromise(p) {\n    return this.readlinkSync(p);\n  }\n\n  readlinkSync(p) {\n    const resolvedP = this.resolveFilename(`readlink '${p}'`, p, false);\n    if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP)) throw errors.ENOENT(`readlink '${p}'`); // Ensure that the last component is a directory (if it is we'll throw right after with EISDIR anyway)\n\n    if (p[p.length - 1] === `/` && !this.listings.has(resolvedP)) throw errors.ENOTDIR(`open '${p}'`);\n    if (this.listings.has(resolvedP)) throw errors.EINVAL(`readlink '${p}'`);\n    const entry = this.entries.get(resolvedP);\n    if (entry === undefined) throw new Error(`Unreachable`);\n    const rc = this.libzip.file.getExternalAttributes(this.zip, entry, 0, 0, this.libzip.uint08S, this.libzip.uint32S);\n    if (rc === -1) throw new Error(this.libzip.error.strerror(this.libzip.getError(this.zip)));\n    const opsys = this.libzip.getValue(this.libzip.uint08S, `i8`) >>> 0;\n    if (opsys !== this.libzip.ZIP_OPSYS_UNIX) throw errors.EINVAL(`readlink '${p}'`);\n    const attributes = this.libzip.getValue(this.libzip.uint32S, `i32`) >>> 16;\n    if ((attributes & 0o170000) !== 0o120000) throw errors.EINVAL(`readlink '${p}'`);\n    return this.getFileSource(entry).toString();\n  }\n\n  watch(p, a, b) {\n    let persistent;\n\n    switch (typeof a) {\n      case `function`:\n      case `string`:\n      case `undefined`:\n        {\n          persistent = true;\n        }\n        break;\n\n      default:\n        {\n          // @ts-ignore\n          ({\n            persistent = true\n          } = a);\n        }\n        break;\n    }\n\n    if (!persistent) return {\n      on: () => {},\n      close: () => {}\n    };\n    const interval = setInterval(() => {}, 24 * 60 * 60 * 1000);\n    return {\n      on: () => {},\n      close: () => {\n        clearInterval(interval);\n      }\n    };\n  }\n\n}\n\nexports.ZipFS = ZipFS;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"os\");\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"util\");\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ErrorCode;\n\n(function (ErrorCode) {\n  ErrorCode[\"API_ERROR\"] = \"API_ERROR\";\n  ErrorCode[\"BLACKLISTED\"] = \"BLACKLISTED\";\n  ErrorCode[\"BUILTIN_NODE_RESOLUTION_FAILED\"] = \"BUILTIN_NODE_RESOLUTION_FAILED\";\n  ErrorCode[\"MISSING_DEPENDENCY\"] = \"MISSING_DEPENDENCY\";\n  ErrorCode[\"MISSING_PEER_DEPENDENCY\"] = \"MISSING_PEER_DEPENDENCY\";\n  ErrorCode[\"QUALIFIED_PATH_RESOLUTION_FAILED\"] = \"QUALIFIED_PATH_RESOLUTION_FAILED\";\n  ErrorCode[\"INTERNAL\"] = \"INTERNAL\";\n  ErrorCode[\"UNDECLARED_DEPENDENCY\"] = \"UNDECLARED_DEPENDENCY\";\n  ErrorCode[\"UNSUPPORTED\"] = \"UNSUPPORTED\";\n})(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {})); // Some errors are exposed as MODULE_NOT_FOUND for compatibility with packages\n// that expect this umbrella error when the resolution fails\n\n\nconst MODULE_NOT_FOUND_ERRORS = new Set([ErrorCode.BLACKLISTED, ErrorCode.BUILTIN_NODE_RESOLUTION_FAILED, ErrorCode.MISSING_DEPENDENCY, ErrorCode.MISSING_PEER_DEPENDENCY, ErrorCode.QUALIFIED_PATH_RESOLUTION_FAILED, ErrorCode.UNDECLARED_DEPENDENCY]);\n/**\n * Simple helper function that assign an error code to an error, so that it can more easily be caught and used\n * by third-parties.\n */\n\nfunction makeError(pnpCode, message, data = {}) {\n  const code = MODULE_NOT_FOUND_ERRORS.has(pnpCode) ? `MODULE_NOT_FOUND` : pnpCode;\n  const propertySpec = {\n    configurable: true,\n    writable: true,\n    enumerable: false\n  };\n  return Object.defineProperties(new Error(message), {\n    code: Object.assign(Object.assign({}, propertySpec), {\n      value: code\n    }),\n    pnpCode: Object.assign(Object.assign({}, propertySpec), {\n      value: pnpCode\n    }),\n    data: Object.assign(Object.assign({}, propertySpec), {\n      value: data\n    })\n  });\n}\n\nexports.makeError = makeError;\n/**\n * Returns the module that should be used to resolve require calls. It's usually the direct parent, except if we're\n * inside an eval expression.\n */\n\nfunction getIssuerModule(parent) {\n  let issuer = parent;\n\n  while (issuer && (issuer.id === `[eval]` || issuer.id === `<repl>` || !issuer.filename)) issuer = issuer.parent;\n\n  return issuer || null;\n}\n\nexports.getIssuerModule = getIssuerModule;\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fslib_1 = __webpack_require__(5);\n\nconst libzip_1 = __webpack_require__(24);\n\nconst fs_1 = __importDefault(__webpack_require__(2));\n\nconst module_1 = __importDefault(__webpack_require__(6));\n\nconst string_decoder_1 = __importDefault(__webpack_require__(28));\n\nconst applyPatch_1 = __webpack_require__(29);\n\nconst hydrateRuntimeState_1 = __webpack_require__(31);\n\nconst makeApi_1 = __webpack_require__(32);\n\nconst makeManager_1 = __webpack_require__(33); // We must copy the fs into a local, because otherwise\n// 1. we would make the NodeFS instance use the function that we patched (infinite loop)\n// 2. Object.create(fs) isn't enough, since it won't prevent the proto from being modified\n\n\nconst localFs = Object.assign({}, fs_1.default);\nconst nodeFs = new fslib_1.NodeFS(localFs);\nconst defaultRuntimeState = $$SETUP_STATE(hydrateRuntimeState_1.hydrateRuntimeState);\nconst defaultPnpapiResolution = __filename; // We create a virtual filesystem that will do three things:\n// 1. all requests inside a folder named \"$$virtual\" will be remapped according the virtual folder rules\n// 2. all requests going inside a Zip archive will be handled by the Zip fs implementation\n// 3. any remaining request will be forwarded to Node as-is\n\nconst defaultFsLayer = new fslib_1.VirtualFS({\n  baseFs: new fslib_1.ZipOpenFS({\n    baseFs: nodeFs,\n    libzip: libzip_1.getLibzipSync(),\n    maxOpenFiles: 80,\n    readOnlyArchives: true\n  })\n});\nlet manager;\nconst defaultApi = Object.assign(makeApi_1.makeApi(defaultRuntimeState, {\n  fakeFs: defaultFsLayer,\n  pnpapiResolution: defaultPnpapiResolution\n}), {\n  /**\n   * Can be used to generate a different API than the default one (for example\n   * to map it on `/` rather than the local directory path, or to use a\n   * different FS layer than the default one).\n   */\n  makeApi: _a => {\n    var {\n      basePath = undefined,\n      fakeFs = defaultFsLayer,\n      pnpapiResolution = defaultPnpapiResolution\n    } = _a,\n        rest = __rest(_a, [\"basePath\", \"fakeFs\", \"pnpapiResolution\"]);\n\n    const apiRuntimeState = typeof basePath !== `undefined` ? $$SETUP_STATE(hydrateRuntimeState_1.hydrateRuntimeState, basePath) : defaultRuntimeState;\n    return makeApi_1.makeApi(apiRuntimeState, Object.assign({\n      fakeFs,\n      pnpapiResolution\n    }, rest));\n  },\n\n  /**\n   * Will inject the specified API into the environment, monkey-patching FS. Is\n   * automatically called when the hook is loaded through `--require`.\n   */\n  setup: api => {\n    applyPatch_1.applyPatch(api || defaultApi, {\n      fakeFs: defaultFsLayer,\n      manager\n    });\n  }\n});\nmanager = makeManager_1.makeManager(defaultApi, {\n  fakeFs: defaultFsLayer\n}); // eslint-disable-next-line arca/no-default-export\n\nexports.default = defaultApi;\n\nif (__non_webpack_module__.parent && __non_webpack_module__.parent.id === `internal/preload`) {\n  defaultApi.setup();\n\n  if (__non_webpack_module__.filename) {\n    // We delete it from the cache in order to support the case where the CLI resolver is invoked from \"yarn run\"\n    // It's annoying because it might cause some issues when the file is multiple times in NODE_OPTIONS, but it shouldn't happen anyway.\n    // @ts-ignore\n    delete module_1.default._cache[__non_webpack_module__.filename];\n  }\n} // @ts-ignore\n\n\nif (process.mainModule === __non_webpack_module__) {\n  const reportError = (code, message, data) => {\n    process.stdout.write(`${JSON.stringify([{\n      code,\n      message,\n      data\n    }, null])}\\n`);\n  };\n\n  const reportSuccess = resolution => {\n    process.stdout.write(`${JSON.stringify([null, resolution])}\\n`);\n  };\n\n  const processResolution = (request, issuer) => {\n    try {\n      reportSuccess(defaultApi.resolveRequest(request, issuer));\n    } catch (error) {\n      reportError(error.code, error.message, error.data);\n    }\n  };\n\n  const processRequest = data => {\n    try {\n      const [request, issuer] = JSON.parse(data);\n      processResolution(request, issuer);\n    } catch (error) {\n      reportError(`INVALID_JSON`, error.message, error.data);\n    }\n  };\n\n  if (process.argv.length > 2) {\n    if (process.argv.length !== 4) {\n      process.stderr.write(`Usage: ${process.argv[0]} ${process.argv[1]} <request> <issuer>\\n`);\n      process.exitCode = 64;\n      /* EX_USAGE */\n    } else {\n      processResolution(process.argv[2], process.argv[3]);\n    }\n  } else {\n    let buffer = ``;\n    const decoder = new string_decoder_1.default.StringDecoder();\n    process.stdin.on(`data`, chunk => {\n      buffer += decoder.write(chunk);\n\n      do {\n        const index = buffer.indexOf(`\\n`);\n        if (index === -1) break;\n        const line = buffer.slice(0, index);\n        buffer = buffer.slice(index + 1);\n        processRequest(line);\n      } while (true);\n    });\n  }\n}\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs_1 = __importDefault(__webpack_require__(2));\n\nconst path_1 = __webpack_require__(0);\n\nasync function copyPromise(destinationFs, destination, sourceFs, source, opts) {\n  const normalizedDestination = destinationFs.pathUtils.normalize(destination);\n  const normalizedSource = sourceFs.pathUtils.normalize(source);\n  const operations = [];\n  const utimes = [];\n  await destinationFs.mkdirpPromise(destination);\n  await copyImpl(operations, utimes, destinationFs, normalizedDestination, sourceFs, normalizedSource, opts);\n\n  for (const operation of operations) await operation();\n\n  for (const [p, atime, mtime] of utimes) {\n    await destinationFs.utimesPromise(p, atime, mtime);\n  }\n}\n\nexports.copyPromise = copyPromise;\n\nasync function copyImpl(operations, utimes, destinationFs, destination, sourceFs, source, opts) {\n  const destinationStat = await maybeLStat(destinationFs, destination);\n  const sourceStat = await sourceFs.lstatPromise(source);\n  utimes.push([destination, sourceStat.atime, sourceStat.mtime]);\n\n  switch (true) {\n    case sourceStat.isDirectory():\n      {\n        await copyFolder(operations, utimes, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts);\n      }\n      break;\n\n    case sourceStat.isFile():\n      {\n        await copyFile(operations, utimes, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts);\n      }\n      break;\n\n    case sourceStat.isSymbolicLink():\n      {\n        await copySymlink(operations, utimes, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts);\n      }\n      break;\n\n    default:\n      {\n        throw new Error(`Unsupported file type (${sourceStat.mode})`);\n      }\n      break;\n  }\n\n  operations.push(async () => destinationFs.chmodPromise(destination, sourceStat.mode & 0o777));\n}\n\nasync function maybeLStat(baseFs, p) {\n  try {\n    return await baseFs.lstatPromise(p);\n  } catch (e) {\n    return null;\n  }\n}\n\nasync function copyFolder(operations, utimes, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts) {\n  if (destinationStat !== null && !destinationStat.isDirectory()) {\n    if (opts.overwrite) {\n      operations.push(async () => destinationFs.removePromise(destination));\n      destinationStat = null;\n    } else {\n      return;\n    }\n  }\n\n  if (destinationStat === null) operations.push(async () => destinationFs.mkdirPromise(destination, {\n    mode: sourceStat.mode\n  }));\n  const entries = await sourceFs.readdirPromise(source);\n  await Promise.all(entries.map(async entry => {\n    await copyImpl(operations, utimes, destinationFs, destinationFs.pathUtils.join(destination, entry), sourceFs, sourceFs.pathUtils.join(source, entry), opts);\n  }));\n}\n\nasync function copyFile(operations, utimes, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts) {\n  if (destinationStat !== null) {\n    if (opts.overwrite) {\n      operations.push(async () => destinationFs.removePromise(destination));\n      destinationStat = null;\n    } else {\n      return;\n    }\n  }\n\n  if (destinationFs === sourceFs) {\n    operations.push(async () => destinationFs.copyFilePromise(source, destination, fs_1.default.constants.COPYFILE_FICLONE));\n  } else {\n    operations.push(async () => destinationFs.writeFilePromise(destination, (await sourceFs.readFilePromise(source))));\n  }\n}\n\nasync function copySymlink(operations, utimes, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts) {\n  if (destinationStat !== null) {\n    if (opts.overwrite) {\n      operations.push(async () => destinationFs.removePromise(destination));\n      destinationStat = null;\n    } else {\n      return;\n    }\n  }\n\n  const target = await sourceFs.readlinkPromise(source);\n  operations.push(async () => destinationFs.symlinkPromise(path_1.convertPath(destinationFs.pathUtils, target), destination));\n}\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"stream\");\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction makeError(code, message) {\n  return Object.assign(new Error(`${code}: ${message}`), {\n    code\n  });\n}\n\nfunction EBUSY(message) {\n  return makeError(`EBUSY`, message);\n}\n\nexports.EBUSY = EBUSY;\n\nfunction ENOSYS(message, reason) {\n  return makeError(`ENOSYS`, `${message}, ${reason}`);\n}\n\nexports.ENOSYS = ENOSYS;\n\nfunction EINVAL(reason) {\n  return makeError(`EINVAL`, `invalid argument, ${reason}`);\n}\n\nexports.EINVAL = EINVAL;\n\nfunction EBADF(reason) {\n  return makeError(`EBADF`, `bad file descriptor, ${reason}`);\n}\n\nexports.EBADF = EBADF;\n\nfunction ENOENT(reason) {\n  return makeError(`ENOENT`, `no such file or directory, ${reason}`);\n}\n\nexports.ENOENT = ENOENT;\n\nfunction ENOTDIR(reason) {\n  return makeError(`ENOTDIR`, `not a directory, ${reason}`);\n}\n\nexports.ENOTDIR = ENOTDIR;\n\nfunction EISDIR(reason) {\n  return makeError(`EISDIR`, `illegal operation on a directory, ${reason}`);\n}\n\nexports.EISDIR = EISDIR;\n\nfunction EEXIST(reason) {\n  return makeError(`EEXIST`, `file already exists, ${reason}`);\n}\n\nexports.EEXIST = EEXIST;\n\nfunction EROFS(reason) {\n  return makeError(`EROFS`, `read-only filesystem, ${reason}`);\n}\n\nexports.EROFS = EROFS;\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ProxiedFS_1 = __webpack_require__(4);\n\nclass AliasFS extends ProxiedFS_1.ProxiedFS {\n  constructor(target, {\n    baseFs,\n    pathUtils\n  }) {\n    super(pathUtils);\n    this.target = target;\n    this.baseFs = baseFs;\n  }\n\n  getRealPath() {\n    return this.target;\n  }\n\n  getBaseFs() {\n    return this.baseFs;\n  }\n\n  mapFromBase(p) {\n    return p;\n  }\n\n  mapToBase(p) {\n    return p;\n  }\n\n}\n\nexports.AliasFS = AliasFS;\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst NodeFS_1 = __webpack_require__(1);\n\nconst ProxiedFS_1 = __webpack_require__(4);\n\nconst path_1 = __webpack_require__(0);\n\nclass CwdFS extends ProxiedFS_1.ProxiedFS {\n  constructor(target, {\n    baseFs = new NodeFS_1.NodeFS()\n  } = {}) {\n    super(path_1.ppath);\n    this.target = target;\n    this.baseFs = baseFs;\n  }\n\n  getRealPath() {\n    return this.pathUtils.resolve(this.baseFs.getRealPath(), this.target);\n  }\n\n  mapFromBase(path) {\n    return this.pathUtils.relative(this.getRealPath(), path);\n  }\n\n  mapToBase(path) {\n    return this.pathUtils.resolve(this.getRealPath(), path);\n  }\n\n}\n\nexports.CwdFS = CwdFS;\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst NodeFS_1 = __webpack_require__(1);\n\nconst ProxiedFS_1 = __webpack_require__(4);\n\nconst path_1 = __webpack_require__(0);\n\nconst JAIL_ROOT = path_1.PortablePath.root;\n\nclass JailFS extends ProxiedFS_1.ProxiedFS {\n  constructor(target, {\n    baseFs = new NodeFS_1.NodeFS()\n  } = {}) {\n    super(path_1.ppath);\n    this.target = this.pathUtils.resolve(path_1.PortablePath.root, target);\n    this.baseFs = baseFs;\n  }\n\n  getRealPath() {\n    return this.pathUtils.resolve(this.baseFs.getRealPath(), this.pathUtils.relative(path_1.PortablePath.root, this.target));\n  }\n\n  getTarget() {\n    return this.target;\n  }\n\n  getBaseFs() {\n    return this.baseFs;\n  }\n\n  mapToBase(p) {\n    const normalized = this.pathUtils.normalize(p);\n    if (this.pathUtils.isAbsolute(p)) return this.pathUtils.resolve(this.target, this.pathUtils.relative(JAIL_ROOT, p));\n    if (normalized.match(/^\\.\\.\\//)) throw new Error(`Resolving this path (${p}) would escape the jail`);\n    return this.pathUtils.resolve(this.target, p);\n  }\n\n  mapFromBase(p) {\n    return this.pathUtils.resolve(JAIL_ROOT, this.pathUtils.relative(this.target, p));\n  }\n\n}\n\nexports.JailFS = JailFS;\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ProxiedFS_1 = __webpack_require__(4);\n\nclass LazyFS extends ProxiedFS_1.ProxiedFS {\n  constructor(factory, pathUtils) {\n    super(pathUtils);\n    this.instance = null;\n    this.factory = factory;\n  }\n\n  get baseFs() {\n    if (!this.instance) this.instance = this.factory();\n    return this.instance;\n  }\n\n  set baseFs(value) {\n    this.instance = value;\n  }\n\n  mapFromBase(p) {\n    return p;\n  }\n\n  mapToBase(p) {\n    return p;\n  }\n\n}\n\nexports.LazyFS = LazyFS;\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst FakeFS_1 = __webpack_require__(3);\n\nconst path_1 = __webpack_require__(0);\n\nconst makeError = () => Object.assign(new Error(`ENOSYS: unsupported filesystem access`), {\n  code: `ENOSYS`\n});\n\nclass NoFS extends FakeFS_1.FakeFS {\n  constructor() {\n    super(path_1.ppath);\n  }\n\n  getExtractHint() {\n    throw makeError();\n  }\n\n  getRealPath() {\n    throw makeError();\n  }\n\n  resolve() {\n    throw makeError();\n  }\n\n  async openPromise() {\n    throw makeError();\n  }\n\n  openSync() {\n    throw makeError();\n  }\n\n  async readPromise() {\n    throw makeError();\n  }\n\n  readSync() {\n    throw makeError();\n  }\n\n  async writePromise() {\n    throw makeError();\n  }\n\n  writeSync() {\n    throw makeError();\n  }\n\n  async closePromise() {\n    throw makeError();\n  }\n\n  closeSync() {\n    throw makeError();\n  }\n\n  createWriteStream() {\n    throw makeError();\n  }\n\n  createReadStream() {\n    throw makeError();\n  }\n\n  async realpathPromise() {\n    throw makeError();\n  }\n\n  realpathSync() {\n    throw makeError();\n  }\n\n  async readdirPromise() {\n    throw makeError();\n  }\n\n  readdirSync() {\n    throw makeError();\n  }\n\n  async existsPromise(p) {\n    throw makeError();\n  }\n\n  existsSync(p) {\n    throw makeError();\n  }\n\n  async accessPromise() {\n    throw makeError();\n  }\n\n  accessSync() {\n    throw makeError();\n  }\n\n  async statPromise() {\n    throw makeError();\n  }\n\n  statSync() {\n    throw makeError();\n  }\n\n  async lstatPromise(p) {\n    throw makeError();\n  }\n\n  lstatSync(p) {\n    throw makeError();\n  }\n\n  async chmodPromise() {\n    throw makeError();\n  }\n\n  chmodSync() {\n    throw makeError();\n  }\n\n  async mkdirPromise() {\n    throw makeError();\n  }\n\n  mkdirSync() {\n    throw makeError();\n  }\n\n  async rmdirPromise() {\n    throw makeError();\n  }\n\n  rmdirSync() {\n    throw makeError();\n  }\n\n  async symlinkPromise() {\n    throw makeError();\n  }\n\n  symlinkSync() {\n    throw makeError();\n  }\n\n  async renamePromise() {\n    throw makeError();\n  }\n\n  renameSync() {\n    throw makeError();\n  }\n\n  async copyFilePromise() {\n    throw makeError();\n  }\n\n  copyFileSync() {\n    throw makeError();\n  }\n\n  async appendFilePromise() {\n    throw makeError();\n  }\n\n  appendFileSync() {\n    throw makeError();\n  }\n\n  async writeFilePromise() {\n    throw makeError();\n  }\n\n  writeFileSync() {\n    throw makeError();\n  }\n\n  async unlinkPromise() {\n    throw makeError();\n  }\n\n  unlinkSync() {\n    throw makeError();\n  }\n\n  async utimesPromise() {\n    throw makeError();\n  }\n\n  utimesSync() {\n    throw makeError();\n  }\n\n  async readFilePromise() {\n    throw makeError();\n  }\n\n  readFileSync() {\n    throw makeError();\n  }\n\n  async readlinkPromise() {\n    throw makeError();\n  }\n\n  readlinkSync() {\n    throw makeError();\n  }\n\n  watch() {\n    throw makeError();\n  }\n\n}\n\nexports.NoFS = NoFS;\nNoFS.instance = new NoFS();\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ProxiedFS_1 = __webpack_require__(4);\n\nconst path_1 = __webpack_require__(0);\n\nclass PosixFS extends ProxiedFS_1.ProxiedFS {\n  constructor(baseFs) {\n    super(path_1.npath);\n    this.baseFs = baseFs;\n  }\n\n  mapFromBase(path) {\n    return path_1.npath.fromPortablePath(path);\n  }\n\n  mapToBase(path) {\n    return path_1.npath.toPortablePath(path);\n  }\n\n}\n\nexports.PosixFS = PosixFS;\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst NodeFS_1 = __webpack_require__(1);\n\nconst ProxiedFS_1 = __webpack_require__(4);\n\nconst path_1 = __webpack_require__(0);\n\nconst NUMBER_REGEXP = /^[0-9]+$/; // $0: full path\n// $1: virtual folder\n// $2: virtual segment\n// $3: hash\n// $4: depth\n// $5: subpath\n\nconst VIRTUAL_REGEXP = /^(\\/(?:[^/]+\\/)*?\\$\\$virtual)((?:\\/((?:[^/]+-)?[a-f0-9]+)(?:\\/([^/]+))?)?((?:\\/.*)?))$/;\nconst VALID_COMPONENT = /^([^/]+-)?[a-f0-9]+$/;\n\nclass VirtualFS extends ProxiedFS_1.ProxiedFS {\n  constructor({\n    baseFs = new NodeFS_1.NodeFS()\n  } = {}) {\n    super(path_1.ppath);\n    this.baseFs = baseFs;\n  }\n\n  static makeVirtualPath(base, component, to) {\n    if (path_1.ppath.basename(base) !== `$$virtual`) throw new Error(`Assertion failed: Virtual folders must be named \"$$virtual\"`);\n    if (!path_1.ppath.basename(component).match(VALID_COMPONENT)) throw new Error(`Assertion failed: Virtual components must be ended by an hexadecimal hash`); // Obtains the relative distance between the virtual path and its actual target\n\n    const target = path_1.ppath.relative(path_1.ppath.dirname(base), to);\n    const segments = target.split(`/`); // Counts how many levels we need to go back to start applying the rest of the path\n\n    let depth = 0;\n\n    while (depth < segments.length && segments[depth] === `..`) depth += 1;\n\n    const finalSegments = segments.slice(depth);\n    const fullVirtualPath = path_1.ppath.join(base, component, String(depth), ...finalSegments);\n    return fullVirtualPath;\n  }\n\n  static resolveVirtual(p) {\n    const match = p.match(VIRTUAL_REGEXP);\n    if (!match || !match[3] && match[5]) return p;\n    const target = path_1.ppath.dirname(match[1]);\n    if (!match[3] || !match[4]) return target;\n    const isnum = NUMBER_REGEXP.test(match[4]);\n    if (!isnum) return p;\n    const depth = Number(match[4]);\n    const backstep = `../`.repeat(depth);\n    const subpath = match[5] || `.`;\n    return VirtualFS.resolveVirtual(path_1.ppath.join(target, backstep, subpath));\n  }\n\n  getExtractHint(hints) {\n    return this.baseFs.getExtractHint(hints);\n  }\n\n  getRealPath() {\n    return this.baseFs.getRealPath();\n  }\n\n  realpathSync(p) {\n    const match = p.match(VIRTUAL_REGEXP);\n    if (!match) return this.baseFs.realpathSync(p);\n    if (!match[5]) return p;\n    const realpath = this.baseFs.realpathSync(this.mapToBase(p));\n    return VirtualFS.makeVirtualPath(match[1], match[3], realpath);\n  }\n\n  async realpathPromise(p) {\n    const match = p.match(VIRTUAL_REGEXP);\n    if (!match) return await this.baseFs.realpathPromise(p);\n    if (!match[5]) return p;\n    const realpath = await this.baseFs.realpathPromise(this.mapToBase(p));\n    return VirtualFS.makeVirtualPath(match[1], match[3], realpath);\n  }\n\n  mapToBase(p) {\n    return VirtualFS.resolveVirtual(p);\n  }\n\n  mapFromBase(p) {\n    return p;\n  }\n\n}\n\nexports.VirtualFS = VirtualFS;\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs_1 = __webpack_require__(2);\n\nconst FakeFS_1 = __webpack_require__(3);\n\nconst NodeFS_1 = __webpack_require__(1);\n\nconst ZipFS_1 = __webpack_require__(8);\n\nconst path_1 = __webpack_require__(0);\n\nconst ZIP_FD = 0x80000000;\n\nclass ZipOpenFS extends FakeFS_1.BasePortableFakeFS {\n  constructor({\n    libzip,\n    baseFs = new NodeFS_1.NodeFS(),\n    filter = null,\n    maxOpenFiles = Infinity,\n    readOnlyArchives = false,\n    useCache = true\n  }) {\n    super();\n    this.fdMap = new Map();\n    this.nextFd = 3;\n    this.isZip = new Set();\n    this.notZip = new Set();\n    this.libzip = libzip;\n    this.baseFs = baseFs;\n    this.zipInstances = useCache ? new Map() : null;\n    this.filter = filter;\n    this.maxOpenFiles = maxOpenFiles;\n    this.readOnlyArchives = readOnlyArchives;\n    this.isZip = new Set();\n    this.notZip = new Set();\n  }\n\n  static async openPromise(fn, opts) {\n    const zipOpenFs = new ZipOpenFS(opts);\n\n    try {\n      return await fn(zipOpenFs);\n    } finally {\n      zipOpenFs.saveAndClose();\n    }\n  }\n\n  getExtractHint(hints) {\n    return this.baseFs.getExtractHint(hints);\n  }\n\n  getRealPath() {\n    return this.baseFs.getRealPath();\n  }\n\n  saveAndClose() {\n    if (this.zipInstances) {\n      for (const [path, zipFs] of this.zipInstances.entries()) {\n        zipFs.saveAndClose();\n        this.zipInstances.delete(path);\n      }\n    }\n  }\n\n  discardAndClose() {\n    if (this.zipInstances) {\n      for (const [path, zipFs] of this.zipInstances.entries()) {\n        zipFs.discardAndClose();\n        this.zipInstances.delete(path);\n      }\n    }\n  }\n\n  remapFd(zipFs, fd) {\n    const remappedFd = this.nextFd++ | ZIP_FD;\n    this.fdMap.set(remappedFd, [zipFs, fd]);\n    return remappedFd;\n  }\n\n  async openPromise(p, flags, mode) {\n    return await this.makeCallPromise(p, async () => {\n      return await this.baseFs.openPromise(p, flags, mode);\n    }, async (zipFs, {\n      subPath\n    }) => {\n      return this.remapFd(zipFs, (await zipFs.openPromise(subPath, flags, mode)));\n    });\n  }\n\n  openSync(p, flags, mode) {\n    return this.makeCallSync(p, () => {\n      return this.baseFs.openSync(p, flags, mode);\n    }, (zipFs, {\n      subPath\n    }) => {\n      return this.remapFd(zipFs, zipFs.openSync(subPath, flags, mode));\n    });\n  }\n\n  async readPromise(fd, buffer, offset, length, position) {\n    if ((fd & ZIP_FD) === 0) return await this.baseFs.readPromise(fd, buffer, offset, length, position);\n    const entry = this.fdMap.get(fd);\n    if (typeof entry === `undefined`) throw Object.assign(new Error(`EBADF: bad file descriptor, read`), {\n      code: `EBADF`\n    });\n    const [zipFs, realFd] = entry;\n    return await zipFs.readPromise(realFd, buffer, offset, length, position);\n  }\n\n  readSync(fd, buffer, offset, length, position) {\n    if ((fd & ZIP_FD) === 0) return this.baseFs.readSync(fd, buffer, offset, length, position);\n    const entry = this.fdMap.get(fd);\n    if (typeof entry === `undefined`) throw Object.assign(new Error(`EBADF: bad file descriptor, read`), {\n      code: `EBADF`\n    });\n    const [zipFs, realFd] = entry;\n    return zipFs.readSync(realFd, buffer, offset, length, position);\n  }\n\n  async writePromise(fd, buffer, offset, length, position) {\n    if ((fd & ZIP_FD) === 0) {\n      if (typeof buffer === `string`) {\n        return await this.baseFs.writePromise(fd, buffer, offset);\n      } else {\n        return await this.baseFs.writePromise(fd, buffer, offset, length, position);\n      }\n    }\n\n    const entry = this.fdMap.get(fd);\n    if (typeof entry === `undefined`) throw Object.assign(new Error(`EBADF: bad file descriptor, write`), {\n      code: `EBADF`\n    });\n    const [zipFs, realFd] = entry;\n\n    if (typeof buffer === `string`) {\n      return await zipFs.writePromise(realFd, buffer, offset);\n    } else {\n      return await zipFs.writePromise(realFd, buffer, offset, length, position);\n    }\n  }\n\n  writeSync(fd, buffer, offset, length, position) {\n    if ((fd & ZIP_FD) === 0) {\n      if (typeof buffer === `string`) {\n        return this.baseFs.writeSync(fd, buffer, offset);\n      } else {\n        return this.baseFs.writeSync(fd, buffer, offset, length, position);\n      }\n    }\n\n    const entry = this.fdMap.get(fd);\n    if (typeof entry === `undefined`) throw Object.assign(new Error(`EBADF: bad file descriptor, write`), {\n      code: `EBADF`\n    });\n    const [zipFs, realFd] = entry;\n\n    if (typeof buffer === `string`) {\n      return zipFs.writeSync(realFd, buffer, offset);\n    } else {\n      return zipFs.writeSync(realFd, buffer, offset, length, position);\n    }\n  }\n\n  async closePromise(fd) {\n    if ((fd & ZIP_FD) === 0) return await this.baseFs.closePromise(fd);\n    const entry = this.fdMap.get(fd);\n    if (typeof entry === `undefined`) throw Object.assign(new Error(`EBADF: bad file descriptor, close`), {\n      code: `EBADF`\n    });\n    this.fdMap.delete(fd);\n    const [zipFs, realFd] = entry;\n    return await zipFs.closePromise(realFd);\n  }\n\n  closeSync(fd) {\n    if ((fd & ZIP_FD) === 0) return this.baseFs.closeSync(fd);\n    const entry = this.fdMap.get(fd);\n    if (typeof entry === `undefined`) throw Object.assign(new Error(`EBADF: bad file descriptor, close`), {\n      code: `EBADF`\n    });\n    this.fdMap.delete(fd);\n    const [zipFs, realFd] = entry;\n    return zipFs.closeSync(realFd);\n  }\n\n  createReadStream(p, opts) {\n    if (p === null) return this.baseFs.createReadStream(p, opts);\n    return this.makeCallSync(p, () => {\n      return this.baseFs.createReadStream(p, opts);\n    }, (zipFs, {\n      subPath\n    }) => {\n      return zipFs.createReadStream(subPath, opts);\n    });\n  }\n\n  createWriteStream(p, opts) {\n    if (p === null) return this.baseFs.createWriteStream(p, opts);\n    return this.makeCallSync(p, () => {\n      return this.baseFs.createWriteStream(p, opts);\n    }, (zipFs, {\n      subPath\n    }) => {\n      return zipFs.createWriteStream(subPath, opts);\n    });\n  }\n\n  async realpathPromise(p) {\n    return await this.makeCallPromise(p, async () => {\n      return await this.baseFs.realpathPromise(p);\n    }, async (zipFs, {\n      archivePath,\n      subPath\n    }) => {\n      return this.pathUtils.resolve((await this.baseFs.realpathPromise(archivePath)), this.pathUtils.relative(path_1.PortablePath.root, (await zipFs.realpathPromise(subPath))));\n    });\n  }\n\n  realpathSync(p) {\n    return this.makeCallSync(p, () => {\n      return this.baseFs.realpathSync(p);\n    }, (zipFs, {\n      archivePath,\n      subPath\n    }) => {\n      return this.pathUtils.resolve(this.baseFs.realpathSync(archivePath), this.pathUtils.relative(path_1.PortablePath.root, zipFs.realpathSync(subPath)));\n    });\n  }\n\n  async existsPromise(p) {\n    return await this.makeCallPromise(p, async () => {\n      return await this.baseFs.existsPromise(p);\n    }, async (zipFs, {\n      subPath\n    }) => {\n      return await zipFs.existsPromise(subPath);\n    });\n  }\n\n  existsSync(p) {\n    return this.makeCallSync(p, () => {\n      return this.baseFs.existsSync(p);\n    }, (zipFs, {\n      subPath\n    }) => {\n      return zipFs.existsSync(subPath);\n    });\n  }\n\n  async accessPromise(p, mode) {\n    return await this.makeCallPromise(p, async () => {\n      return await this.baseFs.accessPromise(p, mode);\n    }, async (zipFs, {\n      subPath\n    }) => {\n      return await zipFs.accessPromise(subPath, mode);\n    });\n  }\n\n  accessSync(p, mode) {\n    return this.makeCallSync(p, () => {\n      return this.baseFs.accessSync(p, mode);\n    }, (zipFs, {\n      subPath\n    }) => {\n      return zipFs.accessSync(subPath, mode);\n    });\n  }\n\n  async statPromise(p) {\n    return await this.makeCallPromise(p, async () => {\n      return await this.baseFs.statPromise(p);\n    }, async (zipFs, {\n      subPath\n    }) => {\n      return await zipFs.statPromise(subPath);\n    });\n  }\n\n  statSync(p) {\n    return this.makeCallSync(p, () => {\n      return this.baseFs.statSync(p);\n    }, (zipFs, {\n      subPath\n    }) => {\n      return zipFs.statSync(subPath);\n    });\n  }\n\n  async lstatPromise(p) {\n    return await this.makeCallPromise(p, async () => {\n      return await this.baseFs.lstatPromise(p);\n    }, async (zipFs, {\n      subPath\n    }) => {\n      return await zipFs.lstatPromise(subPath);\n    });\n  }\n\n  lstatSync(p) {\n    return this.makeCallSync(p, () => {\n      return this.baseFs.lstatSync(p);\n    }, (zipFs, {\n      subPath\n    }) => {\n      return zipFs.lstatSync(subPath);\n    });\n  }\n\n  async chmodPromise(p, mask) {\n    return await this.makeCallPromise(p, async () => {\n      return await this.baseFs.chmodPromise(p, mask);\n    }, async (zipFs, {\n      subPath\n    }) => {\n      return await zipFs.chmodPromise(subPath, mask);\n    });\n  }\n\n  chmodSync(p, mask) {\n    return this.makeCallSync(p, () => {\n      return this.baseFs.chmodSync(p, mask);\n    }, (zipFs, {\n      subPath\n    }) => {\n      return zipFs.chmodSync(subPath, mask);\n    });\n  }\n\n  async renamePromise(oldP, newP) {\n    return await this.makeCallPromise(oldP, async () => {\n      return await this.makeCallPromise(newP, async () => {\n        return await this.baseFs.renamePromise(oldP, newP);\n      }, async () => {\n        throw Object.assign(new Error(`EEXDEV: cross-device link not permitted`), {\n          code: `EEXDEV`\n        });\n      });\n    }, async (zipFsO, {\n      subPath: subPathO\n    }) => {\n      return await this.makeCallPromise(newP, async () => {\n        throw Object.assign(new Error(`EEXDEV: cross-device link not permitted`), {\n          code: `EEXDEV`\n        });\n      }, async (zipFsN, {\n        subPath: subPathN\n      }) => {\n        if (zipFsO !== zipFsN) {\n          throw Object.assign(new Error(`EEXDEV: cross-device link not permitted`), {\n            code: `EEXDEV`\n          });\n        } else {\n          return await zipFsO.renamePromise(subPathO, subPathN);\n        }\n      });\n    });\n  }\n\n  renameSync(oldP, newP) {\n    return this.makeCallSync(oldP, () => {\n      return this.makeCallSync(newP, () => {\n        return this.baseFs.renameSync(oldP, newP);\n      }, async () => {\n        throw Object.assign(new Error(`EEXDEV: cross-device link not permitted`), {\n          code: `EEXDEV`\n        });\n      });\n    }, (zipFsO, {\n      subPath: subPathO\n    }) => {\n      return this.makeCallSync(newP, () => {\n        throw Object.assign(new Error(`EEXDEV: cross-device link not permitted`), {\n          code: `EEXDEV`\n        });\n      }, (zipFsN, {\n        subPath: subPathN\n      }) => {\n        if (zipFsO !== zipFsN) {\n          throw Object.assign(new Error(`EEXDEV: cross-device link not permitted`), {\n            code: `EEXDEV`\n          });\n        } else {\n          return zipFsO.renameSync(subPathO, subPathN);\n        }\n      });\n    });\n  }\n\n  async copyFilePromise(sourceP, destP, flags = 0) {\n    const fallback = async (sourceFs, sourceP, destFs, destP) => {\n      if ((flags & fs_1.constants.COPYFILE_FICLONE_FORCE) !== 0) throw Object.assign(new Error(`EXDEV: cross-device clone not permitted, copyfile '${sourceP}' -> ${destP}'`), {\n        code: `EXDEV`\n      });\n      if (flags & fs_1.constants.COPYFILE_EXCL && (await this.existsPromise(sourceP))) throw Object.assign(new Error(`EEXIST: file already exists, copyfile '${sourceP}' -> '${destP}'`), {\n        code: `EEXIST`\n      });\n      let content;\n\n      try {\n        content = await sourceFs.readFilePromise(sourceP);\n      } catch (error) {\n        throw Object.assign(new Error(`EINVAL: invalid argument, copyfile '${sourceP}' -> '${destP}'`), {\n          code: `EINVAL`\n        });\n      }\n\n      await destFs.writeFilePromise(destP, content);\n    };\n\n    return await this.makeCallPromise(sourceP, async () => {\n      return await this.makeCallPromise(destP, async () => {\n        return await this.baseFs.copyFilePromise(sourceP, destP, flags);\n      }, async (zipFsD, {\n        subPath: subPathD\n      }) => {\n        return await fallback(this.baseFs, sourceP, zipFsD, subPathD);\n      });\n    }, async (zipFsS, {\n      subPath: subPathS\n    }) => {\n      return await this.makeCallPromise(destP, async () => {\n        return await fallback(zipFsS, subPathS, this.baseFs, destP);\n      }, async (zipFsD, {\n        subPath: subPathD\n      }) => {\n        if (zipFsS !== zipFsD) {\n          return await fallback(zipFsS, subPathS, zipFsD, subPathD);\n        } else {\n          return await zipFsS.copyFilePromise(subPathS, subPathD, flags);\n        }\n      });\n    });\n  }\n\n  copyFileSync(sourceP, destP, flags = 0) {\n    const fallback = (sourceFs, sourceP, destFs, destP) => {\n      if ((flags & fs_1.constants.COPYFILE_FICLONE_FORCE) !== 0) throw Object.assign(new Error(`EXDEV: cross-device clone not permitted, copyfile '${sourceP}' -> ${destP}'`), {\n        code: `EXDEV`\n      });\n      if (flags & fs_1.constants.COPYFILE_EXCL && this.existsSync(sourceP)) throw Object.assign(new Error(`EEXIST: file already exists, copyfile '${sourceP}' -> '${destP}'`), {\n        code: `EEXIST`\n      });\n      let content;\n\n      try {\n        content = sourceFs.readFileSync(sourceP);\n      } catch (error) {\n        throw Object.assign(new Error(`EINVAL: invalid argument, copyfile '${sourceP}' -> '${destP}'`), {\n          code: `EINVAL`\n        });\n      }\n\n      destFs.writeFileSync(destP, content);\n    };\n\n    return this.makeCallSync(sourceP, () => {\n      return this.makeCallSync(destP, () => {\n        return this.baseFs.copyFileSync(sourceP, destP, flags);\n      }, (zipFsD, {\n        subPath: subPathD\n      }) => {\n        return fallback(this.baseFs, sourceP, zipFsD, subPathD);\n      });\n    }, (zipFsS, {\n      subPath: subPathS\n    }) => {\n      return this.makeCallSync(destP, () => {\n        return fallback(zipFsS, subPathS, this.baseFs, destP);\n      }, (zipFsD, {\n        subPath: subPathD\n      }) => {\n        if (zipFsS !== zipFsD) {\n          return fallback(zipFsS, subPathS, zipFsD, subPathD);\n        } else {\n          return zipFsS.copyFileSync(subPathS, subPathD, flags);\n        }\n      });\n    });\n  }\n\n  async appendFilePromise(p, content, opts) {\n    return await this.makeCallPromise(p, async () => {\n      return await this.baseFs.appendFilePromise(p, content, opts);\n    }, async (zipFs, {\n      subPath\n    }) => {\n      return await zipFs.appendFilePromise(subPath, content, opts);\n    });\n  }\n\n  appendFileSync(p, content, opts) {\n    return this.makeCallSync(p, () => {\n      return this.baseFs.appendFileSync(p, content, opts);\n    }, (zipFs, {\n      subPath\n    }) => {\n      return zipFs.appendFileSync(subPath, content, opts);\n    });\n  }\n\n  async writeFilePromise(p, content, opts) {\n    return await this.makeCallPromise(p, async () => {\n      return await this.baseFs.writeFilePromise(p, content, opts);\n    }, async (zipFs, {\n      subPath\n    }) => {\n      return await zipFs.writeFilePromise(subPath, content, opts);\n    });\n  }\n\n  writeFileSync(p, content, opts) {\n    return this.makeCallSync(p, () => {\n      return this.baseFs.writeFileSync(p, content, opts);\n    }, (zipFs, {\n      subPath\n    }) => {\n      return zipFs.writeFileSync(subPath, content, opts);\n    });\n  }\n\n  async unlinkPromise(p) {\n    return await this.makeCallPromise(p, async () => {\n      return await this.baseFs.unlinkPromise(p);\n    }, async (zipFs, {\n      subPath\n    }) => {\n      return await zipFs.unlinkPromise(subPath);\n    });\n  }\n\n  unlinkSync(p) {\n    return this.makeCallSync(p, () => {\n      return this.baseFs.unlinkSync(p);\n    }, (zipFs, {\n      subPath\n    }) => {\n      return zipFs.unlinkSync(subPath);\n    });\n  }\n\n  async utimesPromise(p, atime, mtime) {\n    return await this.makeCallPromise(p, async () => {\n      return await this.baseFs.utimesPromise(p, atime, mtime);\n    }, async (zipFs, {\n      subPath\n    }) => {\n      return await zipFs.utimesPromise(subPath, atime, mtime);\n    });\n  }\n\n  utimesSync(p, atime, mtime) {\n    return this.makeCallSync(p, () => {\n      return this.baseFs.utimesSync(p, atime, mtime);\n    }, (zipFs, {\n      subPath\n    }) => {\n      return zipFs.utimesSync(subPath, atime, mtime);\n    });\n  }\n\n  async mkdirPromise(p, opts) {\n    return await this.makeCallPromise(p, async () => {\n      return await this.baseFs.mkdirPromise(p, opts);\n    }, async (zipFs, {\n      subPath\n    }) => {\n      return await zipFs.mkdirPromise(subPath, opts);\n    });\n  }\n\n  mkdirSync(p, opts) {\n    return this.makeCallSync(p, () => {\n      return this.baseFs.mkdirSync(p, opts);\n    }, (zipFs, {\n      subPath\n    }) => {\n      return zipFs.mkdirSync(subPath, opts);\n    });\n  }\n\n  async rmdirPromise(p) {\n    return await this.makeCallPromise(p, async () => {\n      return await this.baseFs.rmdirPromise(p);\n    }, async (zipFs, {\n      subPath\n    }) => {\n      return await zipFs.rmdirPromise(subPath);\n    });\n  }\n\n  rmdirSync(p) {\n    return this.makeCallSync(p, () => {\n      return this.baseFs.rmdirSync(p);\n    }, (zipFs, {\n      subPath\n    }) => {\n      return zipFs.rmdirSync(subPath);\n    });\n  }\n\n  async symlinkPromise(target, p, type) {\n    return await this.makeCallPromise(p, async () => {\n      return await this.baseFs.symlinkPromise(target, p, type);\n    }, async (zipFs, {\n      subPath\n    }) => {\n      return await zipFs.symlinkPromise(target, subPath);\n    });\n  }\n\n  symlinkSync(target, p, type) {\n    return this.makeCallSync(p, () => {\n      return this.baseFs.symlinkSync(target, p, type);\n    }, (zipFs, {\n      subPath\n    }) => {\n      return zipFs.symlinkSync(target, subPath);\n    });\n  }\n\n  async readFilePromise(p, encoding) {\n    return this.makeCallPromise(p, async () => {\n      // This weird switch is required to tell TypeScript that the signatures are proper (otherwise it thinks that only the generic one is covered)\n      switch (encoding) {\n        case `utf8`:\n          return await this.baseFs.readFilePromise(p, encoding);\n\n        default:\n          return await this.baseFs.readFilePromise(p, encoding);\n      }\n    }, async (zipFs, {\n      subPath\n    }) => {\n      return await zipFs.readFilePromise(subPath, encoding);\n    });\n  }\n\n  readFileSync(p, encoding) {\n    return this.makeCallSync(p, () => {\n      // This weird switch is required to tell TypeScript that the signatures are proper (otherwise it thinks that only the generic one is covered)\n      switch (encoding) {\n        case `utf8`:\n          return this.baseFs.readFileSync(p, encoding);\n\n        default:\n          return this.baseFs.readFileSync(p, encoding);\n      }\n    }, (zipFs, {\n      subPath\n    }) => {\n      return zipFs.readFileSync(subPath, encoding);\n    });\n  }\n\n  async readdirPromise(p, {\n    withFileTypes\n  } = {}) {\n    return await this.makeCallPromise(p, async () => {\n      return await this.baseFs.readdirPromise(p, {\n        withFileTypes: withFileTypes\n      });\n    }, async (zipFs, {\n      subPath\n    }) => {\n      return await zipFs.readdirPromise(subPath, {\n        withFileTypes: withFileTypes\n      });\n    }, {\n      requireSubpath: false\n    });\n  }\n\n  readdirSync(p, {\n    withFileTypes\n  } = {}) {\n    return this.makeCallSync(p, () => {\n      return this.baseFs.readdirSync(p, {\n        withFileTypes: withFileTypes\n      });\n    }, (zipFs, {\n      subPath\n    }) => {\n      return zipFs.readdirSync(subPath, {\n        withFileTypes: withFileTypes\n      });\n    }, {\n      requireSubpath: false\n    });\n  }\n\n  async readlinkPromise(p) {\n    return await this.makeCallPromise(p, async () => {\n      return await this.baseFs.readlinkPromise(p);\n    }, async (zipFs, {\n      subPath\n    }) => {\n      return await zipFs.readlinkPromise(subPath);\n    });\n  }\n\n  readlinkSync(p) {\n    return this.makeCallSync(p, () => {\n      return this.baseFs.readlinkSync(p);\n    }, (zipFs, {\n      subPath\n    }) => {\n      return zipFs.readlinkSync(subPath);\n    });\n  }\n\n  watch(p, a, b) {\n    return this.makeCallSync(p, () => {\n      return this.baseFs.watch(p, // @ts-ignore\n      a, b);\n    }, (zipFs, {\n      subPath\n    }) => {\n      return zipFs.watch(subPath, // @ts-ignore\n      a, b);\n    });\n  }\n\n  async makeCallPromise(p, discard, accept, {\n    requireSubpath = true\n  } = {}) {\n    if (typeof p !== `string`) return await discard();\n    const normalizedP = this.pathUtils.normalize(this.pathUtils.resolve(path_1.PortablePath.root, p));\n    const zipInfo = this.findZip(normalizedP);\n    if (!zipInfo) return await discard();\n    if (requireSubpath && zipInfo.subPath === `/`) return await discard();\n    return await this.getZipPromise(zipInfo.archivePath, async zipFs => await accept(zipFs, zipInfo));\n  }\n\n  makeCallSync(p, discard, accept, {\n    requireSubpath = true\n  } = {}) {\n    if (typeof p !== `string`) return discard();\n    const normalizedP = this.pathUtils.normalize(this.pathUtils.resolve(path_1.PortablePath.root, p));\n    const zipInfo = this.findZip(normalizedP);\n    if (!zipInfo) return discard();\n    if (requireSubpath && zipInfo.subPath === `/`) return discard();\n    return this.getZipSync(zipInfo.archivePath, zipFs => accept(zipFs, zipInfo));\n  }\n\n  findZip(p) {\n    if (this.filter && !this.filter.test(p)) return null;\n    const parts = p.split(/\\//g);\n\n    for (let t = 2; t <= parts.length; ++t) {\n      const archivePath = parts.slice(0, t).join(`/`);\n      if (this.notZip.has(archivePath)) continue;\n      if (this.isZip.has(archivePath)) return {\n        archivePath,\n        subPath: this.pathUtils.resolve(path_1.PortablePath.root, parts.slice(t).join(`/`))\n      };\n      let realArchivePath = archivePath;\n      let stat;\n\n      while (true) {\n        try {\n          stat = this.baseFs.lstatSync(realArchivePath);\n        } catch (error) {\n          return null;\n        }\n\n        if (stat.isSymbolicLink()) {\n          realArchivePath = this.pathUtils.resolve(this.pathUtils.dirname(realArchivePath), this.baseFs.readlinkSync(realArchivePath));\n        } else {\n          break;\n        }\n      }\n\n      const isZip = stat.isFile() && this.pathUtils.extname(realArchivePath) === `.zip`;\n\n      if (isZip) {\n        this.isZip.add(archivePath);\n        return {\n          archivePath,\n          subPath: this.pathUtils.resolve(path_1.PortablePath.root, parts.slice(t).join(`/`))\n        };\n      } else {\n        this.notZip.add(archivePath);\n\n        if (stat.isFile()) {\n          return null;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  limitOpenFiles(max) {\n    if (this.zipInstances === null) return;\n    let closeCount = this.zipInstances.size - max;\n\n    for (const [path, zipFs] of this.zipInstances.entries()) {\n      if (closeCount <= 0) break;\n      zipFs.saveAndClose();\n      this.zipInstances.delete(path);\n      closeCount -= 1;\n    }\n  }\n\n  async getZipPromise(p, accept) {\n    const getZipOptions = async () => ({\n      baseFs: this.baseFs,\n      libzip: this.libzip,\n      readOnly: this.readOnlyArchives,\n      stats: await this.baseFs.statPromise(p)\n    });\n\n    if (this.zipInstances) {\n      let zipFs = this.zipInstances.get(p);\n\n      if (!zipFs) {\n        const zipOptions = await getZipOptions(); // We need to recheck because concurrent getZipPromise calls may\n        // have instantiated the zip archive while we were waiting\n\n        zipFs = this.zipInstances.get(p);\n\n        if (!zipFs) {\n          zipFs = new ZipFS_1.ZipFS(p, zipOptions);\n        }\n      } // Removing then re-adding the field allows us to easily implement\n      // a basic LRU garbage collection strategy\n\n\n      this.zipInstances.delete(p);\n      this.zipInstances.set(p, zipFs);\n      this.limitOpenFiles(this.maxOpenFiles);\n      return await accept(zipFs);\n    } else {\n      const zipFs = new ZipFS_1.ZipFS(p, (await getZipOptions()));\n\n      try {\n        return await accept(zipFs);\n      } finally {\n        zipFs.saveAndClose();\n      }\n    }\n  }\n\n  getZipSync(p, accept) {\n    const getZipOptions = () => ({\n      baseFs: this.baseFs,\n      libzip: this.libzip,\n      readOnly: this.readOnlyArchives,\n      stats: this.baseFs.statSync(p)\n    });\n\n    if (this.zipInstances) {\n      let zipFs = this.zipInstances.get(p);\n      if (!zipFs) zipFs = new ZipFS_1.ZipFS(p, getZipOptions()); // Removing then re-adding the field allows us to easily implement\n      // a basic LRU garbage collection strategy\n\n      this.zipInstances.delete(p);\n      this.zipInstances.set(p, zipFs);\n      this.limitOpenFiles(this.maxOpenFiles);\n      return accept(zipFs);\n    } else {\n      const zipFs = new ZipFS_1.ZipFS(p, getZipOptions());\n\n      try {\n        return accept(zipFs);\n      } finally {\n        zipFs.saveAndClose();\n      }\n    }\n  }\n\n}\n\nexports.ZipOpenFS = ZipOpenFS;\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst makeInterface_1 = __webpack_require__(25);\n\nlet mod = null;\n\nfunction getLibzipSync() {\n  if (mod === null) mod = makeInterface_1.makeInterface(__webpack_require__(26));\n  return mod;\n}\n\nexports.getLibzipSync = getLibzipSync;\n\nasync function getLibzipPromise() {\n  return getLibzipSync();\n}\n\nexports.getLibzipPromise = getLibzipPromise;\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst number64 = [`number`, `number`];\n\nexports.makeInterface = libzip => ({\n  // Those are getters because they can change after memory growth\n  get HEAP8() {\n    return libzip.HEAP8;\n  },\n\n  get HEAPU8() {\n    return libzip.HEAPU8;\n  },\n\n  ZIP_CHECKCONS: 4,\n  ZIP_CREATE: 1,\n  ZIP_EXCL: 2,\n  ZIP_TRUNCATE: 8,\n  ZIP_RDONLY: 16,\n  ZIP_FL_OVERWRITE: 8192,\n  ZIP_OPSYS_DOS: 0x00,\n  ZIP_OPSYS_AMIGA: 0x01,\n  ZIP_OPSYS_OPENVMS: 0x02,\n  ZIP_OPSYS_UNIX: 0x03,\n  ZIP_OPSYS_VM_CMS: 0x04,\n  ZIP_OPSYS_ATARI_ST: 0x05,\n  ZIP_OPSYS_OS_2: 0x06,\n  ZIP_OPSYS_MACINTOSH: 0x07,\n  ZIP_OPSYS_Z_SYSTEM: 0x08,\n  ZIP_OPSYS_CPM: 0x09,\n  ZIP_OPSYS_WINDOWS_NTFS: 0x0a,\n  ZIP_OPSYS_MVS: 0x0b,\n  ZIP_OPSYS_VSE: 0x0c,\n  ZIP_OPSYS_ACORN_RISC: 0x0d,\n  ZIP_OPSYS_VFAT: 0x0e,\n  ZIP_OPSYS_ALTERNATE_MVS: 0x0f,\n  ZIP_OPSYS_BEOS: 0x10,\n  ZIP_OPSYS_TANDEM: 0x11,\n  ZIP_OPSYS_OS_400: 0x12,\n  ZIP_OPSYS_OS_X: 0x13,\n  ZIP_CM_DEFAULT: -1,\n  ZIP_CM_STORE: 0,\n  ZIP_CM_DEFLATE: 8,\n  uint08S: libzip._malloc(1),\n  uint16S: libzip._malloc(2),\n  uint32S: libzip._malloc(4),\n  uint64S: libzip._malloc(8),\n  malloc: libzip._malloc,\n  free: libzip._free,\n  getValue: libzip.getValue,\n  open: libzip.cwrap(`zip_open`, `number`, [`string`, `number`, `number`]),\n  openFromSource: libzip.cwrap(`zip_open_from_source`, `number`, [`number`, `number`, `number`]),\n  close: libzip.cwrap(`zip_close`, `number`, [`number`]),\n  discard: libzip.cwrap(`zip_discard`, null, [`number`]),\n  getError: libzip.cwrap(`zip_get_error`, `number`, [`number`]),\n  getName: libzip.cwrap(`zip_get_name`, `string`, [`number`, `number`, `number`]),\n  getNumEntries: libzip.cwrap(`zip_get_num_entries`, `number`, [`number`, `number`]),\n  stat: libzip.cwrap(`zip_stat`, `number`, [`number`, `string`, `number`, `number`]),\n  statIndex: libzip.cwrap(`zip_stat_index`, `number`, [`number`, ...number64, `number`, `number`]),\n  fopen: libzip.cwrap(`zip_fopen`, `number`, [`number`, `string`, `number`]),\n  fopenIndex: libzip.cwrap(`zip_fopen_index`, `number`, [`number`, ...number64, `number`]),\n  fread: libzip.cwrap(`zip_fread`, `number`, [`number`, `number`, `number`, `number`]),\n  fclose: libzip.cwrap(`zip_fclose`, `number`, [`number`]),\n  dir: {\n    add: libzip.cwrap(`zip_dir_add`, `number`, [`number`, `string`])\n  },\n  file: {\n    add: libzip.cwrap(`zip_file_add`, `number`, [`number`, `string`, `number`, `number`]),\n    getError: libzip.cwrap(`zip_file_get_error`, `number`, [`number`]),\n    getExternalAttributes: libzip.cwrap(`zip_file_get_external_attributes`, `number`, [`number`, ...number64, `number`, `number`, `number`]),\n    setExternalAttributes: libzip.cwrap(`zip_file_set_external_attributes`, `number`, [`number`, ...number64, `number`, `number`, `number`]),\n    setMtime: libzip.cwrap(`zip_file_set_mtime`, `number`, [`number`, ...number64, `number`, `number`]),\n    setCompression: libzip.cwrap(`zip_set_file_compression`, `number`, [`number`, ...number64, `number`, `number`])\n  },\n  error: {\n    initWithCode: libzip.cwrap(`zip_error_init_with_code`, null, [`number`, `number`]),\n    strerror: libzip.cwrap(`zip_error_strerror`, `string`, [`number`])\n  },\n  name: {\n    locate: libzip.cwrap(`zip_name_locate`, `number`, [`number`, `string`, `number`])\n  },\n  source: {\n    fromUnattachedBuffer: libzip.cwrap(`zip_source_buffer_create`, `number`, [`number`, `number`, `number`, `number`]),\n    fromBuffer: libzip.cwrap(`zip_source_buffer`, `number`, [`number`, `number`, ...number64, `number`]),\n    free: libzip.cwrap(`zip_source_free`, null, [`number`]),\n    setMtime: libzip.cwrap(`zip_source_set_mtime`, `number`, [`number`, `number`])\n  },\n  struct: {\n    stat: libzip.cwrap(`zipstruct_stat`, `number`, []),\n    statS: libzip.cwrap(`zipstruct_statS`, `number`, []),\n    statName: libzip.cwrap(`zipstruct_stat_name`, `string`, [`number`]),\n    statIndex: libzip.cwrap(`zipstruct_stat_index`, `number`, [`number`]),\n    statSize: libzip.cwrap(`zipstruct_stat_size`, `number`, [`number`]),\n    statMtime: libzip.cwrap(`zipstruct_stat_mtime`, `number`, [`number`]),\n    error: libzip.cwrap(`zipstruct_error`, `number`, []),\n    errorS: libzip.cwrap(`zipstruct_errorS`, `number`, [])\n  }\n});\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar frozenFs = Object.assign({}, __webpack_require__(2));\nvar Module = typeof Module !== \"undefined\" ? Module : {};\nvar moduleOverrides = {};\nvar key;\nfor (key in Module) {\n  if (Module.hasOwnProperty(key)) {\n    moduleOverrides[key] = Module[key];\n  }\n}\nvar arguments_ = [];\nvar thisProgram = \"./this.program\";\nvar quit_ = function(status, toThrow) {\n  throw toThrow;\n};\nvar ENVIRONMENT_IS_WORKER = false;\nvar ENVIRONMENT_IS_NODE = true;\nvar ENVIRONMENT_HAS_NODE = ENVIRONMENT_IS_NODE;\nvar scriptDirectory = \"\";\nfunction locateFile(path) {\n  if (Module[\"locateFile\"]) {\n    return Module[\"locateFile\"](path, scriptDirectory);\n  }\n  return scriptDirectory + path;\n}\nvar read_, readBinary;\nvar nodeFS;\nvar nodePath;\nif (ENVIRONMENT_IS_NODE) {\n  scriptDirectory = __dirname + \"/\";\n  read_ = function shell_read(filename, binary) {\n    var ret;\n    ret = tryParseAsDataURI(filename);\n    if (ret) {\n      return binary ? ret : ret.toString();\n    }\n    if (!nodeFS) nodeFS = frozenFs;\n    if (!nodePath) nodePath = __webpack_require__(7);\n    filename = nodePath[\"normalize\"](filename);\n    return nodeFS[\"readFileSync\"](filename, binary ? null : \"utf8\");\n  };\n  readBinary = function readBinary(filename) {\n    var ret = read_(filename, true);\n    if (!ret.buffer) {\n      ret = new Uint8Array(ret);\n    }\n    assert(ret.buffer);\n    return ret;\n  };\n  if (process[\"argv\"].length > 1) {\n    thisProgram = process[\"argv\"][1].replace(/\\\\/g, \"/\");\n  }\n  arguments_ = process[\"argv\"].slice(2);\n  if (true) {\n    module[\"exports\"] = Module;\n  }\n  (function() {})(\"uncaughtException\", function(ex) {\n    if (!(ex instanceof ExitStatus)) {\n      throw ex;\n    }\n  });\n  (function() {})(\"unhandledRejection\", abort);\n  quit_ = function(status) {\n    process[\"exit\"](status);\n  };\n  Module[\"inspect\"] = function() {\n    return \"[Emscripten Module object]\";\n  };\n} else {\n}\nvar out = Module[\"print\"] || console.log.bind(console);\nvar err = Module[\"printErr\"] || console.warn.bind(console);\nfor (key in moduleOverrides) {\n  if (moduleOverrides.hasOwnProperty(key)) {\n    Module[key] = moduleOverrides[key];\n  }\n}\nmoduleOverrides = null;\nif (Module[\"arguments\"]) arguments_ = Module[\"arguments\"];\nif (Module[\"thisProgram\"]) thisProgram = Module[\"thisProgram\"];\nif (Module[\"quit\"]) quit_ = Module[\"quit\"];\nfunction dynamicAlloc(size) {\n  var ret = HEAP32[DYNAMICTOP_PTR >> 2];\n  var end = (ret + size + 15) & -16;\n  if (end > _emscripten_get_heap_size()) {\n    abort();\n  }\n  HEAP32[DYNAMICTOP_PTR >> 2] = end;\n  return ret;\n}\nfunction getNativeTypeSize(type) {\n  switch (type) {\n    case \"i1\":\n    case \"i8\":\n      return 1;\n    case \"i16\":\n      return 2;\n    case \"i32\":\n      return 4;\n    case \"i64\":\n      return 8;\n    case \"float\":\n      return 4;\n    case \"double\":\n      return 8;\n    default: {\n      if (type[type.length - 1] === \"*\") {\n        return 4;\n      } else if (type[0] === \"i\") {\n        var bits = parseInt(type.substr(1));\n        assert(\n          bits % 8 === 0,\n          \"getNativeTypeSize invalid bits \" + bits + \", type \" + type\n        );\n        return bits / 8;\n      } else {\n        return 0;\n      }\n    }\n  }\n}\nvar tempRet0 = 0;\nvar setTempRet0 = function(value) {\n  tempRet0 = value;\n};\nvar wasmBinary;\nif (Module[\"wasmBinary\"]) wasmBinary = Module[\"wasmBinary\"];\nvar noExitRuntime;\nif (Module[\"noExitRuntime\"]) noExitRuntime = Module[\"noExitRuntime\"];\nif (typeof WebAssembly !== \"object\") {\n  err(\"no native wasm support detected\");\n}\nfunction setValue(ptr, value, type, noSafe) {\n  type = type || \"i8\";\n  if (type.charAt(type.length - 1) === \"*\") type = \"i32\";\n  switch (type) {\n    case \"i1\":\n      HEAP8[ptr >> 0] = value;\n      break;\n    case \"i8\":\n      HEAP8[ptr >> 0] = value;\n      break;\n    case \"i16\":\n      HEAP16[ptr >> 1] = value;\n      break;\n    case \"i32\":\n      HEAP32[ptr >> 2] = value;\n      break;\n    case \"i64\":\n      (tempI64 = [\n        value >>> 0,\n        ((tempDouble = value),\n        +Math_abs(tempDouble) >= 1\n          ? tempDouble > 0\n            ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) |\n                0) >>>\n              0\n            : ~~+Math_ceil(\n                (tempDouble - +(~~tempDouble >>> 0)) / 4294967296\n              ) >>> 0\n          : 0)\n      ]),\n        (HEAP32[ptr >> 2] = tempI64[0]),\n        (HEAP32[(ptr + 4) >> 2] = tempI64[1]);\n      break;\n    case \"float\":\n      HEAPF32[ptr >> 2] = value;\n      break;\n    case \"double\":\n      HEAPF64[ptr >> 3] = value;\n      break;\n    default:\n      abort(\"invalid type for setValue: \" + type);\n  }\n}\nfunction getValue(ptr, type, noSafe) {\n  type = type || \"i8\";\n  if (type.charAt(type.length - 1) === \"*\") type = \"i32\";\n  switch (type) {\n    case \"i1\":\n      return HEAP8[ptr >> 0];\n    case \"i8\":\n      return HEAP8[ptr >> 0];\n    case \"i16\":\n      return HEAP16[ptr >> 1];\n    case \"i32\":\n      return HEAP32[ptr >> 2];\n    case \"i64\":\n      return HEAP32[ptr >> 2];\n    case \"float\":\n      return HEAPF32[ptr >> 2];\n    case \"double\":\n      return HEAPF64[ptr >> 3];\n    default:\n      abort(\"invalid type for getValue: \" + type);\n  }\n  return null;\n}\nvar wasmMemory;\nvar wasmTable = new WebAssembly.Table({\n  initial: 31,\n  maximum: 31 + 0,\n  element: \"anyfunc\"\n});\nvar ABORT = false;\nvar EXITSTATUS = 0;\nfunction assert(condition, text) {\n  if (!condition) {\n    abort(\"Assertion failed: \" + text);\n  }\n}\nfunction getCFunc(ident) {\n  var func = Module[\"_\" + ident];\n  assert(\n    func,\n    \"Cannot call unknown function \" + ident + \", make sure it is exported\"\n  );\n  return func;\n}\nfunction ccall(ident, returnType, argTypes, args, opts) {\n  var toC = {\n    string: function(str) {\n      var ret = 0;\n      if (str !== null && str !== undefined && str !== 0) {\n        var len = (str.length << 2) + 1;\n        ret = stackAlloc(len);\n        stringToUTF8(str, ret, len);\n      }\n      return ret;\n    },\n    array: function(arr) {\n      var ret = stackAlloc(arr.length);\n      writeArrayToMemory(arr, ret);\n      return ret;\n    }\n  };\n  function convertReturnValue(ret) {\n    if (returnType === \"string\") return UTF8ToString(ret);\n    if (returnType === \"boolean\") return Boolean(ret);\n    return ret;\n  }\n  var func = getCFunc(ident);\n  var cArgs = [];\n  var stack = 0;\n  if (args) {\n    for (var i = 0; i < args.length; i++) {\n      var converter = toC[argTypes[i]];\n      if (converter) {\n        if (stack === 0) stack = stackSave();\n        cArgs[i] = converter(args[i]);\n      } else {\n        cArgs[i] = args[i];\n      }\n    }\n  }\n  var ret = func.apply(null, cArgs);\n  ret = convertReturnValue(ret);\n  if (stack !== 0) stackRestore(stack);\n  return ret;\n}\nfunction cwrap(ident, returnType, argTypes, opts) {\n  argTypes = argTypes || [];\n  var numericArgs = argTypes.every(function(type) {\n    return type === \"number\";\n  });\n  var numericRet = returnType !== \"string\";\n  if (numericRet && numericArgs && !opts) {\n    return getCFunc(ident);\n  }\n  return function() {\n    return ccall(ident, returnType, argTypes, arguments, opts);\n  };\n}\nvar ALLOC_NORMAL = 0;\nvar ALLOC_NONE = 3;\nfunction allocate(slab, types, allocator, ptr) {\n  var zeroinit, size;\n  if (typeof slab === \"number\") {\n    zeroinit = true;\n    size = slab;\n  } else {\n    zeroinit = false;\n    size = slab.length;\n  }\n  var singleType = typeof types === \"string\" ? types : null;\n  var ret;\n  if (allocator == ALLOC_NONE) {\n    ret = ptr;\n  } else {\n    ret = [_malloc, stackAlloc, dynamicAlloc][allocator](\n      Math.max(size, singleType ? 1 : types.length)\n    );\n  }\n  if (zeroinit) {\n    var stop;\n    ptr = ret;\n    assert((ret & 3) == 0);\n    stop = ret + (size & ~3);\n    for (; ptr < stop; ptr += 4) {\n      HEAP32[ptr >> 2] = 0;\n    }\n    stop = ret + size;\n    while (ptr < stop) {\n      HEAP8[ptr++ >> 0] = 0;\n    }\n    return ret;\n  }\n  if (singleType === \"i8\") {\n    if (slab.subarray || slab.slice) {\n      HEAPU8.set(slab, ret);\n    } else {\n      HEAPU8.set(new Uint8Array(slab), ret);\n    }\n    return ret;\n  }\n  var i = 0,\n    type,\n    typeSize,\n    previousType;\n  while (i < size) {\n    var curr = slab[i];\n    type = singleType || types[i];\n    if (type === 0) {\n      i++;\n      continue;\n    }\n    if (type == \"i64\") type = \"i32\";\n    setValue(ret + i, curr, type);\n    if (previousType !== type) {\n      typeSize = getNativeTypeSize(type);\n      previousType = type;\n    }\n    i += typeSize;\n  }\n  return ret;\n}\nvar UTF8Decoder =\n  typeof TextDecoder !== \"undefined\" ? new TextDecoder(\"utf8\") : undefined;\nfunction UTF8ArrayToString(u8Array, idx, maxBytesToRead) {\n  var endIdx = idx + maxBytesToRead;\n  var endPtr = idx;\n  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {\n    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));\n  } else {\n    var str = \"\";\n    while (idx < endPtr) {\n      var u0 = u8Array[idx++];\n      if (!(u0 & 128)) {\n        str += String.fromCharCode(u0);\n        continue;\n      }\n      var u1 = u8Array[idx++] & 63;\n      if ((u0 & 224) == 192) {\n        str += String.fromCharCode(((u0 & 31) << 6) | u1);\n        continue;\n      }\n      var u2 = u8Array[idx++] & 63;\n      if ((u0 & 240) == 224) {\n        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\n      } else {\n        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);\n      }\n      if (u0 < 65536) {\n        str += String.fromCharCode(u0);\n      } else {\n        var ch = u0 - 65536;\n        str += String.fromCharCode(55296 | (ch >> 10), 56320 | (ch & 1023));\n      }\n    }\n  }\n  return str;\n}\nfunction UTF8ToString(ptr, maxBytesToRead) {\n  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : \"\";\n}\nfunction stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {\n  if (!(maxBytesToWrite > 0)) return 0;\n  var startIdx = outIdx;\n  var endIdx = outIdx + maxBytesToWrite - 1;\n  for (var i = 0; i < str.length; ++i) {\n    var u = str.charCodeAt(i);\n    if (u >= 55296 && u <= 57343) {\n      var u1 = str.charCodeAt(++i);\n      u = (65536 + ((u & 1023) << 10)) | (u1 & 1023);\n    }\n    if (u <= 127) {\n      if (outIdx >= endIdx) break;\n      outU8Array[outIdx++] = u;\n    } else if (u <= 2047) {\n      if (outIdx + 1 >= endIdx) break;\n      outU8Array[outIdx++] = 192 | (u >> 6);\n      outU8Array[outIdx++] = 128 | (u & 63);\n    } else if (u <= 65535) {\n      if (outIdx + 2 >= endIdx) break;\n      outU8Array[outIdx++] = 224 | (u >> 12);\n      outU8Array[outIdx++] = 128 | ((u >> 6) & 63);\n      outU8Array[outIdx++] = 128 | (u & 63);\n    } else {\n      if (outIdx + 3 >= endIdx) break;\n      outU8Array[outIdx++] = 240 | (u >> 18);\n      outU8Array[outIdx++] = 128 | ((u >> 12) & 63);\n      outU8Array[outIdx++] = 128 | ((u >> 6) & 63);\n      outU8Array[outIdx++] = 128 | (u & 63);\n    }\n  }\n  outU8Array[outIdx] = 0;\n  return outIdx - startIdx;\n}\nfunction stringToUTF8(str, outPtr, maxBytesToWrite) {\n  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);\n}\nfunction lengthBytesUTF8(str) {\n  var len = 0;\n  for (var i = 0; i < str.length; ++i) {\n    var u = str.charCodeAt(i);\n    if (u >= 55296 && u <= 57343)\n      u = (65536 + ((u & 1023) << 10)) | (str.charCodeAt(++i) & 1023);\n    if (u <= 127) ++len;\n    else if (u <= 2047) len += 2;\n    else if (u <= 65535) len += 3;\n    else len += 4;\n  }\n  return len;\n}\nvar UTF16Decoder =\n  typeof TextDecoder !== \"undefined\" ? new TextDecoder(\"utf-16le\") : undefined;\nfunction writeArrayToMemory(array, buffer) {\n  HEAP8.set(array, buffer);\n}\nvar WASM_PAGE_SIZE = 65536;\nfunction alignUp(x, multiple) {\n  if (x % multiple > 0) {\n    x += multiple - (x % multiple);\n  }\n  return x;\n}\nvar buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;\nfunction updateGlobalBufferAndViews(buf) {\n  buffer = buf;\n  Module[\"HEAP8\"] = HEAP8 = new Int8Array(buf);\n  Module[\"HEAP16\"] = HEAP16 = new Int16Array(buf);\n  Module[\"HEAP32\"] = HEAP32 = new Int32Array(buf);\n  Module[\"HEAPU8\"] = HEAPU8 = new Uint8Array(buf);\n  Module[\"HEAPU16\"] = HEAPU16 = new Uint16Array(buf);\n  Module[\"HEAPU32\"] = HEAPU32 = new Uint32Array(buf);\n  Module[\"HEAPF32\"] = HEAPF32 = new Float32Array(buf);\n  Module[\"HEAPF64\"] = HEAPF64 = new Float64Array(buf);\n}\nvar DYNAMIC_BASE = 5263680,\n  DYNAMICTOP_PTR = 20640;\nvar INITIAL_TOTAL_MEMORY = Module[\"TOTAL_MEMORY\"] || 16777216;\nif (Module[\"wasmMemory\"]) {\n  wasmMemory = Module[\"wasmMemory\"];\n} else {\n  wasmMemory = new WebAssembly.Memory({\n    initial: INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE\n  });\n}\nif (wasmMemory) {\n  buffer = wasmMemory.buffer;\n}\nINITIAL_TOTAL_MEMORY = buffer.byteLength;\nupdateGlobalBufferAndViews(buffer);\nHEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;\nfunction callRuntimeCallbacks(callbacks) {\n  while (callbacks.length > 0) {\n    var callback = callbacks.shift();\n    if (typeof callback == \"function\") {\n      callback();\n      continue;\n    }\n    var func = callback.func;\n    if (typeof func === \"number\") {\n      if (callback.arg === undefined) {\n        Module[\"dynCall_v\"](func);\n      } else {\n        Module[\"dynCall_vi\"](func, callback.arg);\n      }\n    } else {\n      func(callback.arg === undefined ? null : callback.arg);\n    }\n  }\n}\nvar __ATPRERUN__ = [];\nvar __ATINIT__ = [];\nvar __ATMAIN__ = [];\nvar __ATPOSTRUN__ = [];\nvar runtimeInitialized = false;\nfunction preRun() {\n  if (Module[\"preRun\"]) {\n    if (typeof Module[\"preRun\"] == \"function\")\n      Module[\"preRun\"] = [Module[\"preRun\"]];\n    while (Module[\"preRun\"].length) {\n      addOnPreRun(Module[\"preRun\"].shift());\n    }\n  }\n  callRuntimeCallbacks(__ATPRERUN__);\n}\nfunction initRuntime() {\n  runtimeInitialized = true;\n  if (!Module[\"noFSInit\"] && !FS.init.initialized) FS.init();\n  TTY.init();\n  callRuntimeCallbacks(__ATINIT__);\n}\nfunction preMain() {\n  FS.ignorePermissions = false;\n  callRuntimeCallbacks(__ATMAIN__);\n}\nfunction postRun() {\n  if (Module[\"postRun\"]) {\n    if (typeof Module[\"postRun\"] == \"function\")\n      Module[\"postRun\"] = [Module[\"postRun\"]];\n    while (Module[\"postRun\"].length) {\n      addOnPostRun(Module[\"postRun\"].shift());\n    }\n  }\n  callRuntimeCallbacks(__ATPOSTRUN__);\n}\nfunction addOnPreRun(cb) {\n  __ATPRERUN__.unshift(cb);\n}\nfunction addOnPostRun(cb) {\n  __ATPOSTRUN__.unshift(cb);\n}\nvar Math_abs = Math.abs;\nvar Math_ceil = Math.ceil;\nvar Math_floor = Math.floor;\nvar Math_min = Math.min;\nvar runDependencies = 0;\nvar runDependencyWatcher = null;\nvar dependenciesFulfilled = null;\nfunction getUniqueRunDependency(id) {\n  return id;\n}\nfunction addRunDependency(id) {\n  runDependencies++;\n  if (Module[\"monitorRunDependencies\"]) {\n    Module[\"monitorRunDependencies\"](runDependencies);\n  }\n}\nfunction removeRunDependency(id) {\n  runDependencies--;\n  if (Module[\"monitorRunDependencies\"]) {\n    Module[\"monitorRunDependencies\"](runDependencies);\n  }\n  if (runDependencies == 0) {\n    if (runDependencyWatcher !== null) {\n      clearInterval(runDependencyWatcher);\n      runDependencyWatcher = null;\n    }\n    if (dependenciesFulfilled) {\n      var callback = dependenciesFulfilled;\n      dependenciesFulfilled = null;\n      callback();\n    }\n  }\n}\nModule[\"preloadedImages\"] = {};\nModule[\"preloadedAudios\"] = {};\nfunction abort(what) {\n  if (Module[\"onAbort\"]) {\n    Module[\"onAbort\"](what);\n  }\n  what += \"\";\n  out(what);\n  err(what);\n  ABORT = true;\n  EXITSTATUS = 1;\n  what = \"abort(\" + what + \"). Build with -s ASSERTIONS=1 for more info.\";\n  throw new WebAssembly.RuntimeError(what);\n}\nvar dataURIPrefix = \"data:application/octet-stream;base64,\";\nfunction isDataURI(filename) {\n  return String.prototype.startsWith\n    ? filename.startsWith(dataURIPrefix)\n    : filename.indexOf(dataURIPrefix) === 0;\n}\nvar wasmBinaryFile =\n  \"data:application/octet-stream;base64,\";\nif (!isDataURI(wasmBinaryFile)) {\n  wasmBinaryFile = locateFile(wasmBinaryFile);\n}\nfunction getBinary() {\n  try {\n    if (wasmBinary) {\n      return new Uint8Array(wasmBinary);\n    }\n    var binary = tryParseAsDataURI(wasmBinaryFile);\n    if (binary) {\n      return binary;\n    }\n    if (readBinary) {\n      return readBinary(wasmBinaryFile);\n    } else {\n      throw \"sync fetching of the wasm failed: you can preload it to Module['wasmBinary'] manually, or emcc.py will do that for you when generating HTML (but not JS)\";\n    }\n  } catch (err) {\n    abort(err);\n  }\n}\nfunction createWasm() {\n  var info = { env: asmLibraryArg, wasi_unstable: asmLibraryArg };\n  function receiveInstance(instance, module) {\n    var exports = instance.exports;\n    Module[\"asm\"] = exports;\n    removeRunDependency(\"wasm-instantiate\");\n  }\n  addRunDependency(\"wasm-instantiate\");\n  function instantiateSync() {\n    var instance;\n    var module;\n    var binary;\n    try {\n      binary = getBinary();\n      module = new WebAssembly.Module(binary);\n      instance = new WebAssembly.Instance(module, info);\n    } catch (e) {\n      var str = e.toString();\n      err(\"failed to compile wasm module: \" + str);\n      if (\n        str.indexOf(\"imported Memory\") >= 0 ||\n        str.indexOf(\"memory import\") >= 0\n      ) {\n        err(\n          \"Memory size incompatibility issues may be due to changing TOTAL_MEMORY at runtime to something too large. Use ALLOW_MEMORY_GROWTH to allow any size memory (and also make sure not to set TOTAL_MEMORY at runtime to something smaller than it was at compile time).\"\n        );\n      }\n      throw e;\n    }\n    receiveInstance(instance, module);\n  }\n  if (Module[\"instantiateWasm\"]) {\n    try {\n      var exports = Module[\"instantiateWasm\"](info, receiveInstance);\n      return exports;\n    } catch (e) {\n      err(\"Module.instantiateWasm callback failed with error: \" + e);\n      return false;\n    }\n  }\n  instantiateSync();\n  return Module[\"asm\"];\n}\nvar tempDouble;\nvar tempI64;\n__ATINIT__.push({\n  func: function() {\n    ___wasm_call_ctors();\n  }\n});\nfunction demangle(func) {\n  return func;\n}\nfunction demangleAll(text) {\n  var regex = /\\b_Z[\\w\\d_]+/g;\n  return text.replace(regex, function(x) {\n    var y = demangle(x);\n    return x === y ? x : y + \" [\" + x + \"]\";\n  });\n}\nfunction jsStackTrace() {\n  var err = new Error();\n  if (!err.stack) {\n    try {\n      throw new Error(0);\n    } catch (e) {\n      err = e;\n    }\n    if (!err.stack) {\n      return \"(no stack trace available)\";\n    }\n  }\n  return err.stack.toString();\n}\nfunction stackTrace() {\n  var js = jsStackTrace();\n  if (Module[\"extraStackTrace\"]) js += \"\\n\" + Module[\"extraStackTrace\"]();\n  return demangleAll(js);\n}\nfunction ___lock() {}\nvar PATH = {\n  splitPath: function(filename) {\n    var splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n    return splitPathRe.exec(filename).slice(1);\n  },\n  normalizeArray: function(parts, allowAboveRoot) {\n    var up = 0;\n    for (var i = parts.length - 1; i >= 0; i--) {\n      var last = parts[i];\n      if (last === \".\") {\n        parts.splice(i, 1);\n      } else if (last === \"..\") {\n        parts.splice(i, 1);\n        up++;\n      } else if (up) {\n        parts.splice(i, 1);\n        up--;\n      }\n    }\n    if (allowAboveRoot) {\n      for (; up; up--) {\n        parts.unshift(\"..\");\n      }\n    }\n    return parts;\n  },\n  normalize: function(path) {\n    var isAbsolute = path.charAt(0) === \"/\",\n      trailingSlash = path.substr(-1) === \"/\";\n    path = PATH.normalizeArray(\n      path.split(\"/\").filter(function(p) {\n        return !!p;\n      }),\n      !isAbsolute\n    ).join(\"/\");\n    if (!path && !isAbsolute) {\n      path = \".\";\n    }\n    if (path && trailingSlash) {\n      path += \"/\";\n    }\n    return (isAbsolute ? \"/\" : \"\") + path;\n  },\n  dirname: function(path) {\n    var result = PATH.splitPath(path),\n      root = result[0],\n      dir = result[1];\n    if (!root && !dir) {\n      return \".\";\n    }\n    if (dir) {\n      dir = dir.substr(0, dir.length - 1);\n    }\n    return root + dir;\n  },\n  basename: function(path) {\n    if (path === \"/\") return \"/\";\n    var lastSlash = path.lastIndexOf(\"/\");\n    if (lastSlash === -1) return path;\n    return path.substr(lastSlash + 1);\n  },\n  extname: function(path) {\n    return PATH.splitPath(path)[3];\n  },\n  join: function() {\n    var paths = Array.prototype.slice.call(arguments, 0);\n    return PATH.normalize(paths.join(\"/\"));\n  },\n  join2: function(l, r) {\n    return PATH.normalize(l + \"/\" + r);\n  }\n};\nfunction ___setErrNo(value) {\n  if (Module[\"___errno_location\"])\n    HEAP32[Module[\"___errno_location\"]() >> 2] = value;\n  return value;\n}\nvar PATH_FS = {\n  resolve: function() {\n    var resolvedPath = \"\",\n      resolvedAbsolute = false;\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path = i >= 0 ? arguments[i] : FS.cwd();\n      if (typeof path !== \"string\") {\n        throw new TypeError(\"Arguments to path.resolve must be strings\");\n      } else if (!path) {\n        return \"\";\n      }\n      resolvedPath = path + \"/\" + resolvedPath;\n      resolvedAbsolute = path.charAt(0) === \"/\";\n    }\n    resolvedPath = PATH.normalizeArray(\n      resolvedPath.split(\"/\").filter(function(p) {\n        return !!p;\n      }),\n      !resolvedAbsolute\n    ).join(\"/\");\n    return (resolvedAbsolute ? \"/\" : \"\") + resolvedPath || \".\";\n  },\n  relative: function(from, to) {\n    from = PATH_FS.resolve(from).substr(1);\n    to = PATH_FS.resolve(to).substr(1);\n    function trim(arr) {\n      var start = 0;\n      for (; start < arr.length; start++) {\n        if (arr[start] !== \"\") break;\n      }\n      var end = arr.length - 1;\n      for (; end >= 0; end--) {\n        if (arr[end] !== \"\") break;\n      }\n      if (start > end) return [];\n      return arr.slice(start, end - start + 1);\n    }\n    var fromParts = trim(from.split(\"/\"));\n    var toParts = trim(to.split(\"/\"));\n    var length = Math.min(fromParts.length, toParts.length);\n    var samePartsLength = length;\n    for (var i = 0; i < length; i++) {\n      if (fromParts[i] !== toParts[i]) {\n        samePartsLength = i;\n        break;\n      }\n    }\n    var outputParts = [];\n    for (var i = samePartsLength; i < fromParts.length; i++) {\n      outputParts.push(\"..\");\n    }\n    outputParts = outputParts.concat(toParts.slice(samePartsLength));\n    return outputParts.join(\"/\");\n  }\n};\nvar TTY = {\n  ttys: [],\n  init: function() {},\n  shutdown: function() {},\n  register: function(dev, ops) {\n    TTY.ttys[dev] = { input: [], output: [], ops: ops };\n    FS.registerDevice(dev, TTY.stream_ops);\n  },\n  stream_ops: {\n    open: function(stream) {\n      var tty = TTY.ttys[stream.node.rdev];\n      if (!tty) {\n        throw new FS.ErrnoError(43);\n      }\n      stream.tty = tty;\n      stream.seekable = false;\n    },\n    close: function(stream) {\n      stream.tty.ops.flush(stream.tty);\n    },\n    flush: function(stream) {\n      stream.tty.ops.flush(stream.tty);\n    },\n    read: function(stream, buffer, offset, length, pos) {\n      if (!stream.tty || !stream.tty.ops.get_char) {\n        throw new FS.ErrnoError(60);\n      }\n      var bytesRead = 0;\n      for (var i = 0; i < length; i++) {\n        var result;\n        try {\n          result = stream.tty.ops.get_char(stream.tty);\n        } catch (e) {\n          throw new FS.ErrnoError(29);\n        }\n        if (result === undefined && bytesRead === 0) {\n          throw new FS.ErrnoError(6);\n        }\n        if (result === null || result === undefined) break;\n        bytesRead++;\n        buffer[offset + i] = result;\n      }\n      if (bytesRead) {\n        stream.node.timestamp = Date.now();\n      }\n      return bytesRead;\n    },\n    write: function(stream, buffer, offset, length, pos) {\n      if (!stream.tty || !stream.tty.ops.put_char) {\n        throw new FS.ErrnoError(60);\n      }\n      try {\n        for (var i = 0; i < length; i++) {\n          stream.tty.ops.put_char(stream.tty, buffer[offset + i]);\n        }\n      } catch (e) {\n        throw new FS.ErrnoError(29);\n      }\n      if (length) {\n        stream.node.timestamp = Date.now();\n      }\n      return i;\n    }\n  },\n  default_tty_ops: {\n    get_char: function(tty) {\n      if (!tty.input.length) {\n        var result = null;\n        if (ENVIRONMENT_IS_NODE) {\n          var BUFSIZE = 256;\n          var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);\n          var bytesRead = 0;\n          try {\n            bytesRead = nodeFS.readSync(\n              process.stdin.fd,\n              buf,\n              0,\n              BUFSIZE,\n              null\n            );\n          } catch (e) {\n            if (e.toString().indexOf(\"EOF\") != -1) bytesRead = 0;\n            else throw e;\n          }\n          if (bytesRead > 0) {\n            result = buf.slice(0, bytesRead).toString(\"utf-8\");\n          } else {\n            result = null;\n          }\n        } else if (\n          typeof window != \"undefined\" &&\n          typeof window.prompt == \"function\"\n        ) {\n          result = window.prompt(\"Input: \");\n          if (result !== null) {\n            result += \"\\n\";\n          }\n        } else if (typeof readline == \"function\") {\n          result = readline();\n          if (result !== null) {\n            result += \"\\n\";\n          }\n        }\n        if (!result) {\n          return null;\n        }\n        tty.input = intArrayFromString(result, true);\n      }\n      return tty.input.shift();\n    },\n    put_char: function(tty, val) {\n      if (val === null || val === 10) {\n        out(UTF8ArrayToString(tty.output, 0));\n        tty.output = [];\n      } else {\n        if (val != 0) tty.output.push(val);\n      }\n    },\n    flush: function(tty) {\n      if (tty.output && tty.output.length > 0) {\n        out(UTF8ArrayToString(tty.output, 0));\n        tty.output = [];\n      }\n    }\n  },\n  default_tty1_ops: {\n    put_char: function(tty, val) {\n      if (val === null || val === 10) {\n        err(UTF8ArrayToString(tty.output, 0));\n        tty.output = [];\n      } else {\n        if (val != 0) tty.output.push(val);\n      }\n    },\n    flush: function(tty) {\n      if (tty.output && tty.output.length > 0) {\n        err(UTF8ArrayToString(tty.output, 0));\n        tty.output = [];\n      }\n    }\n  }\n};\nvar MEMFS = {\n  ops_table: null,\n  mount: function(mount) {\n    return MEMFS.createNode(null, \"/\", 16384 | 511, 0);\n  },\n  createNode: function(parent, name, mode, dev) {\n    if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {\n      throw new FS.ErrnoError(63);\n    }\n    if (!MEMFS.ops_table) {\n      MEMFS.ops_table = {\n        dir: {\n          node: {\n            getattr: MEMFS.node_ops.getattr,\n            setattr: MEMFS.node_ops.setattr,\n            lookup: MEMFS.node_ops.lookup,\n            mknod: MEMFS.node_ops.mknod,\n            rename: MEMFS.node_ops.rename,\n            unlink: MEMFS.node_ops.unlink,\n            rmdir: MEMFS.node_ops.rmdir,\n            readdir: MEMFS.node_ops.readdir,\n            symlink: MEMFS.node_ops.symlink\n          },\n          stream: { llseek: MEMFS.stream_ops.llseek }\n        },\n        file: {\n          node: {\n            getattr: MEMFS.node_ops.getattr,\n            setattr: MEMFS.node_ops.setattr\n          },\n          stream: {\n            llseek: MEMFS.stream_ops.llseek,\n            read: MEMFS.stream_ops.read,\n            write: MEMFS.stream_ops.write,\n            allocate: MEMFS.stream_ops.allocate,\n            mmap: MEMFS.stream_ops.mmap,\n            msync: MEMFS.stream_ops.msync\n          }\n        },\n        link: {\n          node: {\n            getattr: MEMFS.node_ops.getattr,\n            setattr: MEMFS.node_ops.setattr,\n            readlink: MEMFS.node_ops.readlink\n          },\n          stream: {}\n        },\n        chrdev: {\n          node: {\n            getattr: MEMFS.node_ops.getattr,\n            setattr: MEMFS.node_ops.setattr\n          },\n          stream: FS.chrdev_stream_ops\n        }\n      };\n    }\n    var node = FS.createNode(parent, name, mode, dev);\n    if (FS.isDir(node.mode)) {\n      node.node_ops = MEMFS.ops_table.dir.node;\n      node.stream_ops = MEMFS.ops_table.dir.stream;\n      node.contents = {};\n    } else if (FS.isFile(node.mode)) {\n      node.node_ops = MEMFS.ops_table.file.node;\n      node.stream_ops = MEMFS.ops_table.file.stream;\n      node.usedBytes = 0;\n      node.contents = null;\n    } else if (FS.isLink(node.mode)) {\n      node.node_ops = MEMFS.ops_table.link.node;\n      node.stream_ops = MEMFS.ops_table.link.stream;\n    } else if (FS.isChrdev(node.mode)) {\n      node.node_ops = MEMFS.ops_table.chrdev.node;\n      node.stream_ops = MEMFS.ops_table.chrdev.stream;\n    }\n    node.timestamp = Date.now();\n    if (parent) {\n      parent.contents[name] = node;\n    }\n    return node;\n  },\n  getFileDataAsRegularArray: function(node) {\n    if (node.contents && node.contents.subarray) {\n      var arr = [];\n      for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);\n      return arr;\n    }\n    return node.contents;\n  },\n  getFileDataAsTypedArray: function(node) {\n    if (!node.contents) return new Uint8Array();\n    if (node.contents.subarray)\n      return node.contents.subarray(0, node.usedBytes);\n    return new Uint8Array(node.contents);\n  },\n  expandFileStorage: function(node, newCapacity) {\n    var prevCapacity = node.contents ? node.contents.length : 0;\n    if (prevCapacity >= newCapacity) return;\n    var CAPACITY_DOUBLING_MAX = 1024 * 1024;\n    newCapacity = Math.max(\n      newCapacity,\n      (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125)) | 0\n    );\n    if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);\n    var oldContents = node.contents;\n    node.contents = new Uint8Array(newCapacity);\n    if (node.usedBytes > 0)\n      node.contents.set(oldContents.subarray(0, node.usedBytes), 0);\n    return;\n  },\n  resizeFileStorage: function(node, newSize) {\n    if (node.usedBytes == newSize) return;\n    if (newSize == 0) {\n      node.contents = null;\n      node.usedBytes = 0;\n      return;\n    }\n    if (!node.contents || node.contents.subarray) {\n      var oldContents = node.contents;\n      node.contents = new Uint8Array(new ArrayBuffer(newSize));\n      if (oldContents) {\n        node.contents.set(\n          oldContents.subarray(0, Math.min(newSize, node.usedBytes))\n        );\n      }\n      node.usedBytes = newSize;\n      return;\n    }\n    if (!node.contents) node.contents = [];\n    if (node.contents.length > newSize) node.contents.length = newSize;\n    else while (node.contents.length < newSize) node.contents.push(0);\n    node.usedBytes = newSize;\n  },\n  node_ops: {\n    getattr: function(node) {\n      var attr = {};\n      attr.dev = FS.isChrdev(node.mode) ? node.id : 1;\n      attr.ino = node.id;\n      attr.mode = node.mode;\n      attr.nlink = 1;\n      attr.uid = 0;\n      attr.gid = 0;\n      attr.rdev = node.rdev;\n      if (FS.isDir(node.mode)) {\n        attr.size = 4096;\n      } else if (FS.isFile(node.mode)) {\n        attr.size = node.usedBytes;\n      } else if (FS.isLink(node.mode)) {\n        attr.size = node.link.length;\n      } else {\n        attr.size = 0;\n      }\n      attr.atime = new Date(node.timestamp);\n      attr.mtime = new Date(node.timestamp);\n      attr.ctime = new Date(node.timestamp);\n      attr.blksize = 4096;\n      attr.blocks = Math.ceil(attr.size / attr.blksize);\n      return attr;\n    },\n    setattr: function(node, attr) {\n      if (attr.mode !== undefined) {\n        node.mode = attr.mode;\n      }\n      if (attr.timestamp !== undefined) {\n        node.timestamp = attr.timestamp;\n      }\n      if (attr.size !== undefined) {\n        MEMFS.resizeFileStorage(node, attr.size);\n      }\n    },\n    lookup: function(parent, name) {\n      throw FS.genericErrors[44];\n    },\n    mknod: function(parent, name, mode, dev) {\n      return MEMFS.createNode(parent, name, mode, dev);\n    },\n    rename: function(old_node, new_dir, new_name) {\n      if (FS.isDir(old_node.mode)) {\n        var new_node;\n        try {\n          new_node = FS.lookupNode(new_dir, new_name);\n        } catch (e) {}\n        if (new_node) {\n          for (var i in new_node.contents) {\n            throw new FS.ErrnoError(55);\n          }\n        }\n      }\n      delete old_node.parent.contents[old_node.name];\n      old_node.name = new_name;\n      new_dir.contents[new_name] = old_node;\n      old_node.parent = new_dir;\n    },\n    unlink: function(parent, name) {\n      delete parent.contents[name];\n    },\n    rmdir: function(parent, name) {\n      var node = FS.lookupNode(parent, name);\n      for (var i in node.contents) {\n        throw new FS.ErrnoError(55);\n      }\n      delete parent.contents[name];\n    },\n    readdir: function(node) {\n      var entries = [\".\", \"..\"];\n      for (var key in node.contents) {\n        if (!node.contents.hasOwnProperty(key)) {\n          continue;\n        }\n        entries.push(key);\n      }\n      return entries;\n    },\n    symlink: function(parent, newname, oldpath) {\n      var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);\n      node.link = oldpath;\n      return node;\n    },\n    readlink: function(node) {\n      if (!FS.isLink(node.mode)) {\n        throw new FS.ErrnoError(28);\n      }\n      return node.link;\n    }\n  },\n  stream_ops: {\n    read: function(stream, buffer, offset, length, position) {\n      var contents = stream.node.contents;\n      if (position >= stream.node.usedBytes) return 0;\n      var size = Math.min(stream.node.usedBytes - position, length);\n      if (size > 8 && contents.subarray) {\n        buffer.set(contents.subarray(position, position + size), offset);\n      } else {\n        for (var i = 0; i < size; i++)\n          buffer[offset + i] = contents[position + i];\n      }\n      return size;\n    },\n    write: function(stream, buffer, offset, length, position, canOwn) {\n      if (buffer.buffer === HEAP8.buffer) {\n        canOwn = false;\n      }\n      if (!length) return 0;\n      var node = stream.node;\n      node.timestamp = Date.now();\n      if (buffer.subarray && (!node.contents || node.contents.subarray)) {\n        if (canOwn) {\n          node.contents = buffer.subarray(offset, offset + length);\n          node.usedBytes = length;\n          return length;\n        } else if (node.usedBytes === 0 && position === 0) {\n          node.contents = new Uint8Array(\n            buffer.subarray(offset, offset + length)\n          );\n          node.usedBytes = length;\n          return length;\n        } else if (position + length <= node.usedBytes) {\n          node.contents.set(buffer.subarray(offset, offset + length), position);\n          return length;\n        }\n      }\n      MEMFS.expandFileStorage(node, position + length);\n      if (node.contents.subarray && buffer.subarray)\n        node.contents.set(buffer.subarray(offset, offset + length), position);\n      else {\n        for (var i = 0; i < length; i++) {\n          node.contents[position + i] = buffer[offset + i];\n        }\n      }\n      node.usedBytes = Math.max(node.usedBytes, position + length);\n      return length;\n    },\n    llseek: function(stream, offset, whence) {\n      var position = offset;\n      if (whence === 1) {\n        position += stream.position;\n      } else if (whence === 2) {\n        if (FS.isFile(stream.node.mode)) {\n          position += stream.node.usedBytes;\n        }\n      }\n      if (position < 0) {\n        throw new FS.ErrnoError(28);\n      }\n      return position;\n    },\n    allocate: function(stream, offset, length) {\n      MEMFS.expandFileStorage(stream.node, offset + length);\n      stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);\n    },\n    mmap: function(stream, buffer, offset, length, position, prot, flags) {\n      if (!FS.isFile(stream.node.mode)) {\n        throw new FS.ErrnoError(43);\n      }\n      var ptr;\n      var allocated;\n      var contents = stream.node.contents;\n      if (!(flags & 2) && contents.buffer === buffer.buffer) {\n        allocated = false;\n        ptr = contents.byteOffset;\n      } else {\n        if (position > 0 || position + length < stream.node.usedBytes) {\n          if (contents.subarray) {\n            contents = contents.subarray(position, position + length);\n          } else {\n            contents = Array.prototype.slice.call(\n              contents,\n              position,\n              position + length\n            );\n          }\n        }\n        allocated = true;\n        var fromHeap = buffer.buffer == HEAP8.buffer;\n        ptr = _malloc(length);\n        if (!ptr) {\n          throw new FS.ErrnoError(48);\n        }\n        (fromHeap ? HEAP8 : buffer).set(contents, ptr);\n      }\n      return { ptr: ptr, allocated: allocated };\n    },\n    msync: function(stream, buffer, offset, length, mmapFlags) {\n      if (!FS.isFile(stream.node.mode)) {\n        throw new FS.ErrnoError(43);\n      }\n      if (mmapFlags & 2) {\n        return 0;\n      }\n      var bytesWritten = MEMFS.stream_ops.write(\n        stream,\n        buffer,\n        0,\n        length,\n        offset,\n        false\n      );\n      return 0;\n    }\n  }\n};\nvar ERRNO_CODES = {\n  EPERM: 63,\n  ENOENT: 44,\n  ESRCH: 71,\n  EINTR: 27,\n  EIO: 29,\n  ENXIO: 60,\n  E2BIG: 1,\n  ENOEXEC: 45,\n  EBADF: 8,\n  ECHILD: 12,\n  EAGAIN: 6,\n  EWOULDBLOCK: 6,\n  ENOMEM: 48,\n  EACCES: 2,\n  EFAULT: 21,\n  ENOTBLK: 105,\n  EBUSY: 10,\n  EEXIST: 20,\n  EXDEV: 75,\n  ENODEV: 43,\n  ENOTDIR: 54,\n  EISDIR: 31,\n  EINVAL: 28,\n  ENFILE: 41,\n  EMFILE: 33,\n  ENOTTY: 59,\n  ETXTBSY: 74,\n  EFBIG: 22,\n  ENOSPC: 51,\n  ESPIPE: 70,\n  EROFS: 69,\n  EMLINK: 34,\n  EPIPE: 64,\n  EDOM: 18,\n  ERANGE: 68,\n  ENOMSG: 49,\n  EIDRM: 24,\n  ECHRNG: 106,\n  EL2NSYNC: 156,\n  EL3HLT: 107,\n  EL3RST: 108,\n  ELNRNG: 109,\n  EUNATCH: 110,\n  ENOCSI: 111,\n  EL2HLT: 112,\n  EDEADLK: 16,\n  ENOLCK: 46,\n  EBADE: 113,\n  EBADR: 114,\n  EXFULL: 115,\n  ENOANO: 104,\n  EBADRQC: 103,\n  EBADSLT: 102,\n  EDEADLOCK: 16,\n  EBFONT: 101,\n  ENOSTR: 100,\n  ENODATA: 116,\n  ETIME: 117,\n  ENOSR: 118,\n  ENONET: 119,\n  ENOPKG: 120,\n  EREMOTE: 121,\n  ENOLINK: 47,\n  EADV: 122,\n  ESRMNT: 123,\n  ECOMM: 124,\n  EPROTO: 65,\n  EMULTIHOP: 36,\n  EDOTDOT: 125,\n  EBADMSG: 9,\n  ENOTUNIQ: 126,\n  EBADFD: 127,\n  EREMCHG: 128,\n  ELIBACC: 129,\n  ELIBBAD: 130,\n  ELIBSCN: 131,\n  ELIBMAX: 132,\n  ELIBEXEC: 133,\n  ENOSYS: 52,\n  ENOTEMPTY: 55,\n  ENAMETOOLONG: 37,\n  ELOOP: 32,\n  EOPNOTSUPP: 138,\n  EPFNOSUPPORT: 139,\n  ECONNRESET: 15,\n  ENOBUFS: 42,\n  EAFNOSUPPORT: 5,\n  EPROTOTYPE: 67,\n  ENOTSOCK: 57,\n  ENOPROTOOPT: 50,\n  ESHUTDOWN: 140,\n  ECONNREFUSED: 14,\n  EADDRINUSE: 3,\n  ECONNABORTED: 13,\n  ENETUNREACH: 40,\n  ENETDOWN: 38,\n  ETIMEDOUT: 73,\n  EHOSTDOWN: 142,\n  EHOSTUNREACH: 23,\n  EINPROGRESS: 26,\n  EALREADY: 7,\n  EDESTADDRREQ: 17,\n  EMSGSIZE: 35,\n  EPROTONOSUPPORT: 66,\n  ESOCKTNOSUPPORT: 137,\n  EADDRNOTAVAIL: 4,\n  ENETRESET: 39,\n  EISCONN: 30,\n  ENOTCONN: 53,\n  ETOOMANYREFS: 141,\n  EUSERS: 136,\n  EDQUOT: 19,\n  ESTALE: 72,\n  ENOTSUP: 138,\n  ENOMEDIUM: 148,\n  EILSEQ: 25,\n  EOVERFLOW: 61,\n  ECANCELED: 11,\n  ENOTRECOVERABLE: 56,\n  EOWNERDEAD: 62,\n  ESTRPIPE: 135\n};\nvar NODEFS = {\n  isWindows: false,\n  staticInit: function() {\n    NODEFS.isWindows = !!process.platform.match(/^win/);\n    var flags = { fs: fs.constants };\n    if (flags[\"fs\"]) {\n      flags = flags[\"fs\"];\n    }\n    NODEFS.flagsForNodeMap = {\n      1024: flags[\"O_APPEND\"],\n      64: flags[\"O_CREAT\"],\n      128: flags[\"O_EXCL\"],\n      0: flags[\"O_RDONLY\"],\n      2: flags[\"O_RDWR\"],\n      4096: flags[\"O_SYNC\"],\n      512: flags[\"O_TRUNC\"],\n      1: flags[\"O_WRONLY\"]\n    };\n  },\n  bufferFrom: function(arrayBuffer) {\n    return Buffer[\"alloc\"] ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);\n  },\n  convertNodeCode: function(e) {\n    var code = e.code;\n    assert(code in ERRNO_CODES);\n    return ERRNO_CODES[code];\n  },\n  mount: function(mount) {\n    assert(ENVIRONMENT_HAS_NODE);\n    return NODEFS.createNode(null, \"/\", NODEFS.getMode(mount.opts.root), 0);\n  },\n  createNode: function(parent, name, mode, dev) {\n    if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {\n      throw new FS.ErrnoError(28);\n    }\n    var node = FS.createNode(parent, name, mode);\n    node.node_ops = NODEFS.node_ops;\n    node.stream_ops = NODEFS.stream_ops;\n    return node;\n  },\n  getMode: function(path) {\n    var stat;\n    try {\n      stat = fs.lstatSync(path);\n      if (NODEFS.isWindows) {\n        stat.mode = stat.mode | ((stat.mode & 292) >> 2);\n      }\n    } catch (e) {\n      if (!e.code) throw e;\n      throw new FS.ErrnoError(NODEFS.convertNodeCode(e));\n    }\n    return stat.mode;\n  },\n  realPath: function(node) {\n    var parts = [];\n    while (node.parent !== node) {\n      parts.push(node.name);\n      node = node.parent;\n    }\n    parts.push(node.mount.opts.root);\n    parts.reverse();\n    return PATH.join.apply(null, parts);\n  },\n  flagsForNode: function(flags) {\n    flags &= ~2097152;\n    flags &= ~2048;\n    flags &= ~32768;\n    flags &= ~524288;\n    var newFlags = 0;\n    for (var k in NODEFS.flagsForNodeMap) {\n      if (flags & k) {\n        newFlags |= NODEFS.flagsForNodeMap[k];\n        flags ^= k;\n      }\n    }\n    if (!flags) {\n      return newFlags;\n    } else {\n      throw new FS.ErrnoError(28);\n    }\n  },\n  node_ops: {\n    getattr: function(node) {\n      var path = NODEFS.realPath(node);\n      var stat;\n      try {\n        stat = fs.lstatSync(path);\n      } catch (e) {\n        if (!e.code) throw e;\n        throw new FS.ErrnoError(NODEFS.convertNodeCode(e));\n      }\n      if (NODEFS.isWindows && !stat.blksize) {\n        stat.blksize = 4096;\n      }\n      if (NODEFS.isWindows && !stat.blocks) {\n        stat.blocks = ((stat.size + stat.blksize - 1) / stat.blksize) | 0;\n      }\n      return {\n        dev: stat.dev,\n        ino: stat.ino,\n        mode: stat.mode,\n        nlink: stat.nlink,\n        uid: stat.uid,\n        gid: stat.gid,\n        rdev: stat.rdev,\n        size: stat.size,\n        atime: stat.atime,\n        mtime: stat.mtime,\n        ctime: stat.ctime,\n        blksize: stat.blksize,\n        blocks: stat.blocks\n      };\n    },\n    setattr: function(node, attr) {\n      var path = NODEFS.realPath(node);\n      try {\n        if (attr.mode !== undefined) {\n          fs.chmodSync(path, attr.mode);\n          node.mode = attr.mode;\n        }\n        if (attr.timestamp !== undefined) {\n          var date = new Date(attr.timestamp);\n          fs.utimesSync(path, date, date);\n        }\n        if (attr.size !== undefined) {\n          fs.truncateSync(path, attr.size);\n        }\n      } catch (e) {\n        if (!e.code) throw e;\n        throw new FS.ErrnoError(NODEFS.convertNodeCode(e));\n      }\n    },\n    lookup: function(parent, name) {\n      var path = PATH.join2(NODEFS.realPath(parent), name);\n      var mode = NODEFS.getMode(path);\n      return NODEFS.createNode(parent, name, mode);\n    },\n    mknod: function(parent, name, mode, dev) {\n      var node = NODEFS.createNode(parent, name, mode, dev);\n      var path = NODEFS.realPath(node);\n      try {\n        if (FS.isDir(node.mode)) {\n          fs.mkdirSync(path, node.mode);\n        } else {\n          fs.writeFileSync(path, \"\", { mode: node.mode });\n        }\n      } catch (e) {\n        if (!e.code) throw e;\n        throw new FS.ErrnoError(NODEFS.convertNodeCode(e));\n      }\n      return node;\n    },\n    rename: function(oldNode, newDir, newName) {\n      var oldPath = NODEFS.realPath(oldNode);\n      var newPath = PATH.join2(NODEFS.realPath(newDir), newName);\n      try {\n        fs.renameSync(oldPath, newPath);\n      } catch (e) {\n        if (!e.code) throw e;\n        throw new FS.ErrnoError(NODEFS.convertNodeCode(e));\n      }\n    },\n    unlink: function(parent, name) {\n      var path = PATH.join2(NODEFS.realPath(parent), name);\n      try {\n        fs.unlinkSync(path);\n      } catch (e) {\n        if (!e.code) throw e;\n        throw new FS.ErrnoError(NODEFS.convertNodeCode(e));\n      }\n    },\n    rmdir: function(parent, name) {\n      var path = PATH.join2(NODEFS.realPath(parent), name);\n      try {\n        fs.rmdirSync(path);\n      } catch (e) {\n        if (!e.code) throw e;\n        throw new FS.ErrnoError(NODEFS.convertNodeCode(e));\n      }\n    },\n    readdir: function(node) {\n      var path = NODEFS.realPath(node);\n      try {\n        return fs.readdirSync(path);\n      } catch (e) {\n        if (!e.code) throw e;\n        throw new FS.ErrnoError(NODEFS.convertNodeCode(e));\n      }\n    },\n    symlink: function(parent, newName, oldPath) {\n      var newPath = PATH.join2(NODEFS.realPath(parent), newName);\n      try {\n        fs.symlinkSync(oldPath, newPath);\n      } catch (e) {\n        if (!e.code) throw e;\n        throw new FS.ErrnoError(NODEFS.convertNodeCode(e));\n      }\n    },\n    readlink: function(node) {\n      var path = NODEFS.realPath(node);\n      try {\n        path = fs.readlinkSync(path);\n        path = NODEJS_PATH.relative(\n          NODEJS_PATH.resolve(node.mount.opts.root),\n          path\n        );\n        return path;\n      } catch (e) {\n        if (!e.code) throw e;\n        throw new FS.ErrnoError(NODEFS.convertNodeCode(e));\n      }\n    }\n  },\n  stream_ops: {\n    open: function(stream) {\n      var path = NODEFS.realPath(stream.node);\n      try {\n        if (FS.isFile(stream.node.mode)) {\n          stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));\n        }\n      } catch (e) {\n        if (!e.code) throw e;\n        throw new FS.ErrnoError(NODEFS.convertNodeCode(e));\n      }\n    },\n    close: function(stream) {\n      try {\n        if (FS.isFile(stream.node.mode) && stream.nfd) {\n          fs.closeSync(stream.nfd);\n        }\n      } catch (e) {\n        if (!e.code) throw e;\n        throw new FS.ErrnoError(NODEFS.convertNodeCode(e));\n      }\n    },\n    read: function(stream, buffer, offset, length, position) {\n      if (length === 0) return 0;\n      try {\n        return fs.readSync(\n          stream.nfd,\n          NODEFS.bufferFrom(buffer.buffer),\n          offset,\n          length,\n          position\n        );\n      } catch (e) {\n        throw new FS.ErrnoError(NODEFS.convertNodeCode(e));\n      }\n    },\n    write: function(stream, buffer, offset, length, position) {\n      try {\n        return fs.writeSync(\n          stream.nfd,\n          NODEFS.bufferFrom(buffer.buffer),\n          offset,\n          length,\n          position\n        );\n      } catch (e) {\n        throw new FS.ErrnoError(NODEFS.convertNodeCode(e));\n      }\n    },\n    llseek: function(stream, offset, whence) {\n      var position = offset;\n      if (whence === 1) {\n        position += stream.position;\n      } else if (whence === 2) {\n        if (FS.isFile(stream.node.mode)) {\n          try {\n            var stat = fs.fstatSync(stream.nfd);\n            position += stat.size;\n          } catch (e) {\n            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));\n          }\n        }\n      }\n      if (position < 0) {\n        throw new FS.ErrnoError(28);\n      }\n      return position;\n    }\n  }\n};\nvar NODERAWFS = {\n  lookupPath: function(path) {\n    return { path: path, node: { mode: NODEFS.getMode(path) } };\n  },\n  createStandardStreams: function() {\n    FS.streams[0] = {\n      fd: 0,\n      nfd: 0,\n      position: 0,\n      path: \"\",\n      flags: 0,\n      tty: true,\n      seekable: false\n    };\n    for (var i = 1; i < 3; i++) {\n      FS.streams[i] = {\n        fd: i,\n        nfd: i,\n        position: 0,\n        path: \"\",\n        flags: 577,\n        tty: true,\n        seekable: false\n      };\n    }\n  },\n  cwd: function() {\n    return process.cwd();\n  },\n  chdir: function() {\n    process.chdir.apply(void 0, arguments);\n  },\n  mknod: function(path, mode) {\n    if (FS.isDir(path)) {\n      fs.mkdirSync(path, mode);\n    } else {\n      fs.writeFileSync(path, \"\", { mode: mode });\n    }\n  },\n  mkdir: function() {\n    fs.mkdirSync.apply(void 0, arguments);\n  },\n  symlink: function() {\n    fs.symlinkSync.apply(void 0, arguments);\n  },\n  rename: function() {\n    fs.renameSync.apply(void 0, arguments);\n  },\n  rmdir: function() {\n    fs.rmdirSync.apply(void 0, arguments);\n  },\n  readdir: function() {\n    fs.readdirSync.apply(void 0, arguments);\n  },\n  unlink: function() {\n    fs.unlinkSync.apply(void 0, arguments);\n  },\n  readlink: function() {\n    return fs.readlinkSync.apply(void 0, arguments);\n  },\n  stat: function() {\n    return fs.statSync.apply(void 0, arguments);\n  },\n  lstat: function() {\n    return fs.lstatSync.apply(void 0, arguments);\n  },\n  chmod: function() {\n    fs.chmodSync.apply(void 0, arguments);\n  },\n  fchmod: function() {\n    fs.fchmodSync.apply(void 0, arguments);\n  },\n  chown: function() {\n    fs.chownSync.apply(void 0, arguments);\n  },\n  fchown: function() {\n    fs.fchownSync.apply(void 0, arguments);\n  },\n  truncate: function() {\n    fs.truncateSync.apply(void 0, arguments);\n  },\n  ftruncate: function() {\n    fs.ftruncateSync.apply(void 0, arguments);\n  },\n  utime: function() {\n    fs.utimesSync.apply(void 0, arguments);\n  },\n  open: function(path, flags, mode, suggestFD) {\n    if (typeof flags === \"string\") {\n      flags = VFS.modeStringToFlags(flags);\n    }\n    var nfd = fs.openSync(path, NODEFS.flagsForNode(flags), mode);\n    var fd = suggestFD != null ? suggestFD : FS.nextfd(nfd);\n    var stream = {\n      fd: fd,\n      nfd: nfd,\n      position: 0,\n      path: path,\n      flags: flags,\n      seekable: true\n    };\n    FS.streams[fd] = stream;\n    return stream;\n  },\n  close: function(stream) {\n    if (!stream.stream_ops) {\n      fs.closeSync(stream.nfd);\n    }\n    FS.closeStream(stream.fd);\n  },\n  llseek: function(stream, offset, whence) {\n    if (stream.stream_ops) {\n      return VFS.llseek(stream, offset, whence);\n    }\n    var position = offset;\n    if (whence === 1) {\n      position += stream.position;\n    } else if (whence === 2) {\n      position += fs.fstatSync(stream.nfd).size;\n    } else if (whence !== 0) {\n      throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n    }\n    if (position < 0) {\n      throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n    }\n    stream.position = position;\n    return position;\n  },\n  read: function(stream, buffer, offset, length, position) {\n    if (stream.stream_ops) {\n      return VFS.read(stream, buffer, offset, length, position);\n    }\n    var seeking = typeof position !== \"undefined\";\n    if (!seeking && stream.seekable) position = stream.position;\n    var bytesRead = fs.readSync(\n      stream.nfd,\n      NODEFS.bufferFrom(buffer.buffer),\n      offset,\n      length,\n      position\n    );\n    if (!seeking) stream.position += bytesRead;\n    return bytesRead;\n  },\n  write: function(stream, buffer, offset, length, position) {\n    if (stream.stream_ops) {\n      return VFS.write(stream, buffer, offset, length, position);\n    }\n    if (stream.flags & +\"1024\") {\n      FS.llseek(stream, 0, +\"2\");\n    }\n    var seeking = typeof position !== \"undefined\";\n    if (!seeking && stream.seekable) position = stream.position;\n    var bytesWritten = fs.writeSync(\n      stream.nfd,\n      NODEFS.bufferFrom(buffer.buffer),\n      offset,\n      length,\n      position\n    );\n    if (!seeking) stream.position += bytesWritten;\n    return bytesWritten;\n  },\n  allocate: function() {\n    throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);\n  },\n  mmap: function() {\n    throw new FS.ErrnoError(ERRNO_CODES.ENODEV);\n  },\n  msync: function() {\n    return 0;\n  },\n  munmap: function() {\n    return 0;\n  },\n  ioctl: function() {\n    throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);\n  }\n};\nvar FS = {\n  root: null,\n  mounts: [],\n  devices: {},\n  streams: [],\n  nextInode: 1,\n  nameTable: null,\n  currentPath: \"/\",\n  initialized: false,\n  ignorePermissions: true,\n  trackingDelegate: {},\n  tracking: { openFlags: { READ: 1, WRITE: 2 } },\n  ErrnoError: null,\n  genericErrors: {},\n  filesystems: null,\n  syncFSRequests: 0,\n  handleFSError: function(e) {\n    if (!(e instanceof FS.ErrnoError)) throw e + \" : \" + stackTrace();\n    return ___setErrNo(e.errno);\n  },\n  lookupPath: function(path, opts) {\n    path = PATH_FS.resolve(FS.cwd(), path);\n    opts = opts || {};\n    if (!path) return { path: \"\", node: null };\n    var defaults = { follow_mount: true, recurse_count: 0 };\n    for (var key in defaults) {\n      if (opts[key] === undefined) {\n        opts[key] = defaults[key];\n      }\n    }\n    if (opts.recurse_count > 8) {\n      throw new FS.ErrnoError(32);\n    }\n    var parts = PATH.normalizeArray(\n      path.split(\"/\").filter(function(p) {\n        return !!p;\n      }),\n      false\n    );\n    var current = FS.root;\n    var current_path = \"/\";\n    for (var i = 0; i < parts.length; i++) {\n      var islast = i === parts.length - 1;\n      if (islast && opts.parent) {\n        break;\n      }\n      current = FS.lookupNode(current, parts[i]);\n      current_path = PATH.join2(current_path, parts[i]);\n      if (FS.isMountpoint(current)) {\n        if (!islast || (islast && opts.follow_mount)) {\n          current = current.mounted.root;\n        }\n      }\n      if (!islast || opts.follow) {\n        var count = 0;\n        while (FS.isLink(current.mode)) {\n          var link = FS.readlink(current_path);\n          current_path = PATH_FS.resolve(PATH.dirname(current_path), link);\n          var lookup = FS.lookupPath(current_path, {\n            recurse_count: opts.recurse_count\n          });\n          current = lookup.node;\n          if (count++ > 40) {\n            throw new FS.ErrnoError(32);\n          }\n        }\n      }\n    }\n    return { path: current_path, node: current };\n  },\n  getPath: function(node) {\n    var path;\n    while (true) {\n      if (FS.isRoot(node)) {\n        var mount = node.mount.mountpoint;\n        if (!path) return mount;\n        return mount[mount.length - 1] !== \"/\"\n          ? mount + \"/\" + path\n          : mount + path;\n      }\n      path = path ? node.name + \"/\" + path : node.name;\n      node = node.parent;\n    }\n  },\n  hashName: function(parentid, name) {\n    var hash = 0;\n    for (var i = 0; i < name.length; i++) {\n      hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;\n    }\n    return ((parentid + hash) >>> 0) % FS.nameTable.length;\n  },\n  hashAddNode: function(node) {\n    var hash = FS.hashName(node.parent.id, node.name);\n    node.name_next = FS.nameTable[hash];\n    FS.nameTable[hash] = node;\n  },\n  hashRemoveNode: function(node) {\n    var hash = FS.hashName(node.parent.id, node.name);\n    if (FS.nameTable[hash] === node) {\n      FS.nameTable[hash] = node.name_next;\n    } else {\n      var current = FS.nameTable[hash];\n      while (current) {\n        if (current.name_next === node) {\n          current.name_next = node.name_next;\n          break;\n        }\n        current = current.name_next;\n      }\n    }\n  },\n  lookupNode: function(parent, name) {\n    var err = FS.mayLookup(parent);\n    if (err) {\n      throw new FS.ErrnoError(err, parent);\n    }\n    var hash = FS.hashName(parent.id, name);\n    for (var node = FS.nameTable[hash]; node; node = node.name_next) {\n      var nodeName = node.name;\n      if (node.parent.id === parent.id && nodeName === name) {\n        return node;\n      }\n    }\n    return FS.lookup(parent, name);\n  },\n  createNode: function(parent, name, mode, rdev) {\n    if (!FS.FSNode) {\n      FS.FSNode = function(parent, name, mode, rdev) {\n        if (!parent) {\n          parent = this;\n        }\n        this.parent = parent;\n        this.mount = parent.mount;\n        this.mounted = null;\n        this.id = FS.nextInode++;\n        this.name = name;\n        this.mode = mode;\n        this.node_ops = {};\n        this.stream_ops = {};\n        this.rdev = rdev;\n      };\n      FS.FSNode.prototype = {};\n      var readMode = 292 | 73;\n      var writeMode = 146;\n      Object.defineProperties(FS.FSNode.prototype, {\n        read: {\n          get: function() {\n            return (this.mode & readMode) === readMode;\n          },\n          set: function(val) {\n            val ? (this.mode |= readMode) : (this.mode &= ~readMode);\n          }\n        },\n        write: {\n          get: function() {\n            return (this.mode & writeMode) === writeMode;\n          },\n          set: function(val) {\n            val ? (this.mode |= writeMode) : (this.mode &= ~writeMode);\n          }\n        },\n        isFolder: {\n          get: function() {\n            return FS.isDir(this.mode);\n          }\n        },\n        isDevice: {\n          get: function() {\n            return FS.isChrdev(this.mode);\n          }\n        }\n      });\n    }\n    var node = new FS.FSNode(parent, name, mode, rdev);\n    FS.hashAddNode(node);\n    return node;\n  },\n  destroyNode: function(node) {\n    FS.hashRemoveNode(node);\n  },\n  isRoot: function(node) {\n    return node === node.parent;\n  },\n  isMountpoint: function(node) {\n    return !!node.mounted;\n  },\n  isFile: function(mode) {\n    return (mode & 61440) === 32768;\n  },\n  isDir: function(mode) {\n    return (mode & 61440) === 16384;\n  },\n  isLink: function(mode) {\n    return (mode & 61440) === 40960;\n  },\n  isChrdev: function(mode) {\n    return (mode & 61440) === 8192;\n  },\n  isBlkdev: function(mode) {\n    return (mode & 61440) === 24576;\n  },\n  isFIFO: function(mode) {\n    return (mode & 61440) === 4096;\n  },\n  isSocket: function(mode) {\n    return (mode & 49152) === 49152;\n  },\n  flagModes: {\n    r: 0,\n    rs: 1052672,\n    \"r+\": 2,\n    w: 577,\n    wx: 705,\n    xw: 705,\n    \"w+\": 578,\n    \"wx+\": 706,\n    \"xw+\": 706,\n    a: 1089,\n    ax: 1217,\n    xa: 1217,\n    \"a+\": 1090,\n    \"ax+\": 1218,\n    \"xa+\": 1218\n  },\n  modeStringToFlags: function(str) {\n    var flags = FS.flagModes[str];\n    if (typeof flags === \"undefined\") {\n      throw new Error(\"Unknown file open mode: \" + str);\n    }\n    return flags;\n  },\n  flagsToPermissionString: function(flag) {\n    var perms = [\"r\", \"w\", \"rw\"][flag & 3];\n    if (flag & 512) {\n      perms += \"w\";\n    }\n    return perms;\n  },\n  nodePermissions: function(node, perms) {\n    if (FS.ignorePermissions) {\n      return 0;\n    }\n    if (perms.indexOf(\"r\") !== -1 && !(node.mode & 292)) {\n      return 2;\n    } else if (perms.indexOf(\"w\") !== -1 && !(node.mode & 146)) {\n      return 2;\n    } else if (perms.indexOf(\"x\") !== -1 && !(node.mode & 73)) {\n      return 2;\n    }\n    return 0;\n  },\n  mayLookup: function(dir) {\n    var err = FS.nodePermissions(dir, \"x\");\n    if (err) return err;\n    if (!dir.node_ops.lookup) return 2;\n    return 0;\n  },\n  mayCreate: function(dir, name) {\n    try {\n      var node = FS.lookupNode(dir, name);\n      return 20;\n    } catch (e) {}\n    return FS.nodePermissions(dir, \"wx\");\n  },\n  mayDelete: function(dir, name, isdir) {\n    var node;\n    try {\n      node = FS.lookupNode(dir, name);\n    } catch (e) {\n      return e.errno;\n    }\n    var err = FS.nodePermissions(dir, \"wx\");\n    if (err) {\n      return err;\n    }\n    if (isdir) {\n      if (!FS.isDir(node.mode)) {\n        return 54;\n      }\n      if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {\n        return 10;\n      }\n    } else {\n      if (FS.isDir(node.mode)) {\n        return 31;\n      }\n    }\n    return 0;\n  },\n  mayOpen: function(node, flags) {\n    if (!node) {\n      return 44;\n    }\n    if (FS.isLink(node.mode)) {\n      return 32;\n    } else if (FS.isDir(node.mode)) {\n      if (FS.flagsToPermissionString(flags) !== \"r\" || flags & 512) {\n        return 31;\n      }\n    }\n    return FS.nodePermissions(node, FS.flagsToPermissionString(flags));\n  },\n  MAX_OPEN_FDS: 4096,\n  nextfd: function(fd_start, fd_end) {\n    fd_start = fd_start || 0;\n    fd_end = fd_end || FS.MAX_OPEN_FDS;\n    for (var fd = fd_start; fd <= fd_end; fd++) {\n      if (!FS.streams[fd]) {\n        return fd;\n      }\n    }\n    throw new FS.ErrnoError(33);\n  },\n  getStream: function(fd) {\n    return FS.streams[fd];\n  },\n  createStream: function(stream, fd_start, fd_end) {\n    if (!FS.FSStream) {\n      FS.FSStream = function() {};\n      FS.FSStream.prototype = {};\n      Object.defineProperties(FS.FSStream.prototype, {\n        object: {\n          get: function() {\n            return this.node;\n          },\n          set: function(val) {\n            this.node = val;\n          }\n        },\n        isRead: {\n          get: function() {\n            return (this.flags & 2097155) !== 1;\n          }\n        },\n        isWrite: {\n          get: function() {\n            return (this.flags & 2097155) !== 0;\n          }\n        },\n        isAppend: {\n          get: function() {\n            return this.flags & 1024;\n          }\n        }\n      });\n    }\n    var newStream = new FS.FSStream();\n    for (var p in stream) {\n      newStream[p] = stream[p];\n    }\n    stream = newStream;\n    var fd = FS.nextfd(fd_start, fd_end);\n    stream.fd = fd;\n    FS.streams[fd] = stream;\n    return stream;\n  },\n  closeStream: function(fd) {\n    FS.streams[fd] = null;\n  },\n  chrdev_stream_ops: {\n    open: function(stream) {\n      var device = FS.getDevice(stream.node.rdev);\n      stream.stream_ops = device.stream_ops;\n      if (stream.stream_ops.open) {\n        stream.stream_ops.open(stream);\n      }\n    },\n    llseek: function() {\n      throw new FS.ErrnoError(70);\n    }\n  },\n  major: function(dev) {\n    return dev >> 8;\n  },\n  minor: function(dev) {\n    return dev & 255;\n  },\n  makedev: function(ma, mi) {\n    return (ma << 8) | mi;\n  },\n  registerDevice: function(dev, ops) {\n    FS.devices[dev] = { stream_ops: ops };\n  },\n  getDevice: function(dev) {\n    return FS.devices[dev];\n  },\n  getMounts: function(mount) {\n    var mounts = [];\n    var check = [mount];\n    while (check.length) {\n      var m = check.pop();\n      mounts.push(m);\n      check.push.apply(check, m.mounts);\n    }\n    return mounts;\n  },\n  syncfs: function(populate, callback) {\n    if (typeof populate === \"function\") {\n      callback = populate;\n      populate = false;\n    }\n    FS.syncFSRequests++;\n    if (FS.syncFSRequests > 1) {\n      console.log(\n        \"warning: \" +\n          FS.syncFSRequests +\n          \" FS.syncfs operations in flight at once, probably just doing extra work\"\n      );\n    }\n    var mounts = FS.getMounts(FS.root.mount);\n    var completed = 0;\n    function doCallback(err) {\n      FS.syncFSRequests--;\n      return callback(err);\n    }\n    function done(err) {\n      if (err) {\n        if (!done.errored) {\n          done.errored = true;\n          return doCallback(err);\n        }\n        return;\n      }\n      if (++completed >= mounts.length) {\n        doCallback(null);\n      }\n    }\n    mounts.forEach(function(mount) {\n      if (!mount.type.syncfs) {\n        return done(null);\n      }\n      mount.type.syncfs(mount, populate, done);\n    });\n  },\n  mount: function(type, opts, mountpoint) {\n    var root = mountpoint === \"/\";\n    var pseudo = !mountpoint;\n    var node;\n    if (root && FS.root) {\n      throw new FS.ErrnoError(10);\n    } else if (!root && !pseudo) {\n      var lookup = FS.lookupPath(mountpoint, { follow_mount: false });\n      mountpoint = lookup.path;\n      node = lookup.node;\n      if (FS.isMountpoint(node)) {\n        throw new FS.ErrnoError(10);\n      }\n      if (!FS.isDir(node.mode)) {\n        throw new FS.ErrnoError(54);\n      }\n    }\n    var mount = { type: type, opts: opts, mountpoint: mountpoint, mounts: [] };\n    var mountRoot = type.mount(mount);\n    mountRoot.mount = mount;\n    mount.root = mountRoot;\n    if (root) {\n      FS.root = mountRoot;\n    } else if (node) {\n      node.mounted = mount;\n      if (node.mount) {\n        node.mount.mounts.push(mount);\n      }\n    }\n    return mountRoot;\n  },\n  unmount: function(mountpoint) {\n    var lookup = FS.lookupPath(mountpoint, { follow_mount: false });\n    if (!FS.isMountpoint(lookup.node)) {\n      throw new FS.ErrnoError(28);\n    }\n    var node = lookup.node;\n    var mount = node.mounted;\n    var mounts = FS.getMounts(mount);\n    Object.keys(FS.nameTable).forEach(function(hash) {\n      var current = FS.nameTable[hash];\n      while (current) {\n        var next = current.name_next;\n        if (mounts.indexOf(current.mount) !== -1) {\n          FS.destroyNode(current);\n        }\n        current = next;\n      }\n    });\n    node.mounted = null;\n    var idx = node.mount.mounts.indexOf(mount);\n    node.mount.mounts.splice(idx, 1);\n  },\n  lookup: function(parent, name) {\n    return parent.node_ops.lookup(parent, name);\n  },\n  mknod: function(path, mode, dev) {\n    var lookup = FS.lookupPath(path, { parent: true });\n    var parent = lookup.node;\n    var name = PATH.basename(path);\n    if (!name || name === \".\" || name === \"..\") {\n      throw new FS.ErrnoError(28);\n    }\n    var err = FS.mayCreate(parent, name);\n    if (err) {\n      throw new FS.ErrnoError(err);\n    }\n    if (!parent.node_ops.mknod) {\n      throw new FS.ErrnoError(63);\n    }\n    return parent.node_ops.mknod(parent, name, mode, dev);\n  },\n  create: function(path, mode) {\n    mode = mode !== undefined ? mode : 438;\n    mode &= 4095;\n    mode |= 32768;\n    return FS.mknod(path, mode, 0);\n  },\n  mkdir: function(path, mode) {\n    mode = mode !== undefined ? mode : 511;\n    mode &= 511 | 512;\n    mode |= 16384;\n    return FS.mknod(path, mode, 0);\n  },\n  mkdirTree: function(path, mode) {\n    var dirs = path.split(\"/\");\n    var d = \"\";\n    for (var i = 0; i < dirs.length; ++i) {\n      if (!dirs[i]) continue;\n      d += \"/\" + dirs[i];\n      try {\n        FS.mkdir(d, mode);\n      } catch (e) {\n        if (e.errno != 20) throw e;\n      }\n    }\n  },\n  mkdev: function(path, mode, dev) {\n    if (typeof dev === \"undefined\") {\n      dev = mode;\n      mode = 438;\n    }\n    mode |= 8192;\n    return FS.mknod(path, mode, dev);\n  },\n  symlink: function(oldpath, newpath) {\n    if (!PATH_FS.resolve(oldpath)) {\n      throw new FS.ErrnoError(44);\n    }\n    var lookup = FS.lookupPath(newpath, { parent: true });\n    var parent = lookup.node;\n    if (!parent) {\n      throw new FS.ErrnoError(44);\n    }\n    var newname = PATH.basename(newpath);\n    var err = FS.mayCreate(parent, newname);\n    if (err) {\n      throw new FS.ErrnoError(err);\n    }\n    if (!parent.node_ops.symlink) {\n      throw new FS.ErrnoError(63);\n    }\n    return parent.node_ops.symlink(parent, newname, oldpath);\n  },\n  rename: function(old_path, new_path) {\n    var old_dirname = PATH.dirname(old_path);\n    var new_dirname = PATH.dirname(new_path);\n    var old_name = PATH.basename(old_path);\n    var new_name = PATH.basename(new_path);\n    var lookup, old_dir, new_dir;\n    try {\n      lookup = FS.lookupPath(old_path, { parent: true });\n      old_dir = lookup.node;\n      lookup = FS.lookupPath(new_path, { parent: true });\n      new_dir = lookup.node;\n    } catch (e) {\n      throw new FS.ErrnoError(10);\n    }\n    if (!old_dir || !new_dir) throw new FS.ErrnoError(44);\n    if (old_dir.mount !== new_dir.mount) {\n      throw new FS.ErrnoError(75);\n    }\n    var old_node = FS.lookupNode(old_dir, old_name);\n    var relative = PATH_FS.relative(old_path, new_dirname);\n    if (relative.charAt(0) !== \".\") {\n      throw new FS.ErrnoError(28);\n    }\n    relative = PATH_FS.relative(new_path, old_dirname);\n    if (relative.charAt(0) !== \".\") {\n      throw new FS.ErrnoError(55);\n    }\n    var new_node;\n    try {\n      new_node = FS.lookupNode(new_dir, new_name);\n    } catch (e) {}\n    if (old_node === new_node) {\n      return;\n    }\n    var isdir = FS.isDir(old_node.mode);\n    var err = FS.mayDelete(old_dir, old_name, isdir);\n    if (err) {\n      throw new FS.ErrnoError(err);\n    }\n    err = new_node\n      ? FS.mayDelete(new_dir, new_name, isdir)\n      : FS.mayCreate(new_dir, new_name);\n    if (err) {\n      throw new FS.ErrnoError(err);\n    }\n    if (!old_dir.node_ops.rename) {\n      throw new FS.ErrnoError(63);\n    }\n    if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {\n      throw new FS.ErrnoError(10);\n    }\n    if (new_dir !== old_dir) {\n      err = FS.nodePermissions(old_dir, \"w\");\n      if (err) {\n        throw new FS.ErrnoError(err);\n      }\n    }\n    try {\n      if (FS.trackingDelegate[\"willMovePath\"]) {\n        FS.trackingDelegate[\"willMovePath\"](old_path, new_path);\n      }\n    } catch (e) {\n      console.log(\n        \"FS.trackingDelegate['willMovePath']('\" +\n          old_path +\n          \"', '\" +\n          new_path +\n          \"') threw an exception: \" +\n          e.message\n      );\n    }\n    FS.hashRemoveNode(old_node);\n    try {\n      old_dir.node_ops.rename(old_node, new_dir, new_name);\n    } catch (e) {\n      throw e;\n    } finally {\n      FS.hashAddNode(old_node);\n    }\n    try {\n      if (FS.trackingDelegate[\"onMovePath\"])\n        FS.trackingDelegate[\"onMovePath\"](old_path, new_path);\n    } catch (e) {\n      console.log(\n        \"FS.trackingDelegate['onMovePath']('\" +\n          old_path +\n          \"', '\" +\n          new_path +\n          \"') threw an exception: \" +\n          e.message\n      );\n    }\n  },\n  rmdir: function(path) {\n    var lookup = FS.lookupPath(path, { parent: true });\n    var parent = lookup.node;\n    var name = PATH.basename(path);\n    var node = FS.lookupNode(parent, name);\n    var err = FS.mayDelete(parent, name, true);\n    if (err) {\n      throw new FS.ErrnoError(err);\n    }\n    if (!parent.node_ops.rmdir) {\n      throw new FS.ErrnoError(63);\n    }\n    if (FS.isMountpoint(node)) {\n      throw new FS.ErrnoError(10);\n    }\n    try {\n      if (FS.trackingDelegate[\"willDeletePath\"]) {\n        FS.trackingDelegate[\"willDeletePath\"](path);\n      }\n    } catch (e) {\n      console.log(\n        \"FS.trackingDelegate['willDeletePath']('\" +\n          path +\n          \"') threw an exception: \" +\n          e.message\n      );\n    }\n    parent.node_ops.rmdir(parent, name);\n    FS.destroyNode(node);\n    try {\n      if (FS.trackingDelegate[\"onDeletePath\"])\n        FS.trackingDelegate[\"onDeletePath\"](path);\n    } catch (e) {\n      console.log(\n        \"FS.trackingDelegate['onDeletePath']('\" +\n          path +\n          \"') threw an exception: \" +\n          e.message\n      );\n    }\n  },\n  readdir: function(path) {\n    var lookup = FS.lookupPath(path, { follow: true });\n    var node = lookup.node;\n    if (!node.node_ops.readdir) {\n      throw new FS.ErrnoError(54);\n    }\n    return node.node_ops.readdir(node);\n  },\n  unlink: function(path) {\n    var lookup = FS.lookupPath(path, { parent: true });\n    var parent = lookup.node;\n    var name = PATH.basename(path);\n    var node = FS.lookupNode(parent, name);\n    var err = FS.mayDelete(parent, name, false);\n    if (err) {\n      throw new FS.ErrnoError(err);\n    }\n    if (!parent.node_ops.unlink) {\n      throw new FS.ErrnoError(63);\n    }\n    if (FS.isMountpoint(node)) {\n      throw new FS.ErrnoError(10);\n    }\n    try {\n      if (FS.trackingDelegate[\"willDeletePath\"]) {\n        FS.trackingDelegate[\"willDeletePath\"](path);\n      }\n    } catch (e) {\n      console.log(\n        \"FS.trackingDelegate['willDeletePath']('\" +\n          path +\n          \"') threw an exception: \" +\n          e.message\n      );\n    }\n    parent.node_ops.unlink(parent, name);\n    FS.destroyNode(node);\n    try {\n      if (FS.trackingDelegate[\"onDeletePath\"])\n        FS.trackingDelegate[\"onDeletePath\"](path);\n    } catch (e) {\n      console.log(\n        \"FS.trackingDelegate['onDeletePath']('\" +\n          path +\n          \"') threw an exception: \" +\n          e.message\n      );\n    }\n  },\n  readlink: function(path) {\n    var lookup = FS.lookupPath(path);\n    var link = lookup.node;\n    if (!link) {\n      throw new FS.ErrnoError(44);\n    }\n    if (!link.node_ops.readlink) {\n      throw new FS.ErrnoError(28);\n    }\n    return PATH_FS.resolve(\n      FS.getPath(link.parent),\n      link.node_ops.readlink(link)\n    );\n  },\n  stat: function(path, dontFollow) {\n    var lookup = FS.lookupPath(path, { follow: !dontFollow });\n    var node = lookup.node;\n    if (!node) {\n      throw new FS.ErrnoError(44);\n    }\n    if (!node.node_ops.getattr) {\n      throw new FS.ErrnoError(63);\n    }\n    return node.node_ops.getattr(node);\n  },\n  lstat: function(path) {\n    return FS.stat(path, true);\n  },\n  chmod: function(path, mode, dontFollow) {\n    var node;\n    if (typeof path === \"string\") {\n      var lookup = FS.lookupPath(path, { follow: !dontFollow });\n      node = lookup.node;\n    } else {\n      node = path;\n    }\n    if (!node.node_ops.setattr) {\n      throw new FS.ErrnoError(63);\n    }\n    node.node_ops.setattr(node, {\n      mode: (mode & 4095) | (node.mode & ~4095),\n      timestamp: Date.now()\n    });\n  },\n  lchmod: function(path, mode) {\n    FS.chmod(path, mode, true);\n  },\n  fchmod: function(fd, mode) {\n    var stream = FS.getStream(fd);\n    if (!stream) {\n      throw new FS.ErrnoError(8);\n    }\n    FS.chmod(stream.node, mode);\n  },\n  chown: function(path, uid, gid, dontFollow) {\n    var node;\n    if (typeof path === \"string\") {\n      var lookup = FS.lookupPath(path, { follow: !dontFollow });\n      node = lookup.node;\n    } else {\n      node = path;\n    }\n    if (!node.node_ops.setattr) {\n      throw new FS.ErrnoError(63);\n    }\n    node.node_ops.setattr(node, { timestamp: Date.now() });\n  },\n  lchown: function(path, uid, gid) {\n    FS.chown(path, uid, gid, true);\n  },\n  fchown: function(fd, uid, gid) {\n    var stream = FS.getStream(fd);\n    if (!stream) {\n      throw new FS.ErrnoError(8);\n    }\n    FS.chown(stream.node, uid, gid);\n  },\n  truncate: function(path, len) {\n    if (len < 0) {\n      throw new FS.ErrnoError(28);\n    }\n    var node;\n    if (typeof path === \"string\") {\n      var lookup = FS.lookupPath(path, { follow: true });\n      node = lookup.node;\n    } else {\n      node = path;\n    }\n    if (!node.node_ops.setattr) {\n      throw new FS.ErrnoError(63);\n    }\n    if (FS.isDir(node.mode)) {\n      throw new FS.ErrnoError(31);\n    }\n    if (!FS.isFile(node.mode)) {\n      throw new FS.ErrnoError(28);\n    }\n    var err = FS.nodePermissions(node, \"w\");\n    if (err) {\n      throw new FS.ErrnoError(err);\n    }\n    node.node_ops.setattr(node, { size: len, timestamp: Date.now() });\n  },\n  ftruncate: function(fd, len) {\n    var stream = FS.getStream(fd);\n    if (!stream) {\n      throw new FS.ErrnoError(8);\n    }\n    if ((stream.flags & 2097155) === 0) {\n      throw new FS.ErrnoError(28);\n    }\n    FS.truncate(stream.node, len);\n  },\n  utime: function(path, atime, mtime) {\n    var lookup = FS.lookupPath(path, { follow: true });\n    var node = lookup.node;\n    node.node_ops.setattr(node, { timestamp: Math.max(atime, mtime) });\n  },\n  open: function(path, flags, mode, fd_start, fd_end) {\n    if (path === \"\") {\n      throw new FS.ErrnoError(44);\n    }\n    flags = typeof flags === \"string\" ? FS.modeStringToFlags(flags) : flags;\n    mode = typeof mode === \"undefined\" ? 438 : mode;\n    if (flags & 64) {\n      mode = (mode & 4095) | 32768;\n    } else {\n      mode = 0;\n    }\n    var node;\n    if (typeof path === \"object\") {\n      node = path;\n    } else {\n      path = PATH.normalize(path);\n      try {\n        var lookup = FS.lookupPath(path, { follow: !(flags & 131072) });\n        node = lookup.node;\n      } catch (e) {}\n    }\n    var created = false;\n    if (flags & 64) {\n      if (node) {\n        if (flags & 128) {\n          throw new FS.ErrnoError(20);\n        }\n      } else {\n        node = FS.mknod(path, mode, 0);\n        created = true;\n      }\n    }\n    if (!node) {\n      throw new FS.ErrnoError(44);\n    }\n    if (FS.isChrdev(node.mode)) {\n      flags &= ~512;\n    }\n    if (flags & 65536 && !FS.isDir(node.mode)) {\n      throw new FS.ErrnoError(54);\n    }\n    if (!created) {\n      var err = FS.mayOpen(node, flags);\n      if (err) {\n        throw new FS.ErrnoError(err);\n      }\n    }\n    if (flags & 512) {\n      FS.truncate(node, 0);\n    }\n    flags &= ~(128 | 512);\n    var stream = FS.createStream(\n      {\n        node: node,\n        path: FS.getPath(node),\n        flags: flags,\n        seekable: true,\n        position: 0,\n        stream_ops: node.stream_ops,\n        ungotten: [],\n        error: false\n      },\n      fd_start,\n      fd_end\n    );\n    if (stream.stream_ops.open) {\n      stream.stream_ops.open(stream);\n    }\n    if (Module[\"logReadFiles\"] && !(flags & 1)) {\n      if (!FS.readFiles) FS.readFiles = {};\n      if (!(path in FS.readFiles)) {\n        FS.readFiles[path] = 1;\n        console.log(\"FS.trackingDelegate error on read file: \" + path);\n      }\n    }\n    try {\n      if (FS.trackingDelegate[\"onOpenFile\"]) {\n        var trackingFlags = 0;\n        if ((flags & 2097155) !== 1) {\n          trackingFlags |= FS.tracking.openFlags.READ;\n        }\n        if ((flags & 2097155) !== 0) {\n          trackingFlags |= FS.tracking.openFlags.WRITE;\n        }\n        FS.trackingDelegate[\"onOpenFile\"](path, trackingFlags);\n      }\n    } catch (e) {\n      console.log(\n        \"FS.trackingDelegate['onOpenFile']('\" +\n          path +\n          \"', flags) threw an exception: \" +\n          e.message\n      );\n    }\n    return stream;\n  },\n  close: function(stream) {\n    if (FS.isClosed(stream)) {\n      throw new FS.ErrnoError(8);\n    }\n    if (stream.getdents) stream.getdents = null;\n    try {\n      if (stream.stream_ops.close) {\n        stream.stream_ops.close(stream);\n      }\n    } catch (e) {\n      throw e;\n    } finally {\n      FS.closeStream(stream.fd);\n    }\n    stream.fd = null;\n  },\n  isClosed: function(stream) {\n    return stream.fd === null;\n  },\n  llseek: function(stream, offset, whence) {\n    if (FS.isClosed(stream)) {\n      throw new FS.ErrnoError(8);\n    }\n    if (!stream.seekable || !stream.stream_ops.llseek) {\n      throw new FS.ErrnoError(70);\n    }\n    if (whence != 0 && whence != 1 && whence != 2) {\n      throw new FS.ErrnoError(28);\n    }\n    stream.position = stream.stream_ops.llseek(stream, offset, whence);\n    stream.ungotten = [];\n    return stream.position;\n  },\n  read: function(stream, buffer, offset, length, position) {\n    if (length < 0 || position < 0) {\n      throw new FS.ErrnoError(28);\n    }\n    if (FS.isClosed(stream)) {\n      throw new FS.ErrnoError(8);\n    }\n    if ((stream.flags & 2097155) === 1) {\n      throw new FS.ErrnoError(8);\n    }\n    if (FS.isDir(stream.node.mode)) {\n      throw new FS.ErrnoError(31);\n    }\n    if (!stream.stream_ops.read) {\n      throw new FS.ErrnoError(28);\n    }\n    var seeking = typeof position !== \"undefined\";\n    if (!seeking) {\n      position = stream.position;\n    } else if (!stream.seekable) {\n      throw new FS.ErrnoError(70);\n    }\n    var bytesRead = stream.stream_ops.read(\n      stream,\n      buffer,\n      offset,\n      length,\n      position\n    );\n    if (!seeking) stream.position += bytesRead;\n    return bytesRead;\n  },\n  write: function(stream, buffer, offset, length, position, canOwn) {\n    if (length < 0 || position < 0) {\n      throw new FS.ErrnoError(28);\n    }\n    if (FS.isClosed(stream)) {\n      throw new FS.ErrnoError(8);\n    }\n    if ((stream.flags & 2097155) === 0) {\n      throw new FS.ErrnoError(8);\n    }\n    if (FS.isDir(stream.node.mode)) {\n      throw new FS.ErrnoError(31);\n    }\n    if (!stream.stream_ops.write) {\n      throw new FS.ErrnoError(28);\n    }\n    if (stream.flags & 1024) {\n      FS.llseek(stream, 0, 2);\n    }\n    var seeking = typeof position !== \"undefined\";\n    if (!seeking) {\n      position = stream.position;\n    } else if (!stream.seekable) {\n      throw new FS.ErrnoError(70);\n    }\n    var bytesWritten = stream.stream_ops.write(\n      stream,\n      buffer,\n      offset,\n      length,\n      position,\n      canOwn\n    );\n    if (!seeking) stream.position += bytesWritten;\n    try {\n      if (stream.path && FS.trackingDelegate[\"onWriteToFile\"])\n        FS.trackingDelegate[\"onWriteToFile\"](stream.path);\n    } catch (e) {\n      console.log(\n        \"FS.trackingDelegate['onWriteToFile']('\" +\n          stream.path +\n          \"') threw an exception: \" +\n          e.message\n      );\n    }\n    return bytesWritten;\n  },\n  allocate: function(stream, offset, length) {\n    if (FS.isClosed(stream)) {\n      throw new FS.ErrnoError(8);\n    }\n    if (offset < 0 || length <= 0) {\n      throw new FS.ErrnoError(28);\n    }\n    if ((stream.flags & 2097155) === 0) {\n      throw new FS.ErrnoError(8);\n    }\n    if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {\n      throw new FS.ErrnoError(43);\n    }\n    if (!stream.stream_ops.allocate) {\n      throw new FS.ErrnoError(138);\n    }\n    stream.stream_ops.allocate(stream, offset, length);\n  },\n  mmap: function(stream, buffer, offset, length, position, prot, flags) {\n    if (\n      (prot & 2) !== 0 &&\n      (flags & 2) === 0 &&\n      (stream.flags & 2097155) !== 2\n    ) {\n      throw new FS.ErrnoError(2);\n    }\n    if ((stream.flags & 2097155) === 1) {\n      throw new FS.ErrnoError(2);\n    }\n    if (!stream.stream_ops.mmap) {\n      throw new FS.ErrnoError(43);\n    }\n    return stream.stream_ops.mmap(\n      stream,\n      buffer,\n      offset,\n      length,\n      position,\n      prot,\n      flags\n    );\n  },\n  msync: function(stream, buffer, offset, length, mmapFlags) {\n    if (!stream || !stream.stream_ops.msync) {\n      return 0;\n    }\n    return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);\n  },\n  munmap: function(stream) {\n    return 0;\n  },\n  ioctl: function(stream, cmd, arg) {\n    if (!stream.stream_ops.ioctl) {\n      throw new FS.ErrnoError(59);\n    }\n    return stream.stream_ops.ioctl(stream, cmd, arg);\n  },\n  readFile: function(path, opts) {\n    opts = opts || {};\n    opts.flags = opts.flags || \"r\";\n    opts.encoding = opts.encoding || \"binary\";\n    if (opts.encoding !== \"utf8\" && opts.encoding !== \"binary\") {\n      throw new Error('Invalid encoding type \"' + opts.encoding + '\"');\n    }\n    var ret;\n    var stream = FS.open(path, opts.flags);\n    var stat = FS.stat(path);\n    var length = stat.size;\n    var buf = new Uint8Array(length);\n    FS.read(stream, buf, 0, length, 0);\n    if (opts.encoding === \"utf8\") {\n      ret = UTF8ArrayToString(buf, 0);\n    } else if (opts.encoding === \"binary\") {\n      ret = buf;\n    }\n    FS.close(stream);\n    return ret;\n  },\n  writeFile: function(path, data, opts) {\n    opts = opts || {};\n    opts.flags = opts.flags || \"w\";\n    var stream = FS.open(path, opts.flags, opts.mode);\n    if (typeof data === \"string\") {\n      var buf = new Uint8Array(lengthBytesUTF8(data) + 1);\n      var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);\n      FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);\n    } else if (ArrayBuffer.isView(data)) {\n      FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);\n    } else {\n      throw new Error(\"Unsupported data type\");\n    }\n    FS.close(stream);\n  },\n  cwd: function() {\n    return FS.currentPath;\n  },\n  chdir: function(path) {\n    var lookup = FS.lookupPath(path, { follow: true });\n    if (lookup.node === null) {\n      throw new FS.ErrnoError(44);\n    }\n    if (!FS.isDir(lookup.node.mode)) {\n      throw new FS.ErrnoError(54);\n    }\n    var err = FS.nodePermissions(lookup.node, \"x\");\n    if (err) {\n      throw new FS.ErrnoError(err);\n    }\n    FS.currentPath = lookup.path;\n  },\n  createDefaultDirectories: function() {\n    FS.mkdir(\"/tmp\");\n    FS.mkdir(\"/home\");\n    FS.mkdir(\"/home/web_user\");\n  },\n  createDefaultDevices: function() {\n    FS.mkdir(\"/dev\");\n    FS.registerDevice(FS.makedev(1, 3), {\n      read: function() {\n        return 0;\n      },\n      write: function(stream, buffer, offset, length, pos) {\n        return length;\n      }\n    });\n    FS.mkdev(\"/dev/null\", FS.makedev(1, 3));\n    TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);\n    TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);\n    FS.mkdev(\"/dev/tty\", FS.makedev(5, 0));\n    FS.mkdev(\"/dev/tty1\", FS.makedev(6, 0));\n    var random_device;\n    if (\n      typeof crypto === \"object\" &&\n      typeof crypto[\"getRandomValues\"] === \"function\"\n    ) {\n      var randomBuffer = new Uint8Array(1);\n      random_device = function() {\n        crypto.getRandomValues(randomBuffer);\n        return randomBuffer[0];\n      };\n    } else if (ENVIRONMENT_IS_NODE) {\n      try {\n        var crypto_module = __webpack_require__(27);\n        random_device = function() {\n          return crypto_module[\"randomBytes\"](1)[0];\n        };\n      } catch (e) {}\n    } else {\n    }\n    if (!random_device) {\n      random_device = function() {\n        abort(\"random_device\");\n      };\n    }\n    FS.createDevice(\"/dev\", \"random\", random_device);\n    FS.createDevice(\"/dev\", \"urandom\", random_device);\n    FS.mkdir(\"/dev/shm\");\n    FS.mkdir(\"/dev/shm/tmp\");\n  },\n  createSpecialDirectories: function() {\n    FS.mkdir(\"/proc\");\n    FS.mkdir(\"/proc/self\");\n    FS.mkdir(\"/proc/self/fd\");\n    FS.mount(\n      {\n        mount: function() {\n          var node = FS.createNode(\"/proc/self\", \"fd\", 16384 | 511, 73);\n          node.node_ops = {\n            lookup: function(parent, name) {\n              var fd = +name;\n              var stream = FS.getStream(fd);\n              if (!stream) throw new FS.ErrnoError(8);\n              var ret = {\n                parent: null,\n                mount: { mountpoint: \"fake\" },\n                node_ops: {\n                  readlink: function() {\n                    return stream.path;\n                  }\n                }\n              };\n              ret.parent = ret;\n              return ret;\n            }\n          };\n          return node;\n        }\n      },\n      {},\n      \"/proc/self/fd\"\n    );\n  },\n  createStandardStreams: function() {\n    if (Module[\"stdin\"]) {\n      FS.createDevice(\"/dev\", \"stdin\", Module[\"stdin\"]);\n    } else {\n      FS.symlink(\"/dev/tty\", \"/dev/stdin\");\n    }\n    if (Module[\"stdout\"]) {\n      FS.createDevice(\"/dev\", \"stdout\", null, Module[\"stdout\"]);\n    } else {\n      FS.symlink(\"/dev/tty\", \"/dev/stdout\");\n    }\n    if (Module[\"stderr\"]) {\n      FS.createDevice(\"/dev\", \"stderr\", null, Module[\"stderr\"]);\n    } else {\n      FS.symlink(\"/dev/tty1\", \"/dev/stderr\");\n    }\n    var stdin = FS.open(\"/dev/stdin\", \"r\");\n    var stdout = FS.open(\"/dev/stdout\", \"w\");\n    var stderr = FS.open(\"/dev/stderr\", \"w\");\n  },\n  ensureErrnoError: function() {\n    if (FS.ErrnoError) return;\n    FS.ErrnoError = function ErrnoError(errno, node) {\n      this.node = node;\n      this.setErrno = function(errno) {\n        this.errno = errno;\n      };\n      this.setErrno(errno);\n      this.message = \"FS error\";\n    };\n    FS.ErrnoError.prototype = new Error();\n    FS.ErrnoError.prototype.constructor = FS.ErrnoError;\n    [44].forEach(function(code) {\n      FS.genericErrors[code] = new FS.ErrnoError(code);\n      FS.genericErrors[code].stack = \"<generic error, no stack>\";\n    });\n  },\n  staticInit: function() {\n    FS.ensureErrnoError();\n    FS.nameTable = new Array(4096);\n    FS.mount(MEMFS, {}, \"/\");\n    FS.createDefaultDirectories();\n    FS.createDefaultDevices();\n    FS.createSpecialDirectories();\n    FS.filesystems = { MEMFS: MEMFS, NODEFS: NODEFS };\n  },\n  init: function(input, output, error) {\n    FS.init.initialized = true;\n    FS.ensureErrnoError();\n    Module[\"stdin\"] = input || Module[\"stdin\"];\n    Module[\"stdout\"] = output || Module[\"stdout\"];\n    Module[\"stderr\"] = error || Module[\"stderr\"];\n    FS.createStandardStreams();\n  },\n  quit: function() {\n    FS.init.initialized = false;\n    var fflush = Module[\"_fflush\"];\n    if (fflush) fflush(0);\n    for (var i = 0; i < FS.streams.length; i++) {\n      var stream = FS.streams[i];\n      if (!stream) {\n        continue;\n      }\n      FS.close(stream);\n    }\n  },\n  getMode: function(canRead, canWrite) {\n    var mode = 0;\n    if (canRead) mode |= 292 | 73;\n    if (canWrite) mode |= 146;\n    return mode;\n  },\n  joinPath: function(parts, forceRelative) {\n    var path = PATH.join.apply(null, parts);\n    if (forceRelative && path[0] == \"/\") path = path.substr(1);\n    return path;\n  },\n  absolutePath: function(relative, base) {\n    return PATH_FS.resolve(base, relative);\n  },\n  standardizePath: function(path) {\n    return PATH.normalize(path);\n  },\n  findObject: function(path, dontResolveLastLink) {\n    var ret = FS.analyzePath(path, dontResolveLastLink);\n    if (ret.exists) {\n      return ret.object;\n    } else {\n      ___setErrNo(ret.error);\n      return null;\n    }\n  },\n  analyzePath: function(path, dontResolveLastLink) {\n    try {\n      var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });\n      path = lookup.path;\n    } catch (e) {}\n    var ret = {\n      isRoot: false,\n      exists: false,\n      error: 0,\n      name: null,\n      path: null,\n      object: null,\n      parentExists: false,\n      parentPath: null,\n      parentObject: null\n    };\n    try {\n      var lookup = FS.lookupPath(path, { parent: true });\n      ret.parentExists = true;\n      ret.parentPath = lookup.path;\n      ret.parentObject = lookup.node;\n      ret.name = PATH.basename(path);\n      lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });\n      ret.exists = true;\n      ret.path = lookup.path;\n      ret.object = lookup.node;\n      ret.name = lookup.node.name;\n      ret.isRoot = lookup.path === \"/\";\n    } catch (e) {\n      ret.error = e.errno;\n    }\n    return ret;\n  },\n  createFolder: function(parent, name, canRead, canWrite) {\n    var path = PATH.join2(\n      typeof parent === \"string\" ? parent : FS.getPath(parent),\n      name\n    );\n    var mode = FS.getMode(canRead, canWrite);\n    return FS.mkdir(path, mode);\n  },\n  createPath: function(parent, path, canRead, canWrite) {\n    parent = typeof parent === \"string\" ? parent : FS.getPath(parent);\n    var parts = path.split(\"/\").reverse();\n    while (parts.length) {\n      var part = parts.pop();\n      if (!part) continue;\n      var current = PATH.join2(parent, part);\n      try {\n        FS.mkdir(current);\n      } catch (e) {}\n      parent = current;\n    }\n    return current;\n  },\n  createFile: function(parent, name, properties, canRead, canWrite) {\n    var path = PATH.join2(\n      typeof parent === \"string\" ? parent : FS.getPath(parent),\n      name\n    );\n    var mode = FS.getMode(canRead, canWrite);\n    return FS.create(path, mode);\n  },\n  createDataFile: function(parent, name, data, canRead, canWrite, canOwn) {\n    var path = name\n      ? PATH.join2(\n          typeof parent === \"string\" ? parent : FS.getPath(parent),\n          name\n        )\n      : parent;\n    var mode = FS.getMode(canRead, canWrite);\n    var node = FS.create(path, mode);\n    if (data) {\n      if (typeof data === \"string\") {\n        var arr = new Array(data.length);\n        for (var i = 0, len = data.length; i < len; ++i)\n          arr[i] = data.charCodeAt(i);\n        data = arr;\n      }\n      FS.chmod(node, mode | 146);\n      var stream = FS.open(node, \"w\");\n      FS.write(stream, data, 0, data.length, 0, canOwn);\n      FS.close(stream);\n      FS.chmod(node, mode);\n    }\n    return node;\n  },\n  createDevice: function(parent, name, input, output) {\n    var path = PATH.join2(\n      typeof parent === \"string\" ? parent : FS.getPath(parent),\n      name\n    );\n    var mode = FS.getMode(!!input, !!output);\n    if (!FS.createDevice.major) FS.createDevice.major = 64;\n    var dev = FS.makedev(FS.createDevice.major++, 0);\n    FS.registerDevice(dev, {\n      open: function(stream) {\n        stream.seekable = false;\n      },\n      close: function(stream) {\n        if (output && output.buffer && output.buffer.length) {\n          output(10);\n        }\n      },\n      read: function(stream, buffer, offset, length, pos) {\n        var bytesRead = 0;\n        for (var i = 0; i < length; i++) {\n          var result;\n          try {\n            result = input();\n          } catch (e) {\n            throw new FS.ErrnoError(29);\n          }\n          if (result === undefined && bytesRead === 0) {\n            throw new FS.ErrnoError(6);\n          }\n          if (result === null || result === undefined) break;\n          bytesRead++;\n          buffer[offset + i] = result;\n        }\n        if (bytesRead) {\n          stream.node.timestamp = Date.now();\n        }\n        return bytesRead;\n      },\n      write: function(stream, buffer, offset, length, pos) {\n        for (var i = 0; i < length; i++) {\n          try {\n            output(buffer[offset + i]);\n          } catch (e) {\n            throw new FS.ErrnoError(29);\n          }\n        }\n        if (length) {\n          stream.node.timestamp = Date.now();\n        }\n        return i;\n      }\n    });\n    return FS.mkdev(path, mode, dev);\n  },\n  createLink: function(parent, name, target, canRead, canWrite) {\n    var path = PATH.join2(\n      typeof parent === \"string\" ? parent : FS.getPath(parent),\n      name\n    );\n    return FS.symlink(target, path);\n  },\n  forceLoadFile: function(obj) {\n    if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;\n    var success = true;\n    if (typeof XMLHttpRequest !== \"undefined\") {\n      throw new Error(\n        \"Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.\"\n      );\n    } else if (read_) {\n      try {\n        obj.contents = intArrayFromString(read_(obj.url), true);\n        obj.usedBytes = obj.contents.length;\n      } catch (e) {\n        success = false;\n      }\n    } else {\n      throw new Error(\"Cannot load without read() or XMLHttpRequest.\");\n    }\n    if (!success) ___setErrNo(29);\n    return success;\n  },\n  createLazyFile: function(parent, name, url, canRead, canWrite) {\n    function LazyUint8Array() {\n      this.lengthKnown = false;\n      this.chunks = [];\n    }\n    LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {\n      if (idx > this.length - 1 || idx < 0) {\n        return undefined;\n      }\n      var chunkOffset = idx % this.chunkSize;\n      var chunkNum = (idx / this.chunkSize) | 0;\n      return this.getter(chunkNum)[chunkOffset];\n    };\n    LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(\n      getter\n    ) {\n      this.getter = getter;\n    };\n    LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {\n      var xhr = new XMLHttpRequest();\n      xhr.open(\"HEAD\", url, false);\n      xhr.send(null);\n      if (!((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304))\n        throw new Error(\"Couldn't load \" + url + \". Status: \" + xhr.status);\n      var datalength = Number(xhr.getResponseHeader(\"Content-length\"));\n      var header;\n      var hasByteServing =\n        (header = xhr.getResponseHeader(\"Accept-Ranges\")) && header === \"bytes\";\n      var usesGzip =\n        (header = xhr.getResponseHeader(\"Content-Encoding\")) &&\n        header === \"gzip\";\n      var chunkSize = 1024 * 1024;\n      if (!hasByteServing) chunkSize = datalength;\n      var doXHR = function(from, to) {\n        if (from > to)\n          throw new Error(\n            \"invalid range (\" + from + \", \" + to + \") or no bytes requested!\"\n          );\n        if (to > datalength - 1)\n          throw new Error(\n            \"only \" + datalength + \" bytes available! programmer error!\"\n          );\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", url, false);\n        if (datalength !== chunkSize)\n          xhr.setRequestHeader(\"Range\", \"bytes=\" + from + \"-\" + to);\n        if (typeof Uint8Array != \"undefined\") xhr.responseType = \"arraybuffer\";\n        if (xhr.overrideMimeType) {\n          xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n        }\n        xhr.send(null);\n        if (!((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304))\n          throw new Error(\"Couldn't load \" + url + \". Status: \" + xhr.status);\n        if (xhr.response !== undefined) {\n          return new Uint8Array(xhr.response || []);\n        } else {\n          return intArrayFromString(xhr.responseText || \"\", true);\n        }\n      };\n      var lazyArray = this;\n      lazyArray.setDataGetter(function(chunkNum) {\n        var start = chunkNum * chunkSize;\n        var end = (chunkNum + 1) * chunkSize - 1;\n        end = Math.min(end, datalength - 1);\n        if (typeof lazyArray.chunks[chunkNum] === \"undefined\") {\n          lazyArray.chunks[chunkNum] = doXHR(start, end);\n        }\n        if (typeof lazyArray.chunks[chunkNum] === \"undefined\")\n          throw new Error(\"doXHR failed!\");\n        return lazyArray.chunks[chunkNum];\n      });\n      if (usesGzip || !datalength) {\n        chunkSize = datalength = 1;\n        datalength = this.getter(0).length;\n        chunkSize = datalength;\n        console.log(\n          \"LazyFiles on gzip forces download of the whole file when length is accessed\"\n        );\n      }\n      this._length = datalength;\n      this._chunkSize = chunkSize;\n      this.lengthKnown = true;\n    };\n    if (typeof XMLHttpRequest !== \"undefined\") {\n      if (!ENVIRONMENT_IS_WORKER)\n        throw \"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc\";\n      var lazyArray = new LazyUint8Array();\n      Object.defineProperties(lazyArray, {\n        length: {\n          get: function() {\n            if (!this.lengthKnown) {\n              this.cacheLength();\n            }\n            return this._length;\n          }\n        },\n        chunkSize: {\n          get: function() {\n            if (!this.lengthKnown) {\n              this.cacheLength();\n            }\n            return this._chunkSize;\n          }\n        }\n      });\n      var properties = { isDevice: false, contents: lazyArray };\n    } else {\n      var properties = { isDevice: false, url: url };\n    }\n    var node = FS.createFile(parent, name, properties, canRead, canWrite);\n    if (properties.contents) {\n      node.contents = properties.contents;\n    } else if (properties.url) {\n      node.contents = null;\n      node.url = properties.url;\n    }\n    Object.defineProperties(node, {\n      usedBytes: {\n        get: function() {\n          return this.contents.length;\n        }\n      }\n    });\n    var stream_ops = {};\n    var keys = Object.keys(node.stream_ops);\n    keys.forEach(function(key) {\n      var fn = node.stream_ops[key];\n      stream_ops[key] = function forceLoadLazyFile() {\n        if (!FS.forceLoadFile(node)) {\n          throw new FS.ErrnoError(29);\n        }\n        return fn.apply(null, arguments);\n      };\n    });\n    stream_ops.read = function stream_ops_read(\n      stream,\n      buffer,\n      offset,\n      length,\n      position\n    ) {\n      if (!FS.forceLoadFile(node)) {\n        throw new FS.ErrnoError(29);\n      }\n      var contents = stream.node.contents;\n      if (position >= contents.length) return 0;\n      var size = Math.min(contents.length - position, length);\n      if (contents.slice) {\n        for (var i = 0; i < size; i++) {\n          buffer[offset + i] = contents[position + i];\n        }\n      } else {\n        for (var i = 0; i < size; i++) {\n          buffer[offset + i] = contents.get(position + i);\n        }\n      }\n      return size;\n    };\n    node.stream_ops = stream_ops;\n    return node;\n  },\n  createPreloadedFile: function(\n    parent,\n    name,\n    url,\n    canRead,\n    canWrite,\n    onload,\n    onerror,\n    dontCreateFile,\n    canOwn,\n    preFinish\n  ) {\n    Browser.init();\n    var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;\n    var dep = getUniqueRunDependency(\"cp \" + fullname);\n    function processData(byteArray) {\n      function finish(byteArray) {\n        if (preFinish) preFinish();\n        if (!dontCreateFile) {\n          FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);\n        }\n        if (onload) onload();\n        removeRunDependency(dep);\n      }\n      var handled = false;\n      Module[\"preloadPlugins\"].forEach(function(plugin) {\n        if (handled) return;\n        if (plugin[\"canHandle\"](fullname)) {\n          plugin[\"handle\"](byteArray, fullname, finish, function() {\n            if (onerror) onerror();\n            removeRunDependency(dep);\n          });\n          handled = true;\n        }\n      });\n      if (!handled) finish(byteArray);\n    }\n    addRunDependency(dep);\n    if (typeof url == \"string\") {\n      Browser.asyncLoad(\n        url,\n        function(byteArray) {\n          processData(byteArray);\n        },\n        onerror\n      );\n    } else {\n      processData(url);\n    }\n  },\n  indexedDB: function() {\n    return (\n      window.indexedDB ||\n      window.mozIndexedDB ||\n      window.webkitIndexedDB ||\n      window.msIndexedDB\n    );\n  },\n  DB_NAME: function() {\n    return \"EM_FS_\" + window.location.pathname;\n  },\n  DB_VERSION: 20,\n  DB_STORE_NAME: \"FILE_DATA\",\n  saveFilesToDB: function(paths, onload, onerror) {\n    onload = onload || function() {};\n    onerror = onerror || function() {};\n    var indexedDB = FS.indexedDB();\n    try {\n      var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);\n    } catch (e) {\n      return onerror(e);\n    }\n    openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {\n      console.log(\"creating db\");\n      var db = openRequest.result;\n      db.createObjectStore(FS.DB_STORE_NAME);\n    };\n    openRequest.onsuccess = function openRequest_onsuccess() {\n      var db = openRequest.result;\n      var transaction = db.transaction([FS.DB_STORE_NAME], \"readwrite\");\n      var files = transaction.objectStore(FS.DB_STORE_NAME);\n      var ok = 0,\n        fail = 0,\n        total = paths.length;\n      function finish() {\n        if (fail == 0) onload();\n        else onerror();\n      }\n      paths.forEach(function(path) {\n        var putRequest = files.put(FS.analyzePath(path).object.contents, path);\n        putRequest.onsuccess = function putRequest_onsuccess() {\n          ok++;\n          if (ok + fail == total) finish();\n        };\n        putRequest.onerror = function putRequest_onerror() {\n          fail++;\n          if (ok + fail == total) finish();\n        };\n      });\n      transaction.onerror = onerror;\n    };\n    openRequest.onerror = onerror;\n  },\n  loadFilesFromDB: function(paths, onload, onerror) {\n    onload = onload || function() {};\n    onerror = onerror || function() {};\n    var indexedDB = FS.indexedDB();\n    try {\n      var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);\n    } catch (e) {\n      return onerror(e);\n    }\n    openRequest.onupgradeneeded = onerror;\n    openRequest.onsuccess = function openRequest_onsuccess() {\n      var db = openRequest.result;\n      try {\n        var transaction = db.transaction([FS.DB_STORE_NAME], \"readonly\");\n      } catch (e) {\n        onerror(e);\n        return;\n      }\n      var files = transaction.objectStore(FS.DB_STORE_NAME);\n      var ok = 0,\n        fail = 0,\n        total = paths.length;\n      function finish() {\n        if (fail == 0) onload();\n        else onerror();\n      }\n      paths.forEach(function(path) {\n        var getRequest = files.get(path);\n        getRequest.onsuccess = function getRequest_onsuccess() {\n          if (FS.analyzePath(path).exists) {\n            FS.unlink(path);\n          }\n          FS.createDataFile(\n            PATH.dirname(path),\n            PATH.basename(path),\n            getRequest.result,\n            true,\n            true,\n            true\n          );\n          ok++;\n          if (ok + fail == total) finish();\n        };\n        getRequest.onerror = function getRequest_onerror() {\n          fail++;\n          if (ok + fail == total) finish();\n        };\n      });\n      transaction.onerror = onerror;\n    };\n    openRequest.onerror = onerror;\n  }\n};\nvar SYSCALLS = {\n  DEFAULT_POLLMASK: 5,\n  mappings: {},\n  umask: 511,\n  calculateAt: function(dirfd, path) {\n    if (path[0] !== \"/\") {\n      var dir;\n      if (dirfd === -100) {\n        dir = FS.cwd();\n      } else {\n        var dirstream = FS.getStream(dirfd);\n        if (!dirstream) throw new FS.ErrnoError(8);\n        dir = dirstream.path;\n      }\n      path = PATH.join2(dir, path);\n    }\n    return path;\n  },\n  doStat: function(func, path, buf) {\n    try {\n      var stat = func(path);\n    } catch (e) {\n      if (\n        e &&\n        e.node &&\n        PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))\n      ) {\n        return -54;\n      }\n      throw e;\n    }\n    HEAP32[buf >> 2] = stat.dev;\n    HEAP32[(buf + 4) >> 2] = 0;\n    HEAP32[(buf + 8) >> 2] = stat.ino;\n    HEAP32[(buf + 12) >> 2] = stat.mode;\n    HEAP32[(buf + 16) >> 2] = stat.nlink;\n    HEAP32[(buf + 20) >> 2] = stat.uid;\n    HEAP32[(buf + 24) >> 2] = stat.gid;\n    HEAP32[(buf + 28) >> 2] = stat.rdev;\n    HEAP32[(buf + 32) >> 2] = 0;\n    (tempI64 = [\n      stat.size >>> 0,\n      ((tempDouble = stat.size),\n      +Math_abs(tempDouble) >= 1\n        ? tempDouble > 0\n          ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>>\n            0\n          : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>>\n            0\n        : 0)\n    ]),\n      (HEAP32[(buf + 40) >> 2] = tempI64[0]),\n      (HEAP32[(buf + 44) >> 2] = tempI64[1]);\n    HEAP32[(buf + 48) >> 2] = 4096;\n    HEAP32[(buf + 52) >> 2] = stat.blocks;\n    HEAP32[(buf + 56) >> 2] = (stat.atime.getTime() / 1e3) | 0;\n    HEAP32[(buf + 60) >> 2] = 0;\n    HEAP32[(buf + 64) >> 2] = (stat.mtime.getTime() / 1e3) | 0;\n    HEAP32[(buf + 68) >> 2] = 0;\n    HEAP32[(buf + 72) >> 2] = (stat.ctime.getTime() / 1e3) | 0;\n    HEAP32[(buf + 76) >> 2] = 0;\n    (tempI64 = [\n      stat.ino >>> 0,\n      ((tempDouble = stat.ino),\n      +Math_abs(tempDouble) >= 1\n        ? tempDouble > 0\n          ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>>\n            0\n          : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>>\n            0\n        : 0)\n    ]),\n      (HEAP32[(buf + 80) >> 2] = tempI64[0]),\n      (HEAP32[(buf + 84) >> 2] = tempI64[1]);\n    return 0;\n  },\n  doMsync: function(addr, stream, len, flags) {\n    var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));\n    FS.msync(stream, buffer, 0, len, flags);\n  },\n  doMkdir: function(path, mode) {\n    path = PATH.normalize(path);\n    if (path[path.length - 1] === \"/\") path = path.substr(0, path.length - 1);\n    FS.mkdir(path, mode, 0);\n    return 0;\n  },\n  doMknod: function(path, mode, dev) {\n    switch (mode & 61440) {\n      case 32768:\n      case 8192:\n      case 24576:\n      case 4096:\n      case 49152:\n        break;\n      default:\n        return -28;\n    }\n    FS.mknod(path, mode, dev);\n    return 0;\n  },\n  doReadlink: function(path, buf, bufsize) {\n    if (bufsize <= 0) return -28;\n    var ret = FS.readlink(path);\n    var len = Math.min(bufsize, lengthBytesUTF8(ret));\n    var endChar = HEAP8[buf + len];\n    stringToUTF8(ret, buf, bufsize + 1);\n    HEAP8[buf + len] = endChar;\n    return len;\n  },\n  doAccess: function(path, amode) {\n    if (amode & ~7) {\n      return -28;\n    }\n    var node;\n    var lookup = FS.lookupPath(path, { follow: true });\n    node = lookup.node;\n    if (!node) {\n      return -44;\n    }\n    var perms = \"\";\n    if (amode & 4) perms += \"r\";\n    if (amode & 2) perms += \"w\";\n    if (amode & 1) perms += \"x\";\n    if (perms && FS.nodePermissions(node, perms)) {\n      return -2;\n    }\n    return 0;\n  },\n  doDup: function(path, flags, suggestFD) {\n    var suggest = FS.getStream(suggestFD);\n    if (suggest) FS.close(suggest);\n    return FS.open(path, flags, 0, suggestFD, suggestFD).fd;\n  },\n  doReadv: function(stream, iov, iovcnt, offset) {\n    var ret = 0;\n    for (var i = 0; i < iovcnt; i++) {\n      var ptr = HEAP32[(iov + i * 8) >> 2];\n      var len = HEAP32[(iov + (i * 8 + 4)) >> 2];\n      var curr = FS.read(stream, HEAP8, ptr, len, offset);\n      if (curr < 0) return -1;\n      ret += curr;\n      if (curr < len) break;\n    }\n    return ret;\n  },\n  doWritev: function(stream, iov, iovcnt, offset) {\n    var ret = 0;\n    for (var i = 0; i < iovcnt; i++) {\n      var ptr = HEAP32[(iov + i * 8) >> 2];\n      var len = HEAP32[(iov + (i * 8 + 4)) >> 2];\n      var curr = FS.write(stream, HEAP8, ptr, len, offset);\n      if (curr < 0) return -1;\n      ret += curr;\n    }\n    return ret;\n  },\n  varargs: 0,\n  get: function(varargs) {\n    SYSCALLS.varargs += 4;\n    var ret = HEAP32[(SYSCALLS.varargs - 4) >> 2];\n    return ret;\n  },\n  getStr: function() {\n    var ret = UTF8ToString(SYSCALLS.get());\n    return ret;\n  },\n  getStreamFromFD: function(fd) {\n    if (fd === undefined) fd = SYSCALLS.get();\n    var stream = FS.getStream(fd);\n    if (!stream) throw new FS.ErrnoError(8);\n    return stream;\n  },\n  get64: function() {\n    var low = SYSCALLS.get(),\n      high = SYSCALLS.get();\n    return low;\n  },\n  getZero: function() {\n    SYSCALLS.get();\n  }\n};\nfunction ___syscall10(which, varargs) {\n  SYSCALLS.varargs = varargs;\n  try {\n    var path = SYSCALLS.getStr();\n    FS.unlink(path);\n    return 0;\n  } catch (e) {\n    if (typeof FS === \"undefined\" || !(e instanceof FS.ErrnoError)) abort(e);\n    return -e.errno;\n  }\n}\nfunction ___syscall15(which, varargs) {\n  SYSCALLS.varargs = varargs;\n  try {\n    var path = SYSCALLS.getStr(),\n      mode = SYSCALLS.get();\n    FS.chmod(path, mode);\n    return 0;\n  } catch (e) {\n    if (typeof FS === \"undefined\" || !(e instanceof FS.ErrnoError)) abort(e);\n    return -e.errno;\n  }\n}\nfunction ___syscall195(which, varargs) {\n  SYSCALLS.varargs = varargs;\n  try {\n    var path = SYSCALLS.getStr(),\n      buf = SYSCALLS.get();\n    return SYSCALLS.doStat(FS.stat, path, buf);\n  } catch (e) {\n    if (typeof FS === \"undefined\" || !(e instanceof FS.ErrnoError)) abort(e);\n    return -e.errno;\n  }\n}\nfunction ___syscall197(which, varargs) {\n  SYSCALLS.varargs = varargs;\n  try {\n    var stream = SYSCALLS.getStreamFromFD(),\n      buf = SYSCALLS.get();\n    return SYSCALLS.doStat(FS.stat, stream.path, buf);\n  } catch (e) {\n    if (typeof FS === \"undefined\" || !(e instanceof FS.ErrnoError)) abort(e);\n    return -e.errno;\n  }\n}\nfunction ___syscall221(which, varargs) {\n  SYSCALLS.varargs = varargs;\n  try {\n    var stream = SYSCALLS.getStreamFromFD(),\n      cmd = SYSCALLS.get();\n    switch (cmd) {\n      case 0: {\n        var arg = SYSCALLS.get();\n        if (arg < 0) {\n          return -28;\n        }\n        var newStream;\n        newStream = FS.open(stream.path, stream.flags, 0, arg);\n        return newStream.fd;\n      }\n      case 1:\n      case 2:\n        return 0;\n      case 3:\n        return stream.flags;\n      case 4: {\n        var arg = SYSCALLS.get();\n        stream.flags |= arg;\n        return 0;\n      }\n      case 12: {\n        var arg = SYSCALLS.get();\n        var offset = 0;\n        HEAP16[(arg + offset) >> 1] = 2;\n        return 0;\n      }\n      case 13:\n      case 14:\n        return 0;\n      case 16:\n      case 8:\n        return -28;\n      case 9:\n        ___setErrNo(28);\n        return -1;\n      default: {\n        return -28;\n      }\n    }\n  } catch (e) {\n    if (typeof FS === \"undefined\" || !(e instanceof FS.ErrnoError)) abort(e);\n    return -e.errno;\n  }\n}\nfunction ___syscall3(which, varargs) {\n  SYSCALLS.varargs = varargs;\n  try {\n    var stream = SYSCALLS.getStreamFromFD(),\n      buf = SYSCALLS.get(),\n      count = SYSCALLS.get();\n    return FS.read(stream, HEAP8, buf, count);\n  } catch (e) {\n    if (typeof FS === \"undefined\" || !(e instanceof FS.ErrnoError)) abort(e);\n    return -e.errno;\n  }\n}\nfunction ___syscall38(which, varargs) {\n  SYSCALLS.varargs = varargs;\n  try {\n    var old_path = SYSCALLS.getStr(),\n      new_path = SYSCALLS.getStr();\n    FS.rename(old_path, new_path);\n    return 0;\n  } catch (e) {\n    if (typeof FS === \"undefined\" || !(e instanceof FS.ErrnoError)) abort(e);\n    return -e.errno;\n  }\n}\nfunction ___syscall40(which, varargs) {\n  SYSCALLS.varargs = varargs;\n  try {\n    var path = SYSCALLS.getStr();\n    FS.rmdir(path);\n    return 0;\n  } catch (e) {\n    if (typeof FS === \"undefined\" || !(e instanceof FS.ErrnoError)) abort(e);\n    return -e.errno;\n  }\n}\nfunction ___syscall5(which, varargs) {\n  SYSCALLS.varargs = varargs;\n  try {\n    var pathname = SYSCALLS.getStr(),\n      flags = SYSCALLS.get(),\n      mode = SYSCALLS.get();\n    var stream = FS.open(pathname, flags, mode);\n    return stream.fd;\n  } catch (e) {\n    if (typeof FS === \"undefined\" || !(e instanceof FS.ErrnoError)) abort(e);\n    return -e.errno;\n  }\n}\nfunction ___syscall54(which, varargs) {\n  SYSCALLS.varargs = varargs;\n  try {\n    var stream = SYSCALLS.getStreamFromFD(),\n      op = SYSCALLS.get();\n    switch (op) {\n      case 21509:\n      case 21505: {\n        if (!stream.tty) return -59;\n        return 0;\n      }\n      case 21510:\n      case 21511:\n      case 21512:\n      case 21506:\n      case 21507:\n      case 21508: {\n        if (!stream.tty) return -59;\n        return 0;\n      }\n      case 21519: {\n        if (!stream.tty) return -59;\n        var argp = SYSCALLS.get();\n        HEAP32[argp >> 2] = 0;\n        return 0;\n      }\n      case 21520: {\n        if (!stream.tty) return -59;\n        return -28;\n      }\n      case 21531: {\n        var argp = SYSCALLS.get();\n        return FS.ioctl(stream, op, argp);\n      }\n      case 21523: {\n        if (!stream.tty) return -59;\n        return 0;\n      }\n      case 21524: {\n        if (!stream.tty) return -59;\n        return 0;\n      }\n      default:\n        abort(\"bad ioctl syscall \" + op);\n    }\n  } catch (e) {\n    if (typeof FS === \"undefined\" || !(e instanceof FS.ErrnoError)) abort(e);\n    return -e.errno;\n  }\n}\nfunction ___unlock() {}\nfunction _emscripten_get_heap_size() {\n  return HEAP8.length;\n}\nfunction _emscripten_memcpy_big(dest, src, num) {\n  HEAPU8.set(HEAPU8.subarray(src, src + num), dest);\n}\nfunction emscripten_realloc_buffer(size) {\n  try {\n    wasmMemory.grow((size - buffer.byteLength + 65535) >> 16);\n    updateGlobalBufferAndViews(wasmMemory.buffer);\n    return 1;\n  } catch (e) {}\n}\nfunction _emscripten_resize_heap(requestedSize) {\n  var oldSize = _emscripten_get_heap_size();\n  var PAGE_MULTIPLE = 65536;\n  var LIMIT = 2147483648 - PAGE_MULTIPLE;\n  if (requestedSize > LIMIT) {\n    return false;\n  }\n  var MIN_TOTAL_MEMORY = 16777216;\n  var newSize = Math.max(oldSize, MIN_TOTAL_MEMORY);\n  while (newSize < requestedSize) {\n    if (newSize <= 536870912) {\n      newSize = alignUp(2 * newSize, PAGE_MULTIPLE);\n    } else {\n      newSize = Math.min(\n        alignUp((3 * newSize + 2147483648) / 4, PAGE_MULTIPLE),\n        LIMIT\n      );\n    }\n  }\n  var replacement = emscripten_realloc_buffer(newSize);\n  if (!replacement) {\n    return false;\n  }\n  return true;\n}\nfunction _fd_close(fd) {\n  try {\n    var stream = SYSCALLS.getStreamFromFD(fd);\n    FS.close(stream);\n    return 0;\n  } catch (e) {\n    if (typeof FS === \"undefined\" || !(e instanceof FS.ErrnoError)) abort(e);\n    return e.errno;\n  }\n}\nfunction _fd_fdstat_get(fd, pbuf) {\n  try {\n    var stream = SYSCALLS.getStreamFromFD(fd);\n    var type = stream.tty\n      ? 2\n      : FS.isDir(stream.mode)\n      ? 3\n      : FS.isLink(stream.mode)\n      ? 7\n      : 4;\n    HEAP8[pbuf >> 0] = type;\n    return 0;\n  } catch (e) {\n    if (typeof FS === \"undefined\" || !(e instanceof FS.ErrnoError)) abort(e);\n    return e.errno;\n  }\n}\nfunction _fd_read(fd, iov, iovcnt, pnum) {\n  try {\n    var stream = SYSCALLS.getStreamFromFD(fd);\n    var num = SYSCALLS.doReadv(stream, iov, iovcnt);\n    HEAP32[pnum >> 2] = num;\n    return 0;\n  } catch (e) {\n    if (typeof FS === \"undefined\" || !(e instanceof FS.ErrnoError)) abort(e);\n    return e.errno;\n  }\n}\nfunction _fd_seek(fd, offset_low, offset_high, whence, newOffset) {\n  try {\n    var stream = SYSCALLS.getStreamFromFD(fd);\n    var HIGH_OFFSET = 4294967296;\n    var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);\n    var DOUBLE_LIMIT = 9007199254740992;\n    if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {\n      return -61;\n    }\n    FS.llseek(stream, offset, whence);\n    (tempI64 = [\n      stream.position >>> 0,\n      ((tempDouble = stream.position),\n      +Math_abs(tempDouble) >= 1\n        ? tempDouble > 0\n          ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>>\n            0\n          : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>>\n            0\n        : 0)\n    ]),\n      (HEAP32[newOffset >> 2] = tempI64[0]),\n      (HEAP32[(newOffset + 4) >> 2] = tempI64[1]);\n    if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null;\n    return 0;\n  } catch (e) {\n    if (typeof FS === \"undefined\" || !(e instanceof FS.ErrnoError)) abort(e);\n    return e.errno;\n  }\n}\nfunction _fd_write(fd, iov, iovcnt, pnum) {\n  try {\n    var stream = SYSCALLS.getStreamFromFD(fd);\n    var num = SYSCALLS.doWritev(stream, iov, iovcnt);\n    HEAP32[pnum >> 2] = num;\n    return 0;\n  } catch (e) {\n    if (typeof FS === \"undefined\" || !(e instanceof FS.ErrnoError)) abort(e);\n    return e.errno;\n  }\n}\nvar ___tm_current = 20656;\nvar ___tm_timezone = (stringToUTF8(\"GMT\", 20704, 4), 20704);\nfunction _gmtime_r(time, tmPtr) {\n  var date = new Date(HEAP32[time >> 2] * 1e3);\n  HEAP32[tmPtr >> 2] = date.getUTCSeconds();\n  HEAP32[(tmPtr + 4) >> 2] = date.getUTCMinutes();\n  HEAP32[(tmPtr + 8) >> 2] = date.getUTCHours();\n  HEAP32[(tmPtr + 12) >> 2] = date.getUTCDate();\n  HEAP32[(tmPtr + 16) >> 2] = date.getUTCMonth();\n  HEAP32[(tmPtr + 20) >> 2] = date.getUTCFullYear() - 1900;\n  HEAP32[(tmPtr + 24) >> 2] = date.getUTCDay();\n  HEAP32[(tmPtr + 36) >> 2] = 0;\n  HEAP32[(tmPtr + 32) >> 2] = 0;\n  var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);\n  var yday = ((date.getTime() - start) / (1e3 * 60 * 60 * 24)) | 0;\n  HEAP32[(tmPtr + 28) >> 2] = yday;\n  HEAP32[(tmPtr + 40) >> 2] = ___tm_timezone;\n  return tmPtr;\n}\nfunction _gmtime(time) {\n  return _gmtime_r(time, ___tm_current);\n}\nfunction _setTempRet0($i) {\n  setTempRet0($i | 0);\n}\nfunction _time(ptr) {\n  var ret = (Date.now() / 1e3) | 0;\n  if (ptr) {\n    HEAP32[ptr >> 2] = ret;\n  }\n  return ret;\n}\nfunction _tzset() {\n  if (_tzset.called) return;\n  _tzset.called = true;\n  HEAP32[__get_timezone() >> 2] = new Date().getTimezoneOffset() * 60;\n  var currentYear = new Date().getFullYear();\n  var winter = new Date(currentYear, 0, 1);\n  var summer = new Date(currentYear, 6, 1);\n  HEAP32[__get_daylight() >> 2] = Number(\n    winter.getTimezoneOffset() != summer.getTimezoneOffset()\n  );\n  function extractZone(date) {\n    var match = date.toTimeString().match(/\\(([A-Za-z ]+)\\)$/);\n    return match ? match[1] : \"GMT\";\n  }\n  var winterName = extractZone(winter);\n  var summerName = extractZone(summer);\n  var winterNamePtr = allocate(\n    intArrayFromString(winterName),\n    \"i8\",\n    ALLOC_NORMAL\n  );\n  var summerNamePtr = allocate(\n    intArrayFromString(summerName),\n    \"i8\",\n    ALLOC_NORMAL\n  );\n  if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {\n    HEAP32[__get_tzname() >> 2] = winterNamePtr;\n    HEAP32[(__get_tzname() + 4) >> 2] = summerNamePtr;\n  } else {\n    HEAP32[__get_tzname() >> 2] = summerNamePtr;\n    HEAP32[(__get_tzname() + 4) >> 2] = winterNamePtr;\n  }\n}\nfunction _timegm(tmPtr) {\n  _tzset();\n  var time = Date.UTC(\n    HEAP32[(tmPtr + 20) >> 2] + 1900,\n    HEAP32[(tmPtr + 16) >> 2],\n    HEAP32[(tmPtr + 12) >> 2],\n    HEAP32[(tmPtr + 8) >> 2],\n    HEAP32[(tmPtr + 4) >> 2],\n    HEAP32[tmPtr >> 2],\n    0\n  );\n  var date = new Date(time);\n  HEAP32[(tmPtr + 24) >> 2] = date.getUTCDay();\n  var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);\n  var yday = ((date.getTime() - start) / (1e3 * 60 * 60 * 24)) | 0;\n  HEAP32[(tmPtr + 28) >> 2] = yday;\n  return (date.getTime() / 1e3) | 0;\n}\nFS.staticInit();\nif (ENVIRONMENT_HAS_NODE) {\n  var fs = frozenFs;\n  var NODEJS_PATH = __webpack_require__(7);\n  NODEFS.staticInit();\n}\nif (ENVIRONMENT_IS_NODE) {\n  var _wrapNodeError = function(func) {\n    return function() {\n      try {\n        return func.apply(this, arguments);\n      } catch (e) {\n        if (!e.code) throw e;\n        throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n      }\n    };\n  };\n  var VFS = Object.assign({}, FS);\n  for (var _key in NODERAWFS) FS[_key] = _wrapNodeError(NODERAWFS[_key]);\n} else {\n  throw new Error(\n    \"NODERAWFS is currently only supported on Node.js environment.\"\n  );\n}\nfunction intArrayFromString(stringy, dontAddNull, length) {\n  var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;\n  var u8array = new Array(len);\n  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);\n  if (dontAddNull) u8array.length = numBytesWritten;\n  return u8array;\n}\nvar decodeBase64 =\n  typeof atob === \"function\"\n    ? atob\n    : function(input) {\n        var keyStr =\n          \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n        var output = \"\";\n        var chr1, chr2, chr3;\n        var enc1, enc2, enc3, enc4;\n        var i = 0;\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n        do {\n          enc1 = keyStr.indexOf(input.charAt(i++));\n          enc2 = keyStr.indexOf(input.charAt(i++));\n          enc3 = keyStr.indexOf(input.charAt(i++));\n          enc4 = keyStr.indexOf(input.charAt(i++));\n          chr1 = (enc1 << 2) | (enc2 >> 4);\n          chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n          chr3 = ((enc3 & 3) << 6) | enc4;\n          output = output + String.fromCharCode(chr1);\n          if (enc3 !== 64) {\n            output = output + String.fromCharCode(chr2);\n          }\n          if (enc4 !== 64) {\n            output = output + String.fromCharCode(chr3);\n          }\n        } while (i < input.length);\n        return output;\n      };\nfunction intArrayFromBase64(s) {\n  if (typeof ENVIRONMENT_IS_NODE === \"boolean\" && ENVIRONMENT_IS_NODE) {\n    var buf;\n    try {\n      buf = Buffer.from(s, \"base64\");\n    } catch (_) {\n      buf = new Buffer(s, \"base64\");\n    }\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n  try {\n    var decoded = decodeBase64(s);\n    var bytes = new Uint8Array(decoded.length);\n    for (var i = 0; i < decoded.length; ++i) {\n      bytes[i] = decoded.charCodeAt(i);\n    }\n    return bytes;\n  } catch (_) {\n    throw new Error(\"Converting base64 string to bytes failed.\");\n  }\n}\nfunction tryParseAsDataURI(filename) {\n  if (!isDataURI(filename)) {\n    return;\n  }\n  return intArrayFromBase64(filename.slice(dataURIPrefix.length));\n}\nvar asmLibraryArg = {\n  d: ___lock,\n  t: ___syscall10,\n  p: ___syscall15,\n  f: ___syscall195,\n  v: ___syscall197,\n  e: ___syscall221,\n  q: ___syscall3,\n  u: ___syscall38,\n  s: ___syscall40,\n  r: ___syscall5,\n  o: ___syscall54,\n  a: ___unlock,\n  j: _emscripten_memcpy_big,\n  k: _emscripten_resize_heap,\n  g: _fd_close,\n  n: _fd_fdstat_get,\n  m: _fd_read,\n  l: _fd_seek,\n  w: _fd_write,\n  h: _gmtime,\n  memory: wasmMemory,\n  b: _setTempRet0,\n  table: wasmTable,\n  c: _time,\n  i: _timegm\n};\nvar asm = createWasm();\nvar ___wasm_call_ctors = (Module[\"___wasm_call_ctors\"] = asm[\"x\"]);\nvar _zipstruct_stat = (Module[\"_zipstruct_stat\"] = asm[\"y\"]);\nvar _zipstruct_statS = (Module[\"_zipstruct_statS\"] = asm[\"z\"]);\nvar _zipstruct_stat_name = (Module[\"_zipstruct_stat_name\"] = asm[\"A\"]);\nvar _zipstruct_stat_index = (Module[\"_zipstruct_stat_index\"] = asm[\"B\"]);\nvar _zipstruct_stat_size = (Module[\"_zipstruct_stat_size\"] = asm[\"C\"]);\nvar _zipstruct_stat_mtime = (Module[\"_zipstruct_stat_mtime\"] = asm[\"D\"]);\nvar _zipstruct_error = (Module[\"_zipstruct_error\"] = asm[\"E\"]);\nvar _zipstruct_errorS = (Module[\"_zipstruct_errorS\"] = asm[\"F\"]);\nvar _zip_close = (Module[\"_zip_close\"] = asm[\"G\"]);\nvar _zip_dir_add = (Module[\"_zip_dir_add\"] = asm[\"H\"]);\nvar _zip_discard = (Module[\"_zip_discard\"] = asm[\"I\"]);\nvar _zip_error_init_with_code = (Module[\"_zip_error_init_with_code\"] =\n  asm[\"J\"]);\nvar _zip_get_error = (Module[\"_zip_get_error\"] = asm[\"K\"]);\nvar _zip_file_get_error = (Module[\"_zip_file_get_error\"] = asm[\"L\"]);\nvar _zip_error_strerror = (Module[\"_zip_error_strerror\"] = asm[\"M\"]);\nvar _zip_fclose = (Module[\"_zip_fclose\"] = asm[\"N\"]);\nvar _zip_file_add = (Module[\"_zip_file_add\"] = asm[\"O\"]);\nvar _zip_file_get_external_attributes = (Module[\n  \"_zip_file_get_external_attributes\"\n] = asm[\"P\"]);\nvar _zip_file_set_external_attributes = (Module[\n  \"_zip_file_set_external_attributes\"\n] = asm[\"Q\"]);\nvar _zip_file_set_mtime = (Module[\"_zip_file_set_mtime\"] = asm[\"R\"]);\nvar _zip_fopen = (Module[\"_zip_fopen\"] = asm[\"S\"]);\nvar _zip_fopen_index = (Module[\"_zip_fopen_index\"] = asm[\"T\"]);\nvar _zip_fread = (Module[\"_zip_fread\"] = asm[\"U\"]);\nvar _zip_get_name = (Module[\"_zip_get_name\"] = asm[\"V\"]);\nvar _zip_get_num_entries = (Module[\"_zip_get_num_entries\"] = asm[\"W\"]);\nvar _zip_name_locate = (Module[\"_zip_name_locate\"] = asm[\"X\"]);\nvar _zip_open = (Module[\"_zip_open\"] = asm[\"Y\"]);\nvar _zip_open_from_source = (Module[\"_zip_open_from_source\"] = asm[\"Z\"]);\nvar _zip_set_file_compression = (Module[\"_zip_set_file_compression\"] =\n  asm[\"_\"]);\nvar _zip_source_buffer = (Module[\"_zip_source_buffer\"] = asm[\"$\"]);\nvar _zip_source_buffer_create = (Module[\"_zip_source_buffer_create\"] =\n  asm[\"aa\"]);\nvar _zip_source_free = (Module[\"_zip_source_free\"] = asm[\"ba\"]);\nvar _zip_source_set_mtime = (Module[\"_zip_source_set_mtime\"] = asm[\"ca\"]);\nvar _zip_stat = (Module[\"_zip_stat\"] = asm[\"da\"]);\nvar _zip_stat_index = (Module[\"_zip_stat_index\"] = asm[\"ea\"]);\nvar ___errno_location = (Module[\"___errno_location\"] = asm[\"fa\"]);\nvar __get_tzname = (Module[\"__get_tzname\"] = asm[\"ga\"]);\nvar __get_daylight = (Module[\"__get_daylight\"] = asm[\"ha\"]);\nvar __get_timezone = (Module[\"__get_timezone\"] = asm[\"ia\"]);\nvar _malloc = (Module[\"_malloc\"] = asm[\"ja\"]);\nvar _free = (Module[\"_free\"] = asm[\"ka\"]);\nvar stackSave = (Module[\"stackSave\"] = asm[\"la\"]);\nvar stackAlloc = (Module[\"stackAlloc\"] = asm[\"ma\"]);\nvar stackRestore = (Module[\"stackRestore\"] = asm[\"na\"]);\nvar dynCall_vi = (Module[\"dynCall_vi\"] = asm[\"oa\"]);\nModule[\"asm\"] = asm;\nModule[\"cwrap\"] = cwrap;\nModule[\"getValue\"] = getValue;\nvar calledRun;\nfunction ExitStatus(status) {\n  this.name = \"ExitStatus\";\n  this.message = \"Program terminated with exit(\" + status + \")\";\n  this.status = status;\n}\ndependenciesFulfilled = function runCaller() {\n  if (!calledRun) run();\n  if (!calledRun) dependenciesFulfilled = runCaller;\n};\nfunction run(args) {\n  args = args || arguments_;\n  if (runDependencies > 0) {\n    return;\n  }\n  preRun();\n  if (runDependencies > 0) return;\n  function doRun() {\n    if (calledRun) return;\n    calledRun = true;\n    if (ABORT) return;\n    initRuntime();\n    preMain();\n    if (Module[\"onRuntimeInitialized\"]) Module[\"onRuntimeInitialized\"]();\n    postRun();\n  }\n  if (Module[\"setStatus\"]) {\n    Module[\"setStatus\"](\"Running...\");\n    setTimeout(function() {\n      setTimeout(function() {\n        Module[\"setStatus\"](\"\");\n      }, 1);\n      doRun();\n    }, 1);\n  } else {\n    doRun();\n  }\n}\nModule[\"run\"] = run;\nif (Module[\"preInit\"]) {\n  if (typeof Module[\"preInit\"] == \"function\")\n    Module[\"preInit\"] = [Module[\"preInit\"]];\n  while (Module[\"preInit\"].length > 0) {\n    Module[\"preInit\"].pop()();\n  }\n}\nnoExitRuntime = true;\nrun();\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"crypto\");\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"string_decoder\");\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fslib_1 = __webpack_require__(5);\n\nconst fs_1 = __importDefault(__webpack_require__(2));\n\nconst module_1 = __webpack_require__(6);\n\nconst url_1 = __webpack_require__(30);\n\nconst internalTools_1 = __webpack_require__(11);\n\nfunction applyPatch(pnpapi, opts) {\n  // @ts-ignore\n  const builtinModules = new Set(module_1.Module.builtinModules || Object.keys(process.binding(`natives`)));\n  /**\n   * The cache that will be used for all accesses occuring outside of a PnP context.\n   */\n\n  const defaultCache = {};\n  /**\n   * Used to disable the resolution hooks (for when we want to fallback to the previous resolution - we then need\n   * a way to \"reset\" the environment temporarily)\n   */\n\n  let enableNativeHooks = true; // @ts-ignore\n\n  process.versions.pnp = String(pnpapi.VERSIONS.std); // @ts-ignore\n\n  const moduleExports = __webpack_require__(6); // @ts-ignore\n\n\n  moduleExports.findPnpApi = lookupSource => {\n    const lookupPath = lookupSource instanceof url_1.URL ? url_1.fileURLToPath(lookupSource) : lookupSource;\n    const apiPath = opts.manager.findApiPathFor(lookupPath);\n    if (apiPath === null) return null;\n    const apiEntry = opts.manager.getApiEntry(apiPath, true);\n    return apiEntry.instance;\n  };\n\n  function getRequireStack(parent) {\n    const requireStack = [];\n\n    for (let cursor = parent; cursor; cursor = cursor.parent) requireStack.push(cursor.filename || cursor.id);\n\n    return requireStack;\n  } // A small note: we don't replace the cache here (and instead use the native one). This is an effort to not\n  // break code similar to \"delete require.cache[require.resolve(FOO)]\", where FOO is a package located outside\n  // of the Yarn dependency tree. In this case, we defer the load to the native loader. If we were to replace the\n  // cache by our own, the native loader would populate its own cache, which wouldn't be exposed anymore, so the\n  // delete call would be broken.\n\n\n  const originalModuleLoad = module_1.Module._load;\n\n  module_1.Module._load = function (request, parent, isMain) {\n    if (!enableNativeHooks) return originalModuleLoad.call(module_1.Module, request, parent, isMain); // Builtins are managed by the regular Node loader\n\n    if (builtinModules.has(request)) {\n      try {\n        enableNativeHooks = false;\n        return originalModuleLoad.call(module_1.Module, request, parent, isMain);\n      } finally {\n        enableNativeHooks = true;\n      }\n    }\n\n    const parentApiPath = opts.manager.getApiPathFromParent(parent);\n    const parentApi = parentApiPath !== null ? opts.manager.getApiEntry(parentApiPath, true).instance : null; // Requests that aren't covered by the PnP runtime goes through the\n    // parent `_load` implementation. This is required for VSCode, for example,\n    // which override `_load` to provide additional builtins to its extensions.\n\n    if (parentApi === null) return originalModuleLoad(request, parent, isMain); // The 'pnpapi' name is reserved to return the PnP api currently in use\n    // by the program\n\n    if (request === `pnpapi`) return parentApi; // Request `Module._resolveFilename` (ie. `resolveRequest`) to tell us\n    // which file we should load\n\n    const modulePath = module_1.Module._resolveFilename(request, parent, isMain); // We check whether the module is owned by the dependency tree of the\n    // module that required it. If it isn't, then we need to create a new\n    // store and possibly load its sandboxed PnP runtime.\n\n\n    const isOwnedByRuntime = parentApi !== null ? parentApi.findPackageLocator(modulePath) !== null : false;\n    const moduleApiPath = isOwnedByRuntime ? parentApiPath : opts.manager.findApiPathFor(fslib_1.npath.dirname(modulePath));\n    const entry = moduleApiPath !== null ? opts.manager.getApiEntry(moduleApiPath) : {\n      instance: null,\n      cache: defaultCache\n    }; // Check if the module has already been created for the given file\n\n    const cacheEntry = entry.cache[modulePath];\n    if (cacheEntry) return cacheEntry.exports; // Create a new module and store it into the cache\n    // @ts-ignore\n\n    const module = new module_1.Module(modulePath, parent);\n    module.pnpApiPath = moduleApiPath;\n    entry.cache[modulePath] = module; // The main module is exposed as global variable\n\n    if (isMain) {\n      // @ts-ignore\n      process.mainModule = module;\n      module.id = `.`;\n    } // Try to load the module, and remove it from the cache if it fails\n\n\n    let hasThrown = true;\n\n    try {\n      module.load(modulePath);\n      hasThrown = false;\n    } finally {\n      if (hasThrown) {\n        delete module_1.Module._cache[modulePath];\n      }\n    }\n\n    return module.exports;\n  };\n\n  const originalModuleResolveFilename = module_1.Module._resolveFilename;\n\n  module_1.Module._resolveFilename = function (request, parent, isMain, options) {\n    if (builtinModules.has(request)) return request;\n    if (!enableNativeHooks) return originalModuleResolveFilename.call(module_1.Module, request, parent, isMain, options);\n\n    if (options && options.plugnplay === false) {\n      const {\n        plugnplay\n      } = options,\n            rest = __rest(options, [\"plugnplay\"]); // Workaround a bug present in some version of Node (now fixed)\n      // https://github.com/nodejs/node/pull/28078\n\n\n      const forwardedOptions = Object.keys(rest).length > 0 ? rest : undefined;\n\n      try {\n        enableNativeHooks = false;\n        return originalModuleResolveFilename.call(module_1.Module, request, parent, isMain, forwardedOptions);\n      } finally {\n        enableNativeHooks = true;\n      }\n    } // We check that all the options present here are supported; better\n    // to fail fast than to introduce subtle bugs in the runtime.\n\n\n    if (options) {\n      const optionNames = new Set(Object.keys(options));\n      optionNames.delete(`paths`);\n      optionNames.delete(`plugnplay`);\n\n      if (optionNames.size > 0) {\n        throw internalTools_1.makeError(internalTools_1.ErrorCode.UNSUPPORTED, `Some options passed to require() aren't supported by PnP yet (${Array.from(optionNames).join(`, `)})`);\n      }\n    }\n\n    const getIssuerSpecsFromPaths = paths => {\n      return paths.map(path => ({\n        apiPath: opts.manager.findApiPathFor(path),\n        path: fslib_1.npath.toPortablePath(path),\n        module: null\n      }));\n    };\n\n    const getIssuerSpecsFromModule = module => {\n      const issuer = internalTools_1.getIssuerModule(module);\n      const issuerPath = issuer !== null ? fslib_1.npath.dirname(issuer.filename) : process.cwd();\n      return [{\n        apiPath: opts.manager.getApiPathFromParent(issuer),\n        path: fslib_1.npath.toPortablePath(issuerPath),\n        module\n      }];\n    };\n\n    const makeFakeParent = path => {\n      const fakeParent = new module_1.Module(``);\n      const fakeFilePath = fslib_1.ppath.join(path, `[file]`);\n      fakeParent.paths = module_1.Module._nodeModulePaths(fslib_1.npath.fromPortablePath(fakeFilePath));\n      return fakeParent;\n    };\n\n    const issuerSpecs = options && options.paths ? getIssuerSpecsFromPaths(options.paths) : getIssuerSpecsFromModule(parent);\n    let firstError;\n\n    for (const {\n      apiPath,\n      path,\n      module\n    } of issuerSpecs) {\n      let resolution;\n      const issuerApi = apiPath !== null ? opts.manager.getApiEntry(apiPath, true).instance : null;\n\n      try {\n        if (issuerApi !== null) {\n          resolution = issuerApi.resolveRequest(request, `${path}/`);\n        } else {\n          resolution = originalModuleResolveFilename.call(module_1.Module, request, module || makeFakeParent(path), isMain);\n        }\n      } catch (error) {\n        firstError = firstError || error;\n        continue;\n      }\n\n      if (resolution !== null) {\n        return resolution;\n      }\n    }\n\n    const requireStack = getRequireStack(parent);\n    Object.defineProperty(firstError, `requireStack`, {\n      configurable: true,\n      writable: true,\n      enumerable: false,\n      value: requireStack\n    });\n    if (requireStack.length > 0) firstError.message += `\\nRequire stack:\\n- ${requireStack.join(`\\n- `)}`;\n    throw firstError;\n  };\n\n  const originalFindPath = module_1.Module._findPath;\n\n  module_1.Module._findPath = function (request, paths, isMain) {\n    if (request === `pnpapi`) return false;\n    if (!enableNativeHooks) return originalFindPath.call(module_1.Module, request, paths, isMain);\n\n    for (const path of paths || []) {\n      let resolution;\n\n      try {\n        const pnpApiPath = opts.manager.findApiPathFor(path);\n\n        if (pnpApiPath !== null) {\n          const api = opts.manager.getApiEntry(pnpApiPath, true).instance;\n          resolution = api.resolveRequest(request, path) || false;\n        } else {\n          resolution = originalFindPath.call(module_1.Module, request, [path], isMain);\n        }\n      } catch (error) {\n        continue;\n      }\n\n      if (resolution) {\n        return resolution;\n      }\n    }\n\n    return false;\n  };\n\n  fslib_1.patchFs(fs_1.default, new fslib_1.PosixFS(opts.fakeFs));\n}\n\nexports.applyPatch = applyPatch;\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"url\");\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fslib_1 = __webpack_require__(5);\n\nfunction hydrateRuntimeState(data, {\n  basePath\n}) {\n  const portablePath = fslib_1.npath.toPortablePath(basePath);\n  const ignorePattern = data.ignorePatternData !== null ? new RegExp(data.ignorePatternData) : null;\n  const packageRegistry = new Map(data.packageRegistryData.map(([packageName, packageStoreData]) => {\n    return [packageName, new Map(packageStoreData.map(([packageReference, packageInformationData]) => {\n      return [packageReference, {\n        packageLocation: fslib_1.ppath.resolve(portablePath, packageInformationData.packageLocation),\n        packageDependencies: new Map(packageInformationData.packageDependencies),\n        packagePeers: new Set(packageInformationData.packagePeers),\n        linkType: packageInformationData.linkType,\n        discardFromLookup: packageInformationData.discardFromLookup || false\n      }];\n    }))];\n  }));\n  const packageLocatorsByLocations = new Map();\n  const packageLocationLengths = new Set();\n\n  for (const [packageName, storeData] of data.packageRegistryData) {\n    for (const [packageReference, packageInformationData] of storeData) {\n      if (packageName === null !== (packageReference === null)) throw new Error(`Assertion failed: The name and reference should be null, or neither should`);\n      if (packageInformationData.discardFromLookup) continue; // @ts-ignore: TypeScript isn't smart enough to understand the type assertion\n\n      const packageLocator = {\n        name: packageName,\n        reference: packageReference\n      };\n      packageLocatorsByLocations.set(packageInformationData.packageLocation, packageLocator);\n      packageLocationLengths.add(packageInformationData.packageLocation.length);\n    }\n  }\n\n  for (const location of data.locationBlacklistData) packageLocatorsByLocations.set(location, null);\n\n  const fallbackExclusionList = new Map(data.fallbackExclusionList.map(([packageName, packageReferences]) => {\n    return [packageName, new Set(packageReferences)];\n  }));\n  const fallbackPool = new Map(data.fallbackPool);\n  const dependencyTreeRoots = data.dependencyTreeRoots;\n  const enableTopLevelFallback = data.enableTopLevelFallback;\n  return {\n    basePath: portablePath,\n    dependencyTreeRoots,\n    enableTopLevelFallback,\n    fallbackExclusionList,\n    fallbackPool,\n    ignorePattern,\n    packageLocationLengths: [...packageLocationLengths].sort((a, b) => b - a),\n    packageLocatorsByLocations,\n    packageRegistry\n  };\n}\n\nexports.hydrateRuntimeState = hydrateRuntimeState;\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fslib_1 = __webpack_require__(5);\n\nconst fslib_2 = __webpack_require__(5);\n\nconst module_1 = __webpack_require__(6);\n\nconst internalTools_1 = __webpack_require__(11);\n\nfunction makeApi(runtimeState, opts) {\n  const alwaysWarnOnFallback = Number(process.env.PNP_ALWAYS_WARN_ON_FALLBACK) > 0;\n  const debugLevel = Number(process.env.PNP_DEBUG_LEVEL); // @ts-ignore\n\n  const builtinModules = new Set(module_1.Module.builtinModules || Object.keys(process.binding(`natives`))); // Splits a require request into its components, or return null if the request is a file path\n\n  const pathRegExp = /^(?![a-zA-Z]:[\\\\/]|\\\\\\\\|\\.{0,2}(?:\\/|$))((?:@[^/]+\\/)?[^/]+)\\/*(.*|)$/; // Matches if the path starts with a valid path qualifier (./, ../, /)\n  // eslint-disable-next-line no-unused-vars\n\n  const isStrictRegExp = /^\\.{0,2}\\//; // Matches if the path must point to a directory (ie ends with /)\n\n  const isDirRegExp = /\\/$/; // We only instantiate one of those so that we can use strict-equal comparisons\n\n  const topLevelLocator = {\n    name: null,\n    reference: null\n  }; // Used for compatibility purposes - cf setupCompatibilityLayer\n\n  const fallbackLocators = []; // To avoid emitting the same warning multiple times\n\n  const emittedWarnings = new Set();\n  if (runtimeState.enableTopLevelFallback === true) fallbackLocators.push(topLevelLocator);\n\n  if (opts.compatibilityMode !== false) {\n    // ESLint currently doesn't have any portable way for shared configs to\n    // specify their own plugins that should be used (cf issue #10125). This\n    // will likely get fixed at some point but it'll take time, so in the\n    // meantime we'll just add additional fallback entries for common shared\n    // configs.\n    // Similarly, Gatsby generates files within the `public` folder located\n    // within the project, but doesn't pre-resolve the `require` calls to use\n    // its own dependencies. Meaning that when PnP see a file from the `public`\n    // folder making a require, it thinks that your project forgot to list one\n    // of your dependencies.\n    for (const name of [`react-scripts`, `gatsby`]) {\n      const packageStore = runtimeState.packageRegistry.get(name);\n\n      if (packageStore) {\n        for (const reference of packageStore.keys()) {\n          if (reference === null) {\n            throw new Error(`Assertion failed: This reference shouldn't be null`);\n          } else {\n            fallbackLocators.push({\n              name,\n              reference\n            });\n          }\n        }\n      }\n    }\n  }\n  /**\n   * The setup code will be injected here. The tables listed below are guaranteed to be filled after the call to\n   * the $$DYNAMICALLY_GENERATED_CODE function.\n   */\n\n\n  const {\n    ignorePattern,\n    packageRegistry,\n    packageLocatorsByLocations,\n    packageLocationLengths\n  } = runtimeState;\n  /**\n   * Allows to print useful logs just be setting a value in the environment\n   */\n\n  function makeLogEntry(name, args) {\n    return {\n      fn: name,\n      args,\n      error: null,\n      result: null\n    };\n  }\n\n  function maybeLog(name, fn) {\n    if (opts.allowDebug === false) return fn;\n\n    if (Number.isFinite(debugLevel)) {\n      if (debugLevel >= 2) {\n        return (...args) => {\n          const logEntry = makeLogEntry(name, args);\n\n          try {\n            return logEntry.result = fn(...args);\n          } catch (error) {\n            throw logEntry.error = error;\n          } finally {\n            console.trace(logEntry);\n          }\n        };\n      } else if (debugLevel >= 1) {\n        return (...args) => {\n          try {\n            return fn(...args);\n          } catch (error) {\n            const logEntry = makeLogEntry(name, args);\n            logEntry.error = error;\n            console.trace(logEntry);\n            throw error;\n          }\n        };\n      }\n    }\n\n    return fn;\n  }\n  /**\n   * Returns information about a package in a safe way (will throw if they cannot be retrieved)\n   */\n\n\n  function getPackageInformationSafe(packageLocator) {\n    const packageInformation = getPackageInformation(packageLocator);\n\n    if (!packageInformation) {\n      throw internalTools_1.makeError(internalTools_1.ErrorCode.INTERNAL, `Couldn't find a matching entry in the dependency tree for the specified parent (this is probably an internal error)`);\n    }\n\n    return packageInformation;\n  }\n  /**\n   * Returns whether the specified locator is a dependency tree root (in which case it's part of the project) or not\n   */\n\n\n  function isDependencyTreeRoot(packageLocator) {\n    if (packageLocator.name === null) return true;\n\n    for (const dependencyTreeRoot of runtimeState.dependencyTreeRoots) if (dependencyTreeRoot.name === packageLocator.name && dependencyTreeRoot.reference === packageLocator.reference) return true;\n\n    return false;\n  }\n  /**\n   * Implements the node resolution for folder access and extension selection\n   */\n\n\n  function applyNodeExtensionResolution(unqualifiedPath, candidates, {\n    extensions\n  }) {\n    // We use this \"infinite while\" so that we can restart the process as long as we hit package folders\n    while (true) {\n      let stat;\n\n      try {\n        candidates.push(unqualifiedPath);\n        stat = opts.fakeFs.statSync(unqualifiedPath);\n      } catch (error) {} // If the file exists and is a file, we can stop right there\n\n\n      if (stat && !stat.isDirectory()) return opts.fakeFs.realpathSync(unqualifiedPath); // If the file is a directory, we must check if it contains a package.json with a \"main\" entry\n\n      if (stat && stat.isDirectory()) {\n        let pkgJson;\n\n        try {\n          pkgJson = JSON.parse(opts.fakeFs.readFileSync(fslib_2.ppath.join(unqualifiedPath, fslib_2.toFilename(`package.json`)), `utf8`));\n        } catch (error) {}\n\n        let nextUnqualifiedPath;\n        if (pkgJson && pkgJson.main) nextUnqualifiedPath = fslib_2.ppath.resolve(unqualifiedPath, pkgJson.main); // If the \"main\" field changed the path, we start again from this new location\n\n        if (nextUnqualifiedPath && nextUnqualifiedPath !== unqualifiedPath) {\n          const resolution = applyNodeExtensionResolution(nextUnqualifiedPath, candidates, {\n            extensions\n          });\n\n          if (resolution !== null) {\n            return resolution;\n          }\n        }\n      } // Otherwise we check if we find a file that match one of the supported extensions\n\n\n      const qualifiedPath = extensions.map(extension => {\n        return `${unqualifiedPath}${extension}`;\n      }).find(candidateFile => {\n        candidates.push(candidateFile);\n        return opts.fakeFs.existsSync(candidateFile);\n      });\n      if (qualifiedPath) return qualifiedPath; // Otherwise, we check if the path is a folder - in such a case, we try to use its index\n\n      if (stat && stat.isDirectory()) {\n        const indexPath = extensions.map(extension => {\n          return fslib_2.ppath.format({\n            dir: unqualifiedPath,\n            name: fslib_2.toFilename(`index`),\n            ext: extension\n          });\n        }).find(candidateFile => {\n          candidates.push(candidateFile);\n          return opts.fakeFs.existsSync(candidateFile);\n        });\n\n        if (indexPath) {\n          return indexPath;\n        }\n      } // Otherwise there's nothing else we can do :(\n\n\n      return null;\n    }\n  }\n  /**\n   * This function creates fake modules that can be used with the _resolveFilename function.\n   * Ideally it would be nice to be able to avoid this, since it causes useless allocations\n   * and cannot be cached efficiently (we recompute the nodeModulePaths every time).\n   *\n   * Fortunately, this should only affect the fallback, and there hopefully shouldn't have a\n   * lot of them.\n   */\n\n\n  function makeFakeModule(path) {\n    // @ts-ignore\n    const fakeModule = new module_1.Module(path, null);\n    fakeModule.filename = path;\n    fakeModule.paths = module_1.Module._nodeModulePaths(path);\n    return fakeModule;\n  }\n  /**\n   * Normalize path to posix format.\n   */\n\n\n  function normalizePath(p) {\n    return fslib_1.npath.toPortablePath(p);\n  }\n  /**\n   * Forward the resolution to the next resolver (usually the native one)\n   */\n\n\n  function callNativeResolution(request, issuer) {\n    if (issuer.endsWith(`/`)) issuer = fslib_2.ppath.join(issuer, fslib_2.toFilename(`internal.js`)); // Since we would need to create a fake module anyway (to call _resolveLookupPath that\n    // would give us the paths to give to _resolveFilename), we can as well not use\n    // the {paths} option at all, since it internally makes _resolveFilename create another\n    // fake module anyway.\n\n    return module_1.Module._resolveFilename(request, makeFakeModule(fslib_1.npath.fromPortablePath(issuer)), false, {\n      plugnplay: false\n    });\n  }\n  /**\n   *\n   */\n\n\n  function isPathIgnored(path) {\n    if (ignorePattern === null) return false;\n    const subPath = fslib_2.ppath.contains(runtimeState.basePath, path);\n    if (subPath === null) return false;\n\n    if (ignorePattern.test(subPath.replace(/\\/$/, ``))) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\n   * This key indicates which version of the standard is implemented by this resolver. The `std` key is the\n   * Plug'n'Play standard, and any other key are third-party extensions. Third-party extensions are not allowed\n   * to override the standard, and can only offer new methods.\n   *\n   * If an new version of the Plug'n'Play standard is released and some extensions conflict with newly added\n   * functions, they'll just have to fix the conflicts and bump their own version number.\n   */\n\n\n  const VERSIONS = {\n    std: 3,\n    resolveVirtual: 1\n  };\n  /**\n   * We export a special symbol for easy access to the top level locator.\n   */\n\n  const topLevel = topLevelLocator;\n  /**\n   * Gets the package information for a given locator. Returns null if they cannot be retrieved.\n   */\n\n  function getPackageInformation({\n    name,\n    reference\n  }) {\n    const packageInformationStore = packageRegistry.get(name);\n    if (!packageInformationStore) return null;\n    const packageInformation = packageInformationStore.get(reference);\n    if (!packageInformation) return null;\n    return packageInformation;\n  }\n  /**\n   * Finds the package locator that owns the specified path. If none is found, returns null instead.\n   */\n\n\n  function findPackageLocator(location) {\n    let relativeLocation = normalizePath(fslib_2.ppath.relative(runtimeState.basePath, location));\n    if (!relativeLocation.match(isStrictRegExp)) relativeLocation = `./${relativeLocation}`;\n    if (location.match(isDirRegExp) && !relativeLocation.endsWith(`/`)) relativeLocation = `${relativeLocation}/`;\n    let from = 0; // If someone wants to use a binary search to go from O(n) to O(log n), be my guest\n\n    while (from < packageLocationLengths.length && packageLocationLengths[from] > relativeLocation.length) from += 1;\n\n    for (let t = from; t < packageLocationLengths.length; ++t) {\n      const locator = packageLocatorsByLocations.get(relativeLocation.substr(0, packageLocationLengths[t]));\n      if (typeof locator === `undefined`) continue; // Ensures that the returned locator isn't a blacklisted one.\n      //\n      // Blacklisted packages are packages that cannot be used because their dependencies cannot be deduced. This only\n      // happens with peer dependencies, which effectively have different sets of dependencies depending on their\n      // parents.\n      //\n      // In order to deambiguate those different sets of dependencies, the Yarn implementation of PnP will generate a\n      // symlink for each combination of <package name>/<package version>/<dependent package> it will find, and will\n      // blacklist the target of those symlinks. By doing this, we ensure that files loaded through a specific path\n      // will always have the same set of dependencies, provided the symlinks are correctly preserved.\n      //\n      // Unfortunately, some tools do not preserve them, and when it happens PnP isn't able anymore to deduce the set of\n      // dependencies based on the path of the file that makes the require calls. But since we've blacklisted those\n      // paths, we're able to print a more helpful error message that points out that a third-party package is doing\n      // something incompatible!\n\n      if (locator === null) {\n        throw internalTools_1.makeError(internalTools_1.ErrorCode.BLACKLISTED, `A forbidden path has been used in the package resolution process - this is usually caused by one of your tools calling 'fs.realpath' on the return value of 'require.resolve'. Since we need to use symlinks to simultaneously provide valid filesystem paths and disambiguate peer dependencies, they must be passed untransformed to 'require'.\\n\\nForbidden path: ${location}`, {\n          location\n        });\n      }\n\n      return locator;\n    }\n\n    return null;\n  }\n  /**\n   * Transforms a request (what's typically passed as argument to the require function) into an unqualified path.\n   * This path is called \"unqualified\" because it only changes the package name to the package location on the disk,\n   * which means that the end result still cannot be directly accessed (for example, it doesn't try to resolve the\n   * file extension, or to resolve directories to their \"index.js\" content). Use the \"resolveUnqualified\" function\n   * to convert them to fully-qualified paths, or just use \"resolveRequest\" that do both operations in one go.\n   *\n   * Note that it is extremely important that the `issuer` path ends with a forward slash if the issuer is to be\n   * treated as a folder (ie. \"/tmp/foo/\" rather than \"/tmp/foo\" if \"foo\" is a directory). Otherwise relative\n   * imports won't be computed correctly (they'll get resolved relative to \"/tmp/\" instead of \"/tmp/foo/\").\n   */\n\n\n  function resolveToUnqualified(request, issuer, {\n    considerBuiltins = true\n  } = {}) {\n    // The 'pnpapi' request is reserved and will always return the path to the PnP file, from everywhere\n    if (request === `pnpapi`) return fslib_1.npath.toPortablePath(opts.pnpapiResolution); // Bailout if the request is a native module\n\n    if (considerBuiltins && builtinModules.has(request)) return null; // We allow disabling the pnp resolution for some subpaths.\n    // This is because some projects, often legacy, contain multiple\n    // levels of dependencies (ie. a yarn.lock inside a subfolder of\n    // a yarn.lock). This is typically solved using workspaces, but\n    // not all of them have been converted already.\n\n    if (issuer && isPathIgnored(issuer)) {\n      // Absolute paths that seem to belong to a PnP tree are still\n      // handled by our runtime even if the issuer isn't. This is\n      // because the native Node resolution uses a special version\n      // of the `stat` syscall which would otherwise bypass the\n      // filesystem layer we require to access the files.\n      if (!fslib_2.ppath.isAbsolute(request) || findPackageLocator(request) === null) {\n        const result = callNativeResolution(request, issuer);\n\n        if (result === false) {\n          throw internalTools_1.makeError(internalTools_1.ErrorCode.BUILTIN_NODE_RESOLUTION_FAILED, `The builtin node resolution algorithm was unable to resolve the requested module (it didn't go through the pnp resolver because the issuer was explicitely ignored by the regexp)\\n\\nRequire request: \"${request}\"\\nRequired by: ${issuer}\\n`, {\n            request,\n            issuer\n          });\n        }\n\n        return fslib_1.npath.toPortablePath(result);\n      }\n    }\n\n    let unqualifiedPath; // If the request is a relative or absolute path, we just return it normalized\n\n    const dependencyNameMatch = request.match(pathRegExp);\n\n    if (!dependencyNameMatch) {\n      if (fslib_2.ppath.isAbsolute(request)) {\n        unqualifiedPath = fslib_2.ppath.normalize(request);\n      } else {\n        if (!issuer) {\n          throw internalTools_1.makeError(internalTools_1.ErrorCode.API_ERROR, `The resolveToUnqualified function must be called with a valid issuer when the path isn't a builtin nor absolute`, {\n            request,\n            issuer\n          });\n        }\n\n        if (issuer.match(isDirRegExp)) {\n          unqualifiedPath = fslib_2.ppath.normalize(fslib_2.ppath.resolve(issuer, request));\n        } else {\n          unqualifiedPath = fslib_2.ppath.normalize(fslib_2.ppath.resolve(fslib_2.ppath.dirname(issuer), request));\n        }\n      } // No need to use the return value; we just want to check the blacklist status\n\n\n      findPackageLocator(unqualifiedPath);\n    } // Things are more hairy if it's a package require - we then need to figure out which package is needed, and in\n    // particular the exact version for the given location on the dependency tree\n    else {\n        if (!issuer) {\n          throw internalTools_1.makeError(internalTools_1.ErrorCode.API_ERROR, `The resolveToUnqualified function must be called with a valid issuer when the path isn't a builtin nor absolute`, {\n            request,\n            issuer\n          });\n        }\n\n        const [, dependencyName, subPath] = dependencyNameMatch;\n        const issuerLocator = findPackageLocator(issuer); // If the issuer file doesn't seem to be owned by a package managed through pnp, then we resort to using the next\n        // resolution algorithm in the chain, usually the native Node resolution one\n\n        if (!issuerLocator) {\n          const result = callNativeResolution(request, issuer);\n\n          if (result === false) {\n            throw internalTools_1.makeError(internalTools_1.ErrorCode.BUILTIN_NODE_RESOLUTION_FAILED, `The builtin node resolution algorithm was unable to resolve the requested module (it didn't go through the pnp resolver because the issuer doesn't seem to be part of the Yarn-managed dependency tree).\\n\\nRequire path: \"${request}\"\\nRequired by: ${issuer}\\n`, {\n              request,\n              issuer\n            });\n          }\n\n          return fslib_1.npath.toPortablePath(result);\n        }\n\n        const issuerInformation = getPackageInformationSafe(issuerLocator); // We obtain the dependency reference in regard to the package that request it\n\n        let dependencyReference = issuerInformation.packageDependencies.get(dependencyName);\n        let fallbackReference = null; // If we can't find it, we check if we can potentially load it from the packages that have been defined as potential fallbacks.\n        // It's a bit of a hack, but it improves compatibility with the existing Node ecosystem. Hopefully we should eventually be able\n        // to kill this logic and become stricter once pnp gets enough traction and the affected packages fix themselves.\n\n        if (dependencyReference == null) {\n          if (issuerLocator.name !== null) {\n            // To allow programs to become gradually stricter, starting from the v2 we enforce that workspaces cannot depend on fallbacks.\n            // This works by having a list containing all their locators, and checking when a fallback is required whether it's one of them.\n            const exclusionEntry = runtimeState.fallbackExclusionList.get(issuerLocator.name);\n            const canUseFallbacks = !exclusionEntry || !exclusionEntry.has(issuerLocator.reference);\n\n            if (canUseFallbacks) {\n              for (let t = 0, T = fallbackLocators.length; t < T; ++t) {\n                const fallbackInformation = getPackageInformationSafe(fallbackLocators[t]);\n                const reference = fallbackInformation.packageDependencies.get(dependencyName);\n                if (reference == null) continue;\n                if (alwaysWarnOnFallback) fallbackReference = reference;else dependencyReference = reference;\n                break;\n              }\n\n              if (dependencyReference == null && fallbackReference === null) {\n                const reference = runtimeState.fallbackPool.get(dependencyName);\n\n                if (reference != null) {\n                  fallbackReference = reference;\n                }\n              }\n            }\n          }\n        } // If we can't find the path, and if the package making the request is the top-level, we can offer nicer error messages\n\n\n        let error = null;\n\n        if (dependencyReference === null) {\n          if (isDependencyTreeRoot(issuerLocator)) {\n            error = internalTools_1.makeError(internalTools_1.ErrorCode.MISSING_PEER_DEPENDENCY, `Your application tried to access ${dependencyName} (a peer dependency); this isn't allowed as there is no ancestor to satisfy the requirement. Use a devDependency if needed.\\n\\nRequired package: ${dependencyName} (via \"${request}\")\\nRequired by: ${issuer}\\n`, {\n              request,\n              issuer,\n              dependencyName\n            });\n          } else {\n            error = internalTools_1.makeError(internalTools_1.ErrorCode.MISSING_PEER_DEPENDENCY, `${issuerLocator.name} tried to access ${dependencyName} (a peer dependency) but it isn't provided by its ancestors; this makes the require call ambiguous and unsound.\\n\\nRequired package: ${dependencyName} (via \"${request}\")\\nRequired by: ${issuerLocator.name}@${issuerLocator.reference} (via ${issuer})\\n`, {\n              request,\n              issuer,\n              issuerLocator: Object.assign({}, issuerLocator),\n              dependencyName\n            });\n          }\n        } else if (dependencyReference === undefined) {\n          if (isDependencyTreeRoot(issuerLocator)) {\n            error = internalTools_1.makeError(internalTools_1.ErrorCode.UNDECLARED_DEPENDENCY, `Your application tried to access ${dependencyName}, but it isn't declared in your dependencies; this makes the require call ambiguous and unsound.\\n\\nRequired package: ${dependencyName} (via \"${request}\")\\nRequired by: ${issuer}\\n`, {\n              request,\n              issuer,\n              dependencyName\n            });\n          } else {\n            error = internalTools_1.makeError(internalTools_1.ErrorCode.UNDECLARED_DEPENDENCY, `${issuerLocator.name} tried to access ${dependencyName}, but it isn't declared in its dependencies; this makes the require call ambiguous and unsound.\\n\\nRequired package: ${dependencyName} (via \"${request}\")\\nRequired by: ${issuerLocator.name}@${issuerLocator.reference} (via ${issuer})\\n`, {\n              request,\n              issuer,\n              issuerLocator: Object.assign({}, issuerLocator),\n              dependencyName\n            });\n          }\n        }\n\n        if (dependencyReference == null) {\n          if (fallbackReference === null || error === null) throw error || new Error(`Assertion failed: Expected an error to have been set`);\n          dependencyReference = fallbackReference;\n          const message = error.message.replace(/\\n.*/g, ``);\n          error.message = message;\n\n          if (!emittedWarnings.has(message)) {\n            emittedWarnings.add(message);\n            process.emitWarning(error);\n          }\n        } // We need to check that the package exists on the filesystem, because it might not have been installed\n\n\n        const dependencyLocator = Array.isArray(dependencyReference) ? {\n          name: dependencyReference[0],\n          reference: dependencyReference[1]\n        } : {\n          name: dependencyName,\n          reference: dependencyReference\n        };\n        const dependencyInformation = getPackageInformationSafe(dependencyLocator);\n\n        if (!dependencyInformation.packageLocation) {\n          throw internalTools_1.makeError(internalTools_1.ErrorCode.MISSING_DEPENDENCY, `A dependency seems valid but didn't get installed for some reason. This might be caused by a partial install, such as dev vs prod.\\n\\nRequired package: ${dependencyLocator.name}@${dependencyLocator.reference} (via \"${request}\")\\nRequired by: ${issuerLocator.name}@${issuerLocator.reference} (via ${issuer})\\n`, {\n            request,\n            issuer,\n            dependencyLocator: Object.assign({}, dependencyLocator)\n          });\n        } // Now that we know which package we should resolve to, we only have to find out the file location\n\n\n        const dependencyLocation = fslib_2.ppath.resolve(runtimeState.basePath, dependencyInformation.packageLocation);\n\n        if (subPath) {\n          unqualifiedPath = fslib_2.ppath.resolve(dependencyLocation, subPath);\n        } else {\n          unqualifiedPath = dependencyLocation;\n        }\n      }\n\n    return fslib_2.ppath.normalize(unqualifiedPath);\n  }\n  /**\n   * Transforms an unqualified path into a qualified path by using the Node resolution algorithm (which automatically\n   * appends \".js\" / \".json\", and transforms directory accesses into \"index.js\").\n   */\n\n\n  function resolveUnqualified(unqualifiedPath, {\n    extensions = Object.keys(module_1.Module._extensions)\n  } = {}) {\n    const candidates = [];\n    const qualifiedPath = applyNodeExtensionResolution(unqualifiedPath, candidates, {\n      extensions\n    });\n\n    if (qualifiedPath) {\n      return fslib_2.ppath.normalize(qualifiedPath);\n    } else {\n      throw internalTools_1.makeError(internalTools_1.ErrorCode.QUALIFIED_PATH_RESOLUTION_FAILED, `Qualified path resolution failed - none of the candidates can be found on the disk.\\n\\nSource path: ${unqualifiedPath}\\n${candidates.map(candidate => `Rejected candidate: ${candidate}\\n`).join(``)}`, {\n        unqualifiedPath\n      });\n    }\n  }\n  /**\n   * Transforms a request into a fully qualified path.\n   *\n   * Note that it is extremely important that the `issuer` path ends with a forward slash if the issuer is to be\n   * treated as a folder (ie. \"/tmp/foo/\" rather than \"/tmp/foo\" if \"foo\" is a directory). Otherwise relative\n   * imports won't be computed correctly (they'll get resolved relative to \"/tmp/\" instead of \"/tmp/foo/\").\n   */\n\n\n  function resolveRequest(request, issuer, {\n    considerBuiltins,\n    extensions\n  } = {}) {\n    const unqualifiedPath = resolveToUnqualified(request, issuer, {\n      considerBuiltins\n    });\n    if (unqualifiedPath === null) return null;\n\n    try {\n      return resolveUnqualified(unqualifiedPath, {\n        extensions\n      });\n    } catch (resolutionError) {\n      if (resolutionError.pnpCode === `QUALIFIED_PATH_RESOLUTION_FAILED`) Object.assign(resolutionError.data, {\n        request,\n        issuer\n      });\n      throw resolutionError;\n    }\n  }\n\n  function resolveVirtual(request) {\n    const normalized = fslib_2.ppath.normalize(request);\n    const resolved = fslib_1.VirtualFS.resolveVirtual(normalized);\n    return resolved !== normalized ? resolved : null;\n  }\n\n  return {\n    VERSIONS,\n    topLevel,\n    getLocator: (name, referencish) => {\n      if (Array.isArray(referencish)) {\n        return {\n          name: referencish[0],\n          reference: referencish[1]\n        };\n      } else {\n        return {\n          name,\n          reference: referencish\n        };\n      }\n    },\n    getDependencyTreeRoots: () => {\n      return [...runtimeState.dependencyTreeRoots];\n    },\n    getPackageInformation: locator => {\n      const info = getPackageInformation(locator);\n      if (info === null) return null;\n      const packageLocation = fslib_1.npath.fromPortablePath(info.packageLocation);\n      const nativeInfo = Object.assign(Object.assign({}, info), {\n        packageLocation\n      });\n      return nativeInfo;\n    },\n    findPackageLocator: path => {\n      return findPackageLocator(fslib_1.npath.toPortablePath(path));\n    },\n    resolveToUnqualified: maybeLog(`resolveToUnqualified`, (request, issuer, opts) => {\n      const portableIssuer = issuer !== null ? fslib_1.npath.toPortablePath(issuer) : null;\n      const resolution = resolveToUnqualified(fslib_1.npath.toPortablePath(request), portableIssuer, opts);\n      if (resolution === null) return null;\n      return fslib_1.npath.fromPortablePath(resolution);\n    }),\n    resolveUnqualified: maybeLog(`resolveUnqualified`, (unqualifiedPath, opts) => {\n      return fslib_1.npath.fromPortablePath(resolveUnqualified(fslib_1.npath.toPortablePath(unqualifiedPath), opts));\n    }),\n    resolveRequest: maybeLog(`resolveRequest`, (request, issuer, opts) => {\n      const portableIssuer = issuer !== null ? fslib_1.npath.toPortablePath(issuer) : null;\n      const resolution = resolveRequest(fslib_1.npath.toPortablePath(request), portableIssuer, opts);\n      if (resolution === null) return null;\n      return fslib_1.npath.fromPortablePath(resolution);\n    }),\n    resolveVirtual: maybeLog(`resolveVirtual`, path => {\n      const result = resolveVirtual(fslib_1.npath.toPortablePath(path));\n\n      if (result !== null) {\n        return fslib_1.npath.fromPortablePath(result);\n      } else {\n        return null;\n      }\n    })\n  };\n}\n\nexports.makeApi = makeApi;\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fslib_1 = __webpack_require__(5);\n\nconst module_1 = __webpack_require__(6);\n\nfunction makeManager(pnpapi, opts) {\n  const initialApiPath = fslib_1.npath.toPortablePath(pnpapi.resolveToUnqualified(`pnpapi`, null));\n  const initialApiStats = opts.fakeFs.statSync(fslib_1.npath.toPortablePath(initialApiPath));\n  const apiMetadata = new Map([[initialApiPath, {\n    cache: module_1.Module._cache,\n    instance: pnpapi,\n    stats: initialApiStats\n  }]]);\n\n  function loadApiInstance(pnpApiPath) {\n    const nativePath = fslib_1.npath.fromPortablePath(pnpApiPath); // @ts-ignore\n\n    const module = new module_1.Module(nativePath, null);\n    module.load(nativePath);\n    return module.exports;\n  }\n\n  function refreshApiEntry(pnpApiPath, apiEntry) {\n    const stats = opts.fakeFs.statSync(pnpApiPath);\n\n    if (stats.mtime > apiEntry.stats.mtime) {\n      console.warn(`[Warning] The runtime detected new informations in a PnP file; reloading the API instance (${pnpApiPath})`);\n      apiEntry.instance = loadApiInstance(pnpApiPath);\n      apiEntry.stats = stats;\n    }\n  }\n\n  function getApiEntry(pnpApiPath, refresh = false) {\n    let apiEntry = apiMetadata.get(pnpApiPath);\n\n    if (typeof apiEntry !== `undefined`) {\n      if (refresh) {\n        refreshApiEntry(pnpApiPath, apiEntry);\n      }\n    } else {\n      apiMetadata.set(pnpApiPath, apiEntry = {\n        cache: {},\n        instance: loadApiInstance(pnpApiPath),\n        stats: opts.fakeFs.statSync(pnpApiPath)\n      });\n    }\n\n    return apiEntry;\n  }\n\n  function findApiPathFor(modulePath) {\n    let curr;\n    let next = fslib_1.ppath.resolve(fslib_1.npath.toPortablePath(modulePath));\n\n    do {\n      curr = next;\n      const candidate = fslib_1.ppath.join(curr, `.pnp.js`);\n      if (fslib_1.xfs.existsSync(candidate) && fslib_1.xfs.statSync(candidate).isFile()) return candidate;\n      const cjsCandidate = fslib_1.ppath.join(curr, `.pnp.cjs`);\n      if (fslib_1.xfs.existsSync(cjsCandidate) && fslib_1.xfs.statSync(cjsCandidate).isFile()) return cjsCandidate;\n      next = fslib_1.ppath.dirname(curr);\n    } while (curr !== fslib_1.PortablePath.root);\n\n    return null;\n  }\n\n  function getApiPathFromParent(parent) {\n    if (parent == null) return initialApiPath;\n\n    if (typeof parent.pnpApiPath === `undefined`) {\n      if (parent.filename !== null) {\n        return findApiPathFor(parent.filename);\n      } else {\n        return initialApiPath;\n      }\n    }\n\n    if (parent.pnpApiPath !== null) return parent.pnpApiPath;\n    return null;\n  }\n\n  return {\n    getApiPathFromParent,\n    findApiPathFor,\n    getApiEntry\n  };\n}\n\nexports.makeManager = makeManager;\n\n/***/ })\n/******/ ])[\"default\"];\n});";
