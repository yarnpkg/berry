diff --git a/lib/tsc.js b/lib/tsc.js
index d58b28264..ed76677b1 100644
semver exclusivity >=4.9.1-beta <4.9.2-rc
--- a/lib/tsc.js
+++ b/lib/tsc.js
@@ -4683,6 +4683,9 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                if (process.versions.pnp) {
+                    return true;
+                }
                 if (platform === "win32" || platform === "win64") {
                     return false;
                 }
@@ -35501,15 +35504,15 @@ var ts;
         }
     }
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
@@ -35520,6 +35523,37 @@ var ts;
         var useCaseSensitiveFileNames = typeof host.useCaseSensitiveFileNames === "function" ? host.useCaseSensitiveFileNames() : host.useCaseSensitiveFileNames;
         return ts.comparePaths(path1, path2, !useCaseSensitiveFileNames) === 0;
     }
+    function getPnpTypeRoots(currentDirectory) {
+        var pnpapi = getPnpApi(currentDirectory);
+        if (!pnpapi) {
+            return [];
+        }
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var currentPackage = pnpapi.findPackageLocator("".concat(currentDirectory, "/"));
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    ts.getPnpTypeRoots = getPnpTypeRoots;
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArray(__spreadArray([], nmTypes, true), pnpTypes, true);
+        }
+    }
     function resolveTypeReferenceDirective(typeReferenceDirectiveName, containingFile, options, host, redirectedReference, cache, resolutionMode) {
         ts.Debug.assert(typeof typeReferenceDirectiveName === "string", "Non-string value passed to `ts.resolveTypeReferenceDirective`, likely by a wrapping package working with an outdated `resolveTypeReferenceDirectives` signature. This is probably not a problem in TS itself.");
         var traceEnabled = isTraceEnabled(options, host);
@@ -35646,7 +35680,9 @@ var ts;
                 }
                 var result_4;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, undefined, undefined);
+                    var searchResult = getPnpApi(initialLocationForSecondaryLookup)
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, undefined, undefined)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, undefined, undefined);
                     result_4 = searchResult && searchResult.value;
                 }
                 else {
@@ -36244,7 +36280,9 @@ var ts;
                     if (traceEnabled) {
                         trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                     }
-                    resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                    resolved_1 = getPnpApi(containingDirectory)
+                        ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference)
+                        : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
                 }
                 if (!resolved_1)
                     return undefined;
@@ -37084,8 +37122,16 @@ var ts;
         }
     }
     function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference) {
-        var _a;
         var candidate = ts.normalizePath(ts.combinePaths(nodeModulesDirectory, moduleName));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, undefined, undefined);
+    }
+    function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state, cache, redirectedReference) {
+        var candidate = ts.normalizePath(ts.combinePaths(packageDirectory, rest));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, undefined, undefined, true, state, cache, redirectedReference, candidate, rest, packageDirectory);
+    }
+    function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory) {
+        var _a;
+        var _b;
         var packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
         if (!(state.features & NodeResolutionFeatures.Exports)) {
             if (packageInfo) {
@@ -37107,13 +37153,16 @@ var ts;
             }
             return withPackageId(packageInfo, pathAndExtension);
         };
-        var _b = parsePackageName(moduleName), packageName = _b.packageName, rest = _b.rest;
-        var packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
+        var packageName;
+        if (rest === undefined)
+            (_a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest);
+        if (packageDirectory === undefined)
+            packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
         if (rest !== "") {
             packageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state);
         }
         if (packageInfo && packageInfo.contents.packageJsonContent.exports && state.features & NodeResolutionFeatures.Exports) {
-            return (_a = loadModuleFromExports(packageInfo, extensions, ts.combinePaths(".", rest), state, cache, redirectedReference)) === null || _a === void 0 ? void 0 : _a.value;
+            return (_b = loadModuleFromExports(packageInfo, extensions, ts.combinePaths(".", rest), state, cache, redirectedReference)) === null || _b === void 0 ? void 0 : _b.value;
         }
         if (rest !== "" && packageInfo && packageInfo.contents.versionPaths) {
             if (state.traceEnabled) {
@@ -37276,6 +37325,47 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi("".concat(path, "/"));
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, "".concat(containingDirectory, "/"), { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution).replace(/\/$/, "");
+        }
+        catch (_a) {
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state, cache, redirectedReference)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? loadModuleFromPnpResolution(Extensions.DtsOnly, typePackageResolution, rest, state, cache, redirectedReference)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 var ts;
 (function (ts) {
@@ -97502,6 +97592,7 @@ var ts;
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["None"] = 0] = "None";
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Partial"] = 1] = "Partial";
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Full"] = 2] = "Full";
+        ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Resolutions"] = 3] = "Resolutions";
     })(ConfigFileProgramReloadLevel = ts.ConfigFileProgramReloadLevel || (ts.ConfigFileProgramReloadLevel = {}));
     function updateSharedExtendedConfigFileWatcher(projectPath, options, extendedConfigFilesMap, createExtendedConfigFileWatch, toPath) {
         var _a;
@@ -103882,6 +103973,26 @@ var ts;
                 return undefined;
             }
             var parts = ts.getNodeModulePathParts(path);
+            var packageName;
+            if (!parts && typeof process.versions.pnp !== "undefined") {
+                var findPnpApi = require("module").findPnpApi;
+                var pnpApi = findPnpApi(path);
+                var locator = pnpApi === null || pnpApi === void 0 ? void 0 : pnpApi.findPackageLocator(path);
+                if (locator !== null && locator !== undefined) {
+                    var sourceLocator = pnpApi.findPackageLocator("".concat(sourceDirectory, "/"));
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        packageRootIndex: information.packageLocation.length - 1,
+                        fileNameIndex: path.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -103918,14 +104029,18 @@ var ts;
             if (isRedirect && !isPackageRootPath) {
                 return undefined;
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            if (typeof process.versions.pnp === "undefined") {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
-            var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
-            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            var nodeModulesDirectoryName = typeof packageName !== "undefined"
+                ? packageName + moduleSpecifier.substring(parts.packageRootIndex)
+                : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var _a, _b;
                 var packageRootPath = path.substring(0, packageRootIndex);
@@ -104750,6 +104865,10 @@ var ts;
         if (configFileName) {
             configFileWatcher = watchFile(configFileName, scheduleProgramReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
         }
+        var pnpFileWatcher;
+        if (typeof process.versions.pnp !== "undefined") {
+            pnpFileWatcher = watchFile(require.resolve("pnpapi"), scheduleResolutionReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
+        }
         var compilerHost = ts.createCompilerHostFromProgramHost(host, function () { return compilerOptions; }, directoryStructureHost);
         ts.setGetSourceFileAsHashVersioned(compilerHost, host);
         var getNewSourceFile = compilerHost.getSourceFile;
@@ -104828,6 +104947,10 @@ var ts;
                 configFileWatcher.close();
                 configFileWatcher = undefined;
             }
+            if (pnpFileWatcher) {
+                pnpFileWatcher.close();
+                pnpFileWatcher = undefined;
+            }
             extendedConfigCache === null || extendedConfigCache === void 0 ? void 0 : extendedConfigCache.clear();
             extendedConfigCache = undefined;
             if (sharedExtendedConfigFileWatchers) {
@@ -104860,7 +104983,8 @@ var ts;
         function getCurrentProgram() {
             return builderProgram && builderProgram.getProgramOrUndefined();
         }
-        function synchronizeProgram() {
+        function synchronizeProgram(forceAllFilesAsInvalidated) {
+            if (forceAllFilesAsInvalidated === void 0) { forceAllFilesAsInvalidated = false; }
             writeLog("Synchronizing program");
             clearInvalidateResolutionsOfFailedLookupLocations();
             var program = getCurrentBuilderProgram();
@@ -104870,7 +104994,7 @@ var ts;
                     resolutionCache.clear();
                 }
             }
-            var hasInvalidatedResolutions = resolutionCache.createHasInvalidatedResolutions(customHasInvalidatedResolutions);
+            var hasInvalidatedResolutions = resolutionCache.createHasInvalidatedResolutions(forceAllFilesAsInvalidated ? ts.returnTrue : customHasInvalidatedResolutions);
             var _a = ts.changeCompilerHostLikeToUseCache(compilerHost, toPath), originalReadFile = _a.originalReadFile, originalFileExists = _a.originalFileExists, originalDirectoryExists = _a.originalDirectoryExists, originalCreateDirectory = _a.originalCreateDirectory, originalWriteFile = _a.originalWriteFile;
             if (ts.isProgramUptoDate(getCurrentProgram(), rootFileNames, compilerOptions, getSourceVersion, function (fileName) { return compilerHost.fileExists(fileName); }, hasInvalidatedResolutions, hasChangedAutomaticTypeDirectiveNames, getParsedCommandLine, projectReferences)) {
                 if (hasChangedConfigFileParsingErrors) {
@@ -105062,6 +105186,12 @@ var ts;
             reloadLevel = ts.ConfigFileProgramReloadLevel.Full;
             scheduleProgramUpdate();
         }
+        function scheduleResolutionReload() {
+            writeLog("Clearing resolutions");
+            resolutionCache.clear();
+            reloadLevel = ts.ConfigFileProgramReloadLevel.Resolutions;
+            scheduleProgramUpdate();
+        }
         function updateProgramWithWatchStatus() {
             timerToUpdateProgram = undefined;
             reportFileChangeDetectedOnCreateProgram = true;
@@ -105077,6 +105207,10 @@ var ts;
                     ts.perfLogger.logStartUpdateProgram("FullConfigReload");
                     reloadConfigFile();
                     break;
+                case ts.ConfigFileProgramReloadLevel.Resolutions:
+                    ts.perfLogger.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+                    synchronizeProgram(true);
+                    break;
                 default:
                     ts.perfLogger.logStartUpdateProgram("SynchronizeProgram");
                     synchronizeProgram();
diff --git a/lib/tsserver.js b/lib/tsserver.js
index 5d1d55532..00d948177 100644
semver exclusivity >=4.9.1-beta <4.9.2-rc
--- a/lib/tsserver.js
+++ b/lib/tsserver.js
@@ -7291,6 +7291,11 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                // The PnP runtime is always case-sensitive
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    return true;
+                }
                 // win32\win64 are case insensitive platforms
                 if (platform === "win32" || platform === "win64") {
                     return false;
@@ -43419,18 +43424,17 @@ var ts;
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
     /**
      * Returns the path to every node_modules/@types directory from some ancestor directory.
-     * Returns undefined if there are none.
      */
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
             // And if it doesn't exist, tough.
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
@@ -43441,6 +43445,42 @@ var ts;
         var useCaseSensitiveFileNames = typeof host.useCaseSensitiveFileNames === "function" ? host.useCaseSensitiveFileNames() : host.useCaseSensitiveFileNames;
         return ts.comparePaths(path1, path2, !useCaseSensitiveFileNames) === 0 /* Comparison.EqualTo */;
     }
+    /**
+     * @internal
+     */
+    function getPnpTypeRoots(currentDirectory) {
+        var pnpapi = getPnpApi(currentDirectory);
+        if (!pnpapi) {
+            return [];
+        }
+        // Some TS consumers pass relative paths that aren't normalized
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var currentPackage = pnpapi.findPackageLocator("".concat(currentDirectory, "/"));
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            // eslint-disable-next-line no-null/no-null
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    ts.getPnpTypeRoots = getPnpTypeRoots;
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArray(__spreadArray([], nmTypes, true), pnpTypes, true);
+        }
+    }
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
@@ -43582,7 +43622,9 @@ var ts;
                 }
                 var result_4;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
+                    var searchResult = getPnpApi(initialLocationForSecondaryLookup)
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
                     result_4 = searchResult && searchResult.value;
                 }
                 else {
@@ -44307,7 +44349,9 @@ var ts;
                     if (traceEnabled) {
                         trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                     }
-                    resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                    resolved_1 = getPnpApi(containingDirectory)
+                        ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference)
+                        : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
                 }
                 if (!resolved_1)
                     return undefined;
@@ -45253,8 +45297,16 @@ var ts;
         }
     }
     function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference) {
-        var _a;
         var candidate = ts.normalizePath(ts.combinePaths(nodeModulesDirectory, moduleName));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, /* rest */ undefined, /* packageDirectory */ undefined);
+    }
+    function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state, cache, redirectedReference) {
+        var candidate = ts.normalizePath(ts.combinePaths(packageDirectory, rest));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, /*moduleName*/ undefined, /*nodeModulesDirectory*/ undefined, /*nodeModulesDirectoryExists*/ true, state, cache, redirectedReference, candidate, rest, packageDirectory);
+    }
+    function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory) {
+        var _a;
+        var _b;
         // First look for a nested package.json, as in `node_modules/foo/bar/package.json`.
         var packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
         // But only if we're not respecting export maps (if we are, we might redirect around this location)
@@ -45281,15 +45333,18 @@ var ts;
             }
             return withPackageId(packageInfo, pathAndExtension);
         };
-        var _b = parsePackageName(moduleName), packageName = _b.packageName, rest = _b.rest;
-        var packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
+        var packageName;
+        if (rest === undefined)
+            (_a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest);
+        if (packageDirectory === undefined)
+            packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
         if (rest !== "") {
             // Previous `packageInfo` may have been from a nested package.json; ensure we have the one from the package root now.
             packageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state);
         }
         // package exports are higher priority than file/directory/typesVersions lookups and (and, if there's exports present, blocks them)
         if (packageInfo && packageInfo.contents.packageJsonContent.exports && state.features & NodeResolutionFeatures.Exports) {
-            return (_a = loadModuleFromExports(packageInfo, extensions, ts.combinePaths(".", rest), state, cache, redirectedReference)) === null || _a === void 0 ? void 0 : _a.value;
+            return (_b = loadModuleFromExports(packageInfo, extensions, ts.combinePaths(".", rest), state, cache, redirectedReference)) === null || _b === void 0 ? void 0 : _b.value;
         }
         if (rest !== "" && packageInfo && packageInfo.contents.versionPaths) {
             if (state.traceEnabled) {
@@ -45474,6 +45529,58 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    /**
+     * We only allow PnP to be used as a resolution strategy if TypeScript
+     * itself is executed under a PnP runtime (and we only allow it to access
+     * the current PnP runtime, not any on the disk). This ensures that we
+     * don't execute potentially malicious code that didn't already have a
+     * chance to be executed (if we're running within the runtime, it means
+     * that the runtime has already been executed).
+     * @internal
+     */
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi("".concat(path, "/"));
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, "".concat(containingDirectory, "/"), { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution).replace(/\/$/, "");
+        }
+        catch (_a) {
+            // Nothing to do
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    /* @internal */
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state, cache, redirectedReference)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? loadModuleFromPnpResolution(Extensions.DtsOnly, typePackageResolution, rest, state, cache, redirectedReference)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 /* @internal */
 var ts;
@@ -117895,6 +118002,8 @@ var ts;
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Partial"] = 1] = "Partial";
         /** Reload completely by re-reading contents of config file from disk and updating program */
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Full"] = 2] = "Full";
+        /** Reload the resolutions */
+        ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Resolutions"] = 3] = "Resolutions";
     })(ConfigFileProgramReloadLevel = ts.ConfigFileProgramReloadLevel || (ts.ConfigFileProgramReloadLevel = {}));
     /**
      * Updates the map of shared extended config file watches with a new set of extended config files from a base config file of the project
@@ -125282,6 +125391,30 @@ var ts;
                 return undefined;
             }
             var parts = ts.getNodeModulePathParts(path);
+            var packageName;
+            if (!parts && typeof process.versions.pnp !== "undefined") {
+                var findPnpApi = require("module").findPnpApi;
+                var pnpApi = findPnpApi(path);
+                var locator = pnpApi === null || pnpApi === void 0 ? void 0 : pnpApi.findPackageLocator(path);
+                // eslint-disable-next-line no-null/no-null
+                if (locator !== null && locator !== undefined) {
+                    var sourceLocator = pnpApi.findPackageLocator("".concat(sourceDirectory, "/"));
+                    // Don't use the package name when the imported file is inside
+                    // the source directory (prefer a relative path instead)
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        // The last character from packageLocation is the trailing "/", we want to point to it
+                        packageRootIndex: information.packageLocation.length - 1,
+                        fileNameIndex: path.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -125321,18 +125454,24 @@ var ts;
             if (isRedirect && !isPackageRootPath) {
                 return undefined;
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            // Get a path that's relative to node_modules or the importing file's path
-            // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            // If PnP is enabled the node_modules entries we'll get will always be relevant even if they
+            // are located in a weird path apparently outside of the source directory
+            if (typeof process.versions.pnp === "undefined") {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                // Get a path that's relative to node_modules or the importing file's path
+                // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
             // If the module was found in @types, get the actual Node package name
-            var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            var nodeModulesDirectoryName = typeof packageName !== "undefined"
+                ? packageName + moduleSpecifier.substring(parts.packageRootIndex)
+                : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
             // For classic resolution, only allow importing from node_modules/@types, not other node_modules
-            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var _a, _b;
                 var packageRootPath = path.substring(0, packageRootIndex);
@@ -126225,6 +126364,10 @@ var ts;
         if (configFileName) {
             configFileWatcher = watchFile(configFileName, scheduleProgramReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
         }
+        var pnpFileWatcher;
+        if (typeof process.versions.pnp !== "undefined") {
+            pnpFileWatcher = watchFile(require.resolve("pnpapi"), scheduleResolutionReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
+        }
         var compilerHost = ts.createCompilerHostFromProgramHost(host, function () { return compilerOptions; }, directoryStructureHost);
         ts.setGetSourceFileAsHashVersioned(compilerHost, host);
         // Members for CompilerHost
@@ -126311,6 +126454,10 @@ var ts;
                 configFileWatcher.close();
                 configFileWatcher = undefined;
             }
+            if (pnpFileWatcher) {
+                pnpFileWatcher.close();
+                pnpFileWatcher = undefined;
+            }
             extendedConfigCache === null || extendedConfigCache === void 0 ? void 0 : extendedConfigCache.clear();
             extendedConfigCache = undefined;
             if (sharedExtendedConfigFileWatchers) {
@@ -126343,7 +126490,8 @@ var ts;
         function getCurrentProgram() {
             return builderProgram && builderProgram.getProgramOrUndefined();
         }
-        function synchronizeProgram() {
+        function synchronizeProgram(forceAllFilesAsInvalidated) {
+            if (forceAllFilesAsInvalidated === void 0) { forceAllFilesAsInvalidated = false; }
             writeLog("Synchronizing program");
             clearInvalidateResolutionsOfFailedLookupLocations();
             var program = getCurrentBuilderProgram();
@@ -126353,7 +126501,7 @@ var ts;
                     resolutionCache.clear();
                 }
             }
-            var hasInvalidatedResolutions = resolutionCache.createHasInvalidatedResolutions(customHasInvalidatedResolutions);
+            var hasInvalidatedResolutions = resolutionCache.createHasInvalidatedResolutions(forceAllFilesAsInvalidated ? ts.returnTrue : customHasInvalidatedResolutions);
             var _a = ts.changeCompilerHostLikeToUseCache(compilerHost, toPath), originalReadFile = _a.originalReadFile, originalFileExists = _a.originalFileExists, originalDirectoryExists = _a.originalDirectoryExists, originalCreateDirectory = _a.originalCreateDirectory, originalWriteFile = _a.originalWriteFile;
             if (ts.isProgramUptoDate(getCurrentProgram(), rootFileNames, compilerOptions, getSourceVersion, function (fileName) { return compilerHost.fileExists(fileName); }, hasInvalidatedResolutions, hasChangedAutomaticTypeDirectiveNames, getParsedCommandLine, projectReferences)) {
                 if (hasChangedConfigFileParsingErrors) {
@@ -126567,6 +126715,12 @@ var ts;
             reloadLevel = ts.ConfigFileProgramReloadLevel.Full;
             scheduleProgramUpdate();
         }
+        function scheduleResolutionReload() {
+            writeLog("Clearing resolutions");
+            resolutionCache.clear();
+            reloadLevel = ts.ConfigFileProgramReloadLevel.Resolutions;
+            scheduleProgramUpdate();
+        }
         function updateProgramWithWatchStatus() {
             timerToUpdateProgram = undefined;
             reportFileChangeDetectedOnCreateProgram = true;
@@ -126582,6 +126736,10 @@ var ts;
                     ts.perfLogger.logStartUpdateProgram("FullConfigReload");
                     reloadConfigFile();
                     break;
+                case ts.ConfigFileProgramReloadLevel.Resolutions:
+                    ts.perfLogger.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+                    synchronizeProgram(/*forceAllFilesAsInvalidated*/ true);
+                    break;
                 default:
                     ts.perfLogger.logStartUpdateProgram("SynchronizeProgram");
                     synchronizeProgram();
@@ -132540,7 +132698,7 @@ var ts;
      * Don't include something from a `node_modules` that isn't actually reachable by a global import.
      * A relative import to node_modules is usually a bad idea.
      */
-    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+    function isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath) {
         // If it's in a `node_modules` but is not reachable from here via a global import, don't bother.
         var toNodeModules = ts.forEachAncestorDirectory(toPath, function (ancestor) { return ts.getBaseFileName(ancestor) === "node_modules" ? ancestor : undefined; });
         var toNodeModulesParent = toNodeModules && ts.getDirectoryPath(getCanonicalFileName(toNodeModules));
@@ -132548,6 +132706,33 @@ var ts;
             || ts.startsWith(getCanonicalFileName(fromPath), toNodeModulesParent)
             || (!!globalCachePath && ts.startsWith(getCanonicalFileName(globalCachePath), toNodeModulesParent));
     }
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi("".concat(path, "/"));
+    }
+    function isImportablePathPnp(fromPath, toPath) {
+        var pnpApi = getPnpApi(fromPath);
+        var fromLocator = pnpApi.findPackageLocator(fromPath);
+        var toLocator = pnpApi.findPackageLocator(toPath);
+        // eslint-disable-next-line no-null/no-null
+        if (toLocator === null) {
+            return false;
+        }
+        var fromInfo = pnpApi.getPackageInformation(fromLocator);
+        var toReference = fromInfo.packageDependencies.get(toLocator.name);
+        return toReference === toLocator.reference;
+    }
+    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+        if (getPnpApi(fromPath)) {
+            return isImportablePathPnp(fromPath, toPath);
+        }
+        else {
+            return isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath);
+        }
+    }
     function forEachExternalModuleToImportFrom(program, host, preferences, useAutoImportProvider, cb) {
         var _a, _b;
         var useCaseSensitiveFileNames = ts.hostUsesCaseSensitiveFileNames(host);
@@ -134459,6 +134644,7 @@ var ts;
              *          This includes all files that are found in node_modules/moduleName/ with acceptable file extensions
              */
             function getCompletionEntriesForNonRelativeModules(fragment, scriptPath, mode, compilerOptions, host, includeExtensionsOption, typeChecker) {
+                var _a, _b;
                 var baseUrl = compilerOptions.baseUrl, paths = compilerOptions.paths;
                 var result = createNameAndKindSet();
                 var extensionOptions = getExtensionOptions(compilerOptions, includeExtensionsOption);
@@ -134471,8 +134657,8 @@ var ts;
                     }
                 }
                 var fragmentDirectory = getFragmentDirectory(fragment);
-                for (var _i = 0, _a = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _a.length; _i++) {
-                    var ambientName = _a[_i];
+                for (var _i = 0, _c = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _c.length; _i++) {
+                    var ambientName = _c[_i];
                     result.add(nameAndKind(ambientName, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined));
                 }
                 getCompletionEntriesFromTypings(host, compilerOptions, scriptPath, fragmentDirectory, extensionOptions, result);
@@ -134481,8 +134667,8 @@ var ts;
                     // (But do if we didn't find anything, e.g. 'package.json' missing.)
                     var foundGlobal = false;
                     if (fragmentDirectory === undefined) {
-                        for (var _b = 0, _c = enumerateNodeModulesVisibleToScript(host, scriptPath); _b < _c.length; _b++) {
-                            var moduleName = _c[_b];
+                        for (var _d = 0, _e = enumerateNodeModulesVisibleToScript(host, scriptPath); _d < _e.length; _d++) {
+                            var moduleName = _e[_d];
                             var moduleResult = nameAndKind(moduleName, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined);
                             if (!result.has(moduleResult.name)) {
                                 foundGlobal = true;
@@ -134497,7 +134683,22 @@ var ts;
                                 getCompletionEntriesForDirectoryFragment(fragment, nodeModules, extensionOptions, host, /*exclude*/ undefined, result);
                             }
                         };
-                        if (fragmentDirectory && isEmitModuleResolutionRespectingExportMaps(compilerOptions)) {
+                        var checkExports_1 = function (packageFile, packageDirectory, fragmentSubpath) {
+                            var packageJson = ts.readJson(packageFile, host);
+                            var exports = packageJson.exports;
+                            if (exports) {
+                                if (typeof exports !== "object" || exports === null) { // eslint-disable-line no-null/no-null
+                                    return true; // null exports or entrypoint only, no sub-modules available
+                                }
+                                var keys = ts.getOwnKeys(exports);
+                                var conditions_1 = mode === ts.ModuleKind.ESNext ? ["node", "import", "types"] : ["node", "require", "types"];
+                                addCompletionEntriesFromPathsOrExports(result, fragmentSubpath, packageDirectory, extensionOptions, host, keys, function (key) { return ts.singleElementArray(getPatternFromFirstMatchingCondition(exports[key], conditions_1)); }, ts.comparePatternKeys);
+                                return true;
+                            }
+                            return false;
+                        };
+                        var shouldCheckExports = fragmentDirectory && isEmitModuleResolutionRespectingExportMaps(compilerOptions);
+                        if (shouldCheckExports) {
                             var nodeModulesDirectoryLookup_1 = ancestorLookup;
                             ancestorLookup = function (ancestor) {
                                 var components = ts.getPathComponents(fragment);
@@ -134516,23 +134717,46 @@ var ts;
                                 var packageDirectory = ts.combinePaths(ancestor, "node_modules", packagePath);
                                 var packageFile = ts.combinePaths(packageDirectory, "package.json");
                                 if (ts.tryFileExists(host, packageFile)) {
-                                    var packageJson = ts.readJson(packageFile, host);
-                                    var exports_1 = packageJson.exports;
-                                    if (exports_1) {
-                                        if (typeof exports_1 !== "object" || exports_1 === null) { // eslint-disable-line no-null/no-null
-                                            return; // null exports or entrypoint only, no sub-modules available
-                                        }
-                                        var keys = ts.getOwnKeys(exports_1);
-                                        var fragmentSubpath = components.join("/") + (components.length && ts.hasTrailingDirectorySeparator(fragment) ? "/" : "");
-                                        var conditions_1 = mode === ts.ModuleKind.ESNext ? ["node", "import", "types"] : ["node", "require", "types"];
-                                        addCompletionEntriesFromPathsOrExports(result, fragmentSubpath, packageDirectory, extensionOptions, host, keys, function (key) { return ts.singleElementArray(getPatternFromFirstMatchingCondition(exports_1[key], conditions_1)); }, ts.comparePatternKeys);
+                                    var fragmentSubpath = components.join("/") + (components.length && ts.hasTrailingDirectorySeparator(fragment) ? "/" : "");
+                                    if (checkExports_1(packageFile, packageDirectory, fragmentSubpath)) {
                                         return;
                                     }
                                 }
                                 return nodeModulesDirectoryLookup_1(ancestor);
                             };
                         }
-                        ts.forEachAncestorDirectory(scriptPath, ancestorLookup);
+                        var pnpapi = (_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath);
+                        if (pnpapi) {
+                            // Splits a require request into its components, or return null if the request is a file path
+                            var pathRegExp = /^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:@[^/]+\/)?[^/]+)\/*(.*|)$/;
+                            var dependencyNameMatch = fragment.match(pathRegExp);
+                            if (dependencyNameMatch) {
+                                var dependencyName = dependencyNameMatch[1], subPath = dependencyNameMatch[2];
+                                var unqualified = void 0;
+                                try {
+                                    unqualified = pnpapi.resolveToUnqualified(dependencyName, scriptPath, { considerBuiltins: false });
+                                }
+                                catch (_f) {
+                                    // It's fine if the resolution fails
+                                }
+                                if (unqualified) {
+                                    var packageDirectory = ts.normalizePath(unqualified);
+                                    var shouldGetCompletions = true;
+                                    if (shouldCheckExports) {
+                                        var packageFile = ts.combinePaths(packageDirectory, "package.json");
+                                        if (ts.tryFileExists(host, packageFile) && checkExports_1(packageFile, packageDirectory, subPath)) {
+                                            shouldGetCompletions = false;
+                                        }
+                                    }
+                                    if (shouldGetCompletions) {
+                                        getCompletionEntriesForDirectoryFragment(subPath, packageDirectory, extensionOptions, host, /*exclude*/ undefined, result);
+                                    }
+                                }
+                            }
+                        }
+                        else {
+                            ts.forEachAncestorDirectory(scriptPath, ancestorLookup);
+                        }
                     }
                 }
                 return ts.arrayFrom(result.values());
@@ -134663,6 +134887,7 @@ var ts;
                 return addReplacementSpans(toComplete, range.pos + prefix.length, ts.arrayFrom(names.values()));
             }
             function getCompletionEntriesFromTypings(host, options, scriptPath, fragmentDirectory, extensionOptions, result) {
+                var _a, _b;
                 if (result === void 0) { result = createNameAndKindSet(); }
                 // Check for typings specified in compiler options
                 var seen = new ts.Map();
@@ -134671,11 +134896,19 @@ var ts;
                     var root = typeRoots_1[_i];
                     getCompletionEntriesFromDirectories(root);
                 }
-                // Also get all @types typings installed in visible node_modules directories
-                for (var _a = 0, _b = ts.findPackageJsons(scriptPath, host); _a < _b.length; _a++) {
-                    var packageJson = _b[_a];
-                    var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
-                    getCompletionEntriesFromDirectories(typesDir);
+                if ((_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath)) {
+                    for (var _c = 0, _d = ts.getPnpTypeRoots(scriptPath); _c < _d.length; _c++) {
+                        var root = _d[_c];
+                        getCompletionEntriesFromDirectories(root);
+                    }
+                }
+                else {
+                    // Also get all @types typings installed in visible node_modules directories
+                    for (var _e = 0, _f = ts.findPackageJsons(scriptPath, host); _e < _f.length; _e++) {
+                        var packageJson = _f[_e];
+                        var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
+                        getCompletionEntriesFromDirectories(typesDir);
+                    }
                 }
                 return result;
                 function getCompletionEntriesFromDirectories(directory) {
@@ -165648,9 +165881,9 @@ var ts;
                 if (isTopLevelDeclarationStatement(statement) &&
                     !isExported(sourceFile, statement, useEs6Exports) &&
                     forEachTopLevelDeclaration(statement, function (d) { return needExport.has(ts.Debug.checkDefined(d.symbol)); })) {
-                    var exports = addExport(statement, useEs6Exports);
-                    if (exports)
-                        return exports;
+                    var exports_1 = addExport(statement, useEs6Exports);
+                    if (exports_1)
+                        return exports_1;
                 }
                 return statement;
             });
@@ -174813,6 +175046,40 @@ var ts;
                 return this.projectReferences;
             };
             ConfiguredProject.prototype.updateReferences = function (refs) {
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    // With Plug'n'Play, dependencies that list peer dependencies
+                    // are "virtualized": they are resolved to a unique (virtual)
+                    // path that the underlying filesystem layer then resolve back
+                    // to the original location.
+                    //
+                    // When a workspace depends on another workspace with peer
+                    // dependencies, this other workspace will thus be resolved to
+                    // a unique path that won't match what the initial project has
+                    // listed in its `references` field, and TS thus won't leverage
+                    // the reference at all.
+                    //
+                    // To avoid that, we compute here the virtualized paths for the
+                    // user-provided references in our references by directly querying
+                    // the PnP API. This way users don't have to know the virtual paths,
+                    // but we still support them just fine even through references.
+                    var basePath_1 = this.getCurrentDirectory();
+                    var findPnpApi_1 = require("module").findPnpApi;
+                    var getPnpPath_1 = function (path) {
+                        try {
+                            var pnpApi = findPnpApi_1("".concat(path, "/"));
+                            var targetLocator = pnpApi.findPackageLocator("".concat(path, "/"));
+                            var packageLocation = pnpApi.getPackageInformation(targetLocator).packageLocation;
+                            var request = ts.combinePaths(targetLocator.name, ts.getRelativePathFromDirectory(packageLocation, path, /*ignoreCase*/ false));
+                            return pnpApi.resolveToUnqualified(request, "".concat(basePath_1, "/"));
+                        }
+                        catch (_a) {
+                            // something went wrong with the resolution, try not to fail
+                            return path;
+                        }
+                    };
+                    refs = refs === null || refs === void 0 ? void 0 : refs.map(function (r) { return (__assign(__assign({}, r), { path: getPnpPath_1(r.path) })); });
+                }
                 this.projectReferences = refs;
                 this.potentialProjectReferences = undefined;
             };
@@ -175431,6 +175698,7 @@ var ts;
                         watchDirectory: ts.returnNoopFileWatcher,
                     } :
                     ts.getWatchFactory(this.host, watchLogLevel, log, getDetailWatchInfo);
+                this.pnpWatcher = this.watchPnpFile();
             }
             ProjectService.prototype.toPath = function (fileName) {
                 return ts.toPath(fileName, this.currentDirectory, this.toCanonicalFileName);
@@ -177288,7 +177556,7 @@ var ts;
             };
             ProjectService.prototype.setHostConfiguration = function (args) {
                 var _this = this;
-                var _a;
+                var _a, _b;
                 if (args.file) {
                     var info = this.getScriptInfoForNormalizedPath(server.toNormalizedPath(args.file));
                     if (info) {
@@ -177306,7 +177574,7 @@ var ts;
                         this.logger.info("Format host information updated");
                     }
                     if (args.preferences) {
-                        var _b = this.hostConfiguration.preferences, lazyConfiguredProjectsFromExternalProject = _b.lazyConfiguredProjectsFromExternalProject, includePackageJsonAutoImports = _b.includePackageJsonAutoImports;
+                        var _c = this.hostConfiguration.preferences, lazyConfiguredProjectsFromExternalProject = _c.lazyConfiguredProjectsFromExternalProject, includePackageJsonAutoImports = _c.includePackageJsonAutoImports;
                         this.hostConfiguration.preferences = __assign(__assign({}, this.hostConfiguration.preferences), args.preferences);
                         if (lazyConfiguredProjectsFromExternalProject && !this.hostConfiguration.preferences.lazyConfiguredProjectsFromExternalProject) {
                             // Load configured projects for external projects that are pending reload
@@ -177332,6 +177600,8 @@ var ts;
                     if (args.watchOptions) {
                         this.hostConfiguration.watchOptions = (_a = convertWatchOptions(args.watchOptions)) === null || _a === void 0 ? void 0 : _a.watchOptions;
                         this.logger.info("Host watch options changed to ".concat(JSON.stringify(this.hostConfiguration.watchOptions), ", it will be take effect for next watches."));
+                        (_b = this.pnpWatcher) === null || _b === void 0 ? void 0 : _b.close();
+                        this.watchPnpFile();
                     }
                 }
             };
@@ -178467,6 +178737,27 @@ var ts;
                 });
             };
             /*@internal*/
+            ProjectService.prototype.watchPnpFile = function () {
+                var _this = this;
+                if (typeof process.versions.pnp === "undefined") {
+                    return;
+                }
+                var findPnpApi = require("module").findPnpApi;
+                // eslint-disable-next-line no-null/no-null
+                var pnpFileName = findPnpApi(__filename).resolveRequest("pnpapi", /*issuer*/ null);
+                return this.watchFactory.watchFile(pnpFileName, function () {
+                    _this.forEachProject(function (project) {
+                        for (var _i = 0, _a = project.getScriptInfos(); _i < _a.length; _i++) {
+                            var info = _a[_i];
+                            project.resolutionCache.invalidateResolutionOfFile(info.path);
+                        }
+                        project.markAsDirty();
+                        updateProjectIfDirty(project);
+                    });
+                    _this.delayEnsureProjectForOpenFiles();
+                }, ts.PollingInterval.Low, this.hostConfiguration.watchOptions, ts.WatchType.ConfigFile);
+            };
+            /*@internal*/
             ProjectService.prototype.watchPackageJsonFile = function (path) {
                 var _this = this;
                 var watchers = this.packageJsonFilesMap || (this.packageJsonFilesMap = new ts.Map());
@@ -185205,6 +185496,11 @@ var ts;
                         }
                         try {
                             var args = [ts.combinePaths(__dirname, "watchGuard.js"), path];
+                            if (typeof process.versions.pnp !== "undefined") {
+                                var findPnpApi = require("module").findPnpApi;
+                                // eslint-disable-next-line no-null/no-null
+                                args.unshift("-r", findPnpApi(__filename).resolveRequest("pnpapi", /* issuer */ null));
+                            }
                             if (logger.hasLevel(server.LogLevel.verbose)) {
                                 logger.info("Starting ".concat(process.execPath, " with args:").concat(server.stringifyIndented(args)));
                             }
@@ -185451,6 +185747,11 @@ var ts;
                             break;
                         }
                     }
+                    if (typeof process.versions.pnp !== "undefined") {
+                        var findPnpApi = require("module").findPnpApi;
+                        // eslint-disable-next-line no-null/no-null
+                        execArgv.unshift("-r", findPnpApi(__filename).resolveRequest("pnpapi", /* issuer */ null));
+                    }
                     this.installer = childProcess.fork(ts.combinePaths(__dirname, "typingsInstaller.js"), args, { execArgv: execArgv });
                     this.installer.on("message", function (m) { return _this.handleMessage(m); });
                     // We have to schedule this event to the next tick
diff --git a/lib/tsserverlibrary.js b/lib/tsserverlibrary.js
index 00143e7ae..cb6e2cb2b 100644
semver exclusivity >=4.9.1-beta <4.9.2-rc
--- a/lib/tsserverlibrary.js
+++ b/lib/tsserverlibrary.js
@@ -7290,6 +7290,11 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                // The PnP runtime is always case-sensitive
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    return true;
+                }
                 // win32\win64 are case insensitive platforms
                 if (platform === "win32" || platform === "win64") {
                     return false;
@@ -43418,18 +43423,17 @@ var ts;
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
     /**
      * Returns the path to every node_modules/@types directory from some ancestor directory.
-     * Returns undefined if there are none.
      */
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
             // And if it doesn't exist, tough.
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
@@ -43440,6 +43444,42 @@ var ts;
         var useCaseSensitiveFileNames = typeof host.useCaseSensitiveFileNames === "function" ? host.useCaseSensitiveFileNames() : host.useCaseSensitiveFileNames;
         return ts.comparePaths(path1, path2, !useCaseSensitiveFileNames) === 0 /* Comparison.EqualTo */;
     }
+    /**
+     * @internal
+     */
+    function getPnpTypeRoots(currentDirectory) {
+        var pnpapi = getPnpApi(currentDirectory);
+        if (!pnpapi) {
+            return [];
+        }
+        // Some TS consumers pass relative paths that aren't normalized
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var currentPackage = pnpapi.findPackageLocator("".concat(currentDirectory, "/"));
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            // eslint-disable-next-line no-null/no-null
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    ts.getPnpTypeRoots = getPnpTypeRoots;
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArray(__spreadArray([], nmTypes, true), pnpTypes, true);
+        }
+    }
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
@@ -43581,7 +43621,9 @@ var ts;
                 }
                 var result_4;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
+                    var searchResult = getPnpApi(initialLocationForSecondaryLookup)
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
                     result_4 = searchResult && searchResult.value;
                 }
                 else {
@@ -44306,7 +44348,9 @@ var ts;
                     if (traceEnabled) {
                         trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                     }
-                    resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                    resolved_1 = getPnpApi(containingDirectory)
+                        ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference)
+                        : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
                 }
                 if (!resolved_1)
                     return undefined;
@@ -45252,8 +45296,16 @@ var ts;
         }
     }
     function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference) {
-        var _a;
         var candidate = ts.normalizePath(ts.combinePaths(nodeModulesDirectory, moduleName));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, /* rest */ undefined, /* packageDirectory */ undefined);
+    }
+    function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state, cache, redirectedReference) {
+        var candidate = ts.normalizePath(ts.combinePaths(packageDirectory, rest));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, /*moduleName*/ undefined, /*nodeModulesDirectory*/ undefined, /*nodeModulesDirectoryExists*/ true, state, cache, redirectedReference, candidate, rest, packageDirectory);
+    }
+    function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory) {
+        var _a;
+        var _b;
         // First look for a nested package.json, as in `node_modules/foo/bar/package.json`.
         var packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
         // But only if we're not respecting export maps (if we are, we might redirect around this location)
@@ -45280,15 +45332,18 @@ var ts;
             }
             return withPackageId(packageInfo, pathAndExtension);
         };
-        var _b = parsePackageName(moduleName), packageName = _b.packageName, rest = _b.rest;
-        var packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
+        var packageName;
+        if (rest === undefined)
+            (_a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest);
+        if (packageDirectory === undefined)
+            packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
         if (rest !== "") {
             // Previous `packageInfo` may have been from a nested package.json; ensure we have the one from the package root now.
             packageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state);
         }
         // package exports are higher priority than file/directory/typesVersions lookups and (and, if there's exports present, blocks them)
         if (packageInfo && packageInfo.contents.packageJsonContent.exports && state.features & NodeResolutionFeatures.Exports) {
-            return (_a = loadModuleFromExports(packageInfo, extensions, ts.combinePaths(".", rest), state, cache, redirectedReference)) === null || _a === void 0 ? void 0 : _a.value;
+            return (_b = loadModuleFromExports(packageInfo, extensions, ts.combinePaths(".", rest), state, cache, redirectedReference)) === null || _b === void 0 ? void 0 : _b.value;
         }
         if (rest !== "" && packageInfo && packageInfo.contents.versionPaths) {
             if (state.traceEnabled) {
@@ -45473,6 +45528,58 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    /**
+     * We only allow PnP to be used as a resolution strategy if TypeScript
+     * itself is executed under a PnP runtime (and we only allow it to access
+     * the current PnP runtime, not any on the disk). This ensures that we
+     * don't execute potentially malicious code that didn't already have a
+     * chance to be executed (if we're running within the runtime, it means
+     * that the runtime has already been executed).
+     * @internal
+     */
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi("".concat(path, "/"));
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, "".concat(containingDirectory, "/"), { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution).replace(/\/$/, "");
+        }
+        catch (_a) {
+            // Nothing to do
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    /* @internal */
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state, cache, redirectedReference)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? loadModuleFromPnpResolution(Extensions.DtsOnly, typePackageResolution, rest, state, cache, redirectedReference)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 /* @internal */
 var ts;
@@ -117894,6 +118001,8 @@ var ts;
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Partial"] = 1] = "Partial";
         /** Reload completely by re-reading contents of config file from disk and updating program */
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Full"] = 2] = "Full";
+        /** Reload the resolutions */
+        ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Resolutions"] = 3] = "Resolutions";
     })(ConfigFileProgramReloadLevel = ts.ConfigFileProgramReloadLevel || (ts.ConfigFileProgramReloadLevel = {}));
     /**
      * Updates the map of shared extended config file watches with a new set of extended config files from a base config file of the project
@@ -125281,6 +125390,30 @@ var ts;
                 return undefined;
             }
             var parts = ts.getNodeModulePathParts(path);
+            var packageName;
+            if (!parts && typeof process.versions.pnp !== "undefined") {
+                var findPnpApi = require("module").findPnpApi;
+                var pnpApi = findPnpApi(path);
+                var locator = pnpApi === null || pnpApi === void 0 ? void 0 : pnpApi.findPackageLocator(path);
+                // eslint-disable-next-line no-null/no-null
+                if (locator !== null && locator !== undefined) {
+                    var sourceLocator = pnpApi.findPackageLocator("".concat(sourceDirectory, "/"));
+                    // Don't use the package name when the imported file is inside
+                    // the source directory (prefer a relative path instead)
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        // The last character from packageLocation is the trailing "/", we want to point to it
+                        packageRootIndex: information.packageLocation.length - 1,
+                        fileNameIndex: path.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -125320,18 +125453,24 @@ var ts;
             if (isRedirect && !isPackageRootPath) {
                 return undefined;
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            // Get a path that's relative to node_modules or the importing file's path
-            // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            // If PnP is enabled the node_modules entries we'll get will always be relevant even if they
+            // are located in a weird path apparently outside of the source directory
+            if (typeof process.versions.pnp === "undefined") {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                // Get a path that's relative to node_modules or the importing file's path
+                // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
             // If the module was found in @types, get the actual Node package name
-            var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            var nodeModulesDirectoryName = typeof packageName !== "undefined"
+                ? packageName + moduleSpecifier.substring(parts.packageRootIndex)
+                : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
             // For classic resolution, only allow importing from node_modules/@types, not other node_modules
-            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var _a, _b;
                 var packageRootPath = path.substring(0, packageRootIndex);
@@ -126224,6 +126363,10 @@ var ts;
         if (configFileName) {
             configFileWatcher = watchFile(configFileName, scheduleProgramReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
         }
+        var pnpFileWatcher;
+        if (typeof process.versions.pnp !== "undefined") {
+            pnpFileWatcher = watchFile(require.resolve("pnpapi"), scheduleResolutionReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
+        }
         var compilerHost = ts.createCompilerHostFromProgramHost(host, function () { return compilerOptions; }, directoryStructureHost);
         ts.setGetSourceFileAsHashVersioned(compilerHost, host);
         // Members for CompilerHost
@@ -126310,6 +126453,10 @@ var ts;
                 configFileWatcher.close();
                 configFileWatcher = undefined;
             }
+            if (pnpFileWatcher) {
+                pnpFileWatcher.close();
+                pnpFileWatcher = undefined;
+            }
             extendedConfigCache === null || extendedConfigCache === void 0 ? void 0 : extendedConfigCache.clear();
             extendedConfigCache = undefined;
             if (sharedExtendedConfigFileWatchers) {
@@ -126342,7 +126489,8 @@ var ts;
         function getCurrentProgram() {
             return builderProgram && builderProgram.getProgramOrUndefined();
         }
-        function synchronizeProgram() {
+        function synchronizeProgram(forceAllFilesAsInvalidated) {
+            if (forceAllFilesAsInvalidated === void 0) { forceAllFilesAsInvalidated = false; }
             writeLog("Synchronizing program");
             clearInvalidateResolutionsOfFailedLookupLocations();
             var program = getCurrentBuilderProgram();
@@ -126352,7 +126500,7 @@ var ts;
                     resolutionCache.clear();
                 }
             }
-            var hasInvalidatedResolutions = resolutionCache.createHasInvalidatedResolutions(customHasInvalidatedResolutions);
+            var hasInvalidatedResolutions = resolutionCache.createHasInvalidatedResolutions(forceAllFilesAsInvalidated ? ts.returnTrue : customHasInvalidatedResolutions);
             var _a = ts.changeCompilerHostLikeToUseCache(compilerHost, toPath), originalReadFile = _a.originalReadFile, originalFileExists = _a.originalFileExists, originalDirectoryExists = _a.originalDirectoryExists, originalCreateDirectory = _a.originalCreateDirectory, originalWriteFile = _a.originalWriteFile;
             if (ts.isProgramUptoDate(getCurrentProgram(), rootFileNames, compilerOptions, getSourceVersion, function (fileName) { return compilerHost.fileExists(fileName); }, hasInvalidatedResolutions, hasChangedAutomaticTypeDirectiveNames, getParsedCommandLine, projectReferences)) {
                 if (hasChangedConfigFileParsingErrors) {
@@ -126566,6 +126714,12 @@ var ts;
             reloadLevel = ts.ConfigFileProgramReloadLevel.Full;
             scheduleProgramUpdate();
         }
+        function scheduleResolutionReload() {
+            writeLog("Clearing resolutions");
+            resolutionCache.clear();
+            reloadLevel = ts.ConfigFileProgramReloadLevel.Resolutions;
+            scheduleProgramUpdate();
+        }
         function updateProgramWithWatchStatus() {
             timerToUpdateProgram = undefined;
             reportFileChangeDetectedOnCreateProgram = true;
@@ -126581,6 +126735,10 @@ var ts;
                     ts.perfLogger.logStartUpdateProgram("FullConfigReload");
                     reloadConfigFile();
                     break;
+                case ts.ConfigFileProgramReloadLevel.Resolutions:
+                    ts.perfLogger.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+                    synchronizeProgram(/*forceAllFilesAsInvalidated*/ true);
+                    break;
                 default:
                     ts.perfLogger.logStartUpdateProgram("SynchronizeProgram");
                     synchronizeProgram();
@@ -132958,7 +133116,7 @@ var ts;
      * Don't include something from a `node_modules` that isn't actually reachable by a global import.
      * A relative import to node_modules is usually a bad idea.
      */
-    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+    function isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath) {
         // If it's in a `node_modules` but is not reachable from here via a global import, don't bother.
         var toNodeModules = ts.forEachAncestorDirectory(toPath, function (ancestor) { return ts.getBaseFileName(ancestor) === "node_modules" ? ancestor : undefined; });
         var toNodeModulesParent = toNodeModules && ts.getDirectoryPath(getCanonicalFileName(toNodeModules));
@@ -132966,6 +133124,33 @@ var ts;
             || ts.startsWith(getCanonicalFileName(fromPath), toNodeModulesParent)
             || (!!globalCachePath && ts.startsWith(getCanonicalFileName(globalCachePath), toNodeModulesParent));
     }
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi("".concat(path, "/"));
+    }
+    function isImportablePathPnp(fromPath, toPath) {
+        var pnpApi = getPnpApi(fromPath);
+        var fromLocator = pnpApi.findPackageLocator(fromPath);
+        var toLocator = pnpApi.findPackageLocator(toPath);
+        // eslint-disable-next-line no-null/no-null
+        if (toLocator === null) {
+            return false;
+        }
+        var fromInfo = pnpApi.getPackageInformation(fromLocator);
+        var toReference = fromInfo.packageDependencies.get(toLocator.name);
+        return toReference === toLocator.reference;
+    }
+    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+        if (getPnpApi(fromPath)) {
+            return isImportablePathPnp(fromPath, toPath);
+        }
+        else {
+            return isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath);
+        }
+    }
     function forEachExternalModuleToImportFrom(program, host, preferences, useAutoImportProvider, cb) {
         var _a, _b;
         var useCaseSensitiveFileNames = ts.hostUsesCaseSensitiveFileNames(host);
@@ -134877,6 +135062,7 @@ var ts;
              *          This includes all files that are found in node_modules/moduleName/ with acceptable file extensions
              */
             function getCompletionEntriesForNonRelativeModules(fragment, scriptPath, mode, compilerOptions, host, includeExtensionsOption, typeChecker) {
+                var _a, _b;
                 var baseUrl = compilerOptions.baseUrl, paths = compilerOptions.paths;
                 var result = createNameAndKindSet();
                 var extensionOptions = getExtensionOptions(compilerOptions, includeExtensionsOption);
@@ -134889,8 +135075,8 @@ var ts;
                     }
                 }
                 var fragmentDirectory = getFragmentDirectory(fragment);
-                for (var _i = 0, _a = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _a.length; _i++) {
-                    var ambientName = _a[_i];
+                for (var _i = 0, _c = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _c.length; _i++) {
+                    var ambientName = _c[_i];
                     result.add(nameAndKind(ambientName, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined));
                 }
                 getCompletionEntriesFromTypings(host, compilerOptions, scriptPath, fragmentDirectory, extensionOptions, result);
@@ -134899,8 +135085,8 @@ var ts;
                     // (But do if we didn't find anything, e.g. 'package.json' missing.)
                     var foundGlobal = false;
                     if (fragmentDirectory === undefined) {
-                        for (var _b = 0, _c = enumerateNodeModulesVisibleToScript(host, scriptPath); _b < _c.length; _b++) {
-                            var moduleName = _c[_b];
+                        for (var _d = 0, _e = enumerateNodeModulesVisibleToScript(host, scriptPath); _d < _e.length; _d++) {
+                            var moduleName = _e[_d];
                             var moduleResult = nameAndKind(moduleName, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined);
                             if (!result.has(moduleResult.name)) {
                                 foundGlobal = true;
@@ -134915,7 +135101,22 @@ var ts;
                                 getCompletionEntriesForDirectoryFragment(fragment, nodeModules, extensionOptions, host, /*exclude*/ undefined, result);
                             }
                         };
-                        if (fragmentDirectory && isEmitModuleResolutionRespectingExportMaps(compilerOptions)) {
+                        var checkExports_1 = function (packageFile, packageDirectory, fragmentSubpath) {
+                            var packageJson = ts.readJson(packageFile, host);
+                            var exports = packageJson.exports;
+                            if (exports) {
+                                if (typeof exports !== "object" || exports === null) { // eslint-disable-line no-null/no-null
+                                    return true; // null exports or entrypoint only, no sub-modules available
+                                }
+                                var keys = ts.getOwnKeys(exports);
+                                var conditions_1 = mode === ts.ModuleKind.ESNext ? ["node", "import", "types"] : ["node", "require", "types"];
+                                addCompletionEntriesFromPathsOrExports(result, fragmentSubpath, packageDirectory, extensionOptions, host, keys, function (key) { return ts.singleElementArray(getPatternFromFirstMatchingCondition(exports[key], conditions_1)); }, ts.comparePatternKeys);
+                                return true;
+                            }
+                            return false;
+                        };
+                        var shouldCheckExports = fragmentDirectory && isEmitModuleResolutionRespectingExportMaps(compilerOptions);
+                        if (shouldCheckExports) {
                             var nodeModulesDirectoryLookup_1 = ancestorLookup;
                             ancestorLookup = function (ancestor) {
                                 var components = ts.getPathComponents(fragment);
@@ -134934,23 +135135,46 @@ var ts;
                                 var packageDirectory = ts.combinePaths(ancestor, "node_modules", packagePath);
                                 var packageFile = ts.combinePaths(packageDirectory, "package.json");
                                 if (ts.tryFileExists(host, packageFile)) {
-                                    var packageJson = ts.readJson(packageFile, host);
-                                    var exports_1 = packageJson.exports;
-                                    if (exports_1) {
-                                        if (typeof exports_1 !== "object" || exports_1 === null) { // eslint-disable-line no-null/no-null
-                                            return; // null exports or entrypoint only, no sub-modules available
-                                        }
-                                        var keys = ts.getOwnKeys(exports_1);
-                                        var fragmentSubpath = components.join("/") + (components.length && ts.hasTrailingDirectorySeparator(fragment) ? "/" : "");
-                                        var conditions_1 = mode === ts.ModuleKind.ESNext ? ["node", "import", "types"] : ["node", "require", "types"];
-                                        addCompletionEntriesFromPathsOrExports(result, fragmentSubpath, packageDirectory, extensionOptions, host, keys, function (key) { return ts.singleElementArray(getPatternFromFirstMatchingCondition(exports_1[key], conditions_1)); }, ts.comparePatternKeys);
+                                    var fragmentSubpath = components.join("/") + (components.length && ts.hasTrailingDirectorySeparator(fragment) ? "/" : "");
+                                    if (checkExports_1(packageFile, packageDirectory, fragmentSubpath)) {
                                         return;
                                     }
                                 }
                                 return nodeModulesDirectoryLookup_1(ancestor);
                             };
                         }
-                        ts.forEachAncestorDirectory(scriptPath, ancestorLookup);
+                        var pnpapi = (_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath);
+                        if (pnpapi) {
+                            // Splits a require request into its components, or return null if the request is a file path
+                            var pathRegExp = /^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:@[^/]+\/)?[^/]+)\/*(.*|)$/;
+                            var dependencyNameMatch = fragment.match(pathRegExp);
+                            if (dependencyNameMatch) {
+                                var dependencyName = dependencyNameMatch[1], subPath = dependencyNameMatch[2];
+                                var unqualified = void 0;
+                                try {
+                                    unqualified = pnpapi.resolveToUnqualified(dependencyName, scriptPath, { considerBuiltins: false });
+                                }
+                                catch (_f) {
+                                    // It's fine if the resolution fails
+                                }
+                                if (unqualified) {
+                                    var packageDirectory = ts.normalizePath(unqualified);
+                                    var shouldGetCompletions = true;
+                                    if (shouldCheckExports) {
+                                        var packageFile = ts.combinePaths(packageDirectory, "package.json");
+                                        if (ts.tryFileExists(host, packageFile) && checkExports_1(packageFile, packageDirectory, subPath)) {
+                                            shouldGetCompletions = false;
+                                        }
+                                    }
+                                    if (shouldGetCompletions) {
+                                        getCompletionEntriesForDirectoryFragment(subPath, packageDirectory, extensionOptions, host, /*exclude*/ undefined, result);
+                                    }
+                                }
+                            }
+                        }
+                        else {
+                            ts.forEachAncestorDirectory(scriptPath, ancestorLookup);
+                        }
                     }
                 }
                 return ts.arrayFrom(result.values());
@@ -135081,6 +135305,7 @@ var ts;
                 return addReplacementSpans(toComplete, range.pos + prefix.length, ts.arrayFrom(names.values()));
             }
             function getCompletionEntriesFromTypings(host, options, scriptPath, fragmentDirectory, extensionOptions, result) {
+                var _a, _b;
                 if (result === void 0) { result = createNameAndKindSet(); }
                 // Check for typings specified in compiler options
                 var seen = new ts.Map();
@@ -135089,11 +135314,19 @@ var ts;
                     var root = typeRoots_1[_i];
                     getCompletionEntriesFromDirectories(root);
                 }
-                // Also get all @types typings installed in visible node_modules directories
-                for (var _a = 0, _b = ts.findPackageJsons(scriptPath, host); _a < _b.length; _a++) {
-                    var packageJson = _b[_a];
-                    var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
-                    getCompletionEntriesFromDirectories(typesDir);
+                if ((_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath)) {
+                    for (var _c = 0, _d = ts.getPnpTypeRoots(scriptPath); _c < _d.length; _c++) {
+                        var root = _d[_c];
+                        getCompletionEntriesFromDirectories(root);
+                    }
+                }
+                else {
+                    // Also get all @types typings installed in visible node_modules directories
+                    for (var _e = 0, _f = ts.findPackageJsons(scriptPath, host); _e < _f.length; _e++) {
+                        var packageJson = _f[_e];
+                        var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
+                        getCompletionEntriesFromDirectories(typesDir);
+                    }
                 }
                 return result;
                 function getCompletionEntriesFromDirectories(directory) {
@@ -166066,9 +166299,9 @@ var ts;
                 if (isTopLevelDeclarationStatement(statement) &&
                     !isExported(sourceFile, statement, useEs6Exports) &&
                     forEachTopLevelDeclaration(statement, function (d) { return needExport.has(ts.Debug.checkDefined(d.symbol)); })) {
-                    var exports = addExport(statement, useEs6Exports);
-                    if (exports)
-                        return exports;
+                    var exports_1 = addExport(statement, useEs6Exports);
+                    if (exports_1)
+                        return exports_1;
                 }
                 return statement;
             });
@@ -174812,6 +175045,40 @@ var ts;
                 return this.projectReferences;
             };
             ConfiguredProject.prototype.updateReferences = function (refs) {
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    // With Plug'n'Play, dependencies that list peer dependencies
+                    // are "virtualized": they are resolved to a unique (virtual)
+                    // path that the underlying filesystem layer then resolve back
+                    // to the original location.
+                    //
+                    // When a workspace depends on another workspace with peer
+                    // dependencies, this other workspace will thus be resolved to
+                    // a unique path that won't match what the initial project has
+                    // listed in its `references` field, and TS thus won't leverage
+                    // the reference at all.
+                    //
+                    // To avoid that, we compute here the virtualized paths for the
+                    // user-provided references in our references by directly querying
+                    // the PnP API. This way users don't have to know the virtual paths,
+                    // but we still support them just fine even through references.
+                    var basePath_1 = this.getCurrentDirectory();
+                    var findPnpApi_1 = require("module").findPnpApi;
+                    var getPnpPath_1 = function (path) {
+                        try {
+                            var pnpApi = findPnpApi_1("".concat(path, "/"));
+                            var targetLocator = pnpApi.findPackageLocator("".concat(path, "/"));
+                            var packageLocation = pnpApi.getPackageInformation(targetLocator).packageLocation;
+                            var request = ts.combinePaths(targetLocator.name, ts.getRelativePathFromDirectory(packageLocation, path, /*ignoreCase*/ false));
+                            return pnpApi.resolveToUnqualified(request, "".concat(basePath_1, "/"));
+                        }
+                        catch (_a) {
+                            // something went wrong with the resolution, try not to fail
+                            return path;
+                        }
+                    };
+                    refs = refs === null || refs === void 0 ? void 0 : refs.map(function (r) { return (__assign(__assign({}, r), { path: getPnpPath_1(r.path) })); });
+                }
                 this.projectReferences = refs;
                 this.potentialProjectReferences = undefined;
             };
@@ -175430,6 +175697,7 @@ var ts;
                         watchDirectory: ts.returnNoopFileWatcher,
                     } :
                     ts.getWatchFactory(this.host, watchLogLevel, log, getDetailWatchInfo);
+                this.pnpWatcher = this.watchPnpFile();
             }
             ProjectService.prototype.toPath = function (fileName) {
                 return ts.toPath(fileName, this.currentDirectory, this.toCanonicalFileName);
@@ -177287,7 +177555,7 @@ var ts;
             };
             ProjectService.prototype.setHostConfiguration = function (args) {
                 var _this = this;
-                var _a;
+                var _a, _b;
                 if (args.file) {
                     var info = this.getScriptInfoForNormalizedPath(server.toNormalizedPath(args.file));
                     if (info) {
@@ -177305,7 +177573,7 @@ var ts;
                         this.logger.info("Format host information updated");
                     }
                     if (args.preferences) {
-                        var _b = this.hostConfiguration.preferences, lazyConfiguredProjectsFromExternalProject = _b.lazyConfiguredProjectsFromExternalProject, includePackageJsonAutoImports = _b.includePackageJsonAutoImports;
+                        var _c = this.hostConfiguration.preferences, lazyConfiguredProjectsFromExternalProject = _c.lazyConfiguredProjectsFromExternalProject, includePackageJsonAutoImports = _c.includePackageJsonAutoImports;
                         this.hostConfiguration.preferences = __assign(__assign({}, this.hostConfiguration.preferences), args.preferences);
                         if (lazyConfiguredProjectsFromExternalProject && !this.hostConfiguration.preferences.lazyConfiguredProjectsFromExternalProject) {
                             // Load configured projects for external projects that are pending reload
@@ -177331,6 +177599,8 @@ var ts;
                     if (args.watchOptions) {
                         this.hostConfiguration.watchOptions = (_a = convertWatchOptions(args.watchOptions)) === null || _a === void 0 ? void 0 : _a.watchOptions;
                         this.logger.info("Host watch options changed to ".concat(JSON.stringify(this.hostConfiguration.watchOptions), ", it will be take effect for next watches."));
+                        (_b = this.pnpWatcher) === null || _b === void 0 ? void 0 : _b.close();
+                        this.watchPnpFile();
                     }
                 }
             };
@@ -178466,6 +178736,27 @@ var ts;
                 });
             };
             /*@internal*/
+            ProjectService.prototype.watchPnpFile = function () {
+                var _this = this;
+                if (typeof process.versions.pnp === "undefined") {
+                    return;
+                }
+                var findPnpApi = require("module").findPnpApi;
+                // eslint-disable-next-line no-null/no-null
+                var pnpFileName = findPnpApi(__filename).resolveRequest("pnpapi", /*issuer*/ null);
+                return this.watchFactory.watchFile(pnpFileName, function () {
+                    _this.forEachProject(function (project) {
+                        for (var _i = 0, _a = project.getScriptInfos(); _i < _a.length; _i++) {
+                            var info = _a[_i];
+                            project.resolutionCache.invalidateResolutionOfFile(info.path);
+                        }
+                        project.markAsDirty();
+                        updateProjectIfDirty(project);
+                    });
+                    _this.delayEnsureProjectForOpenFiles();
+                }, ts.PollingInterval.Low, this.hostConfiguration.watchOptions, ts.WatchType.ConfigFile);
+            };
+            /*@internal*/
             ProjectService.prototype.watchPackageJsonFile = function (path) {
                 var _this = this;
                 var watchers = this.packageJsonFilesMap || (this.packageJsonFilesMap = new ts.Map());
diff --git a/lib/typescript.js b/lib/typescript.js
index 947429a39..4a5480fe4 100644
semver exclusivity >=4.9.1-beta <4.9.2-rc
--- a/lib/typescript.js
+++ b/lib/typescript.js
@@ -7281,6 +7281,11 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                // The PnP runtime is always case-sensitive
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    return true;
+                }
                 // win32\win64 are case insensitive platforms
                 if (platform === "win32" || platform === "win64") {
                     return false;
@@ -43409,18 +43414,17 @@ var ts;
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
     /**
      * Returns the path to every node_modules/@types directory from some ancestor directory.
-     * Returns undefined if there are none.
      */
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
             // And if it doesn't exist, tough.
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
@@ -43431,6 +43435,42 @@ var ts;
         var useCaseSensitiveFileNames = typeof host.useCaseSensitiveFileNames === "function" ? host.useCaseSensitiveFileNames() : host.useCaseSensitiveFileNames;
         return ts.comparePaths(path1, path2, !useCaseSensitiveFileNames) === 0 /* Comparison.EqualTo */;
     }
+    /**
+     * @internal
+     */
+    function getPnpTypeRoots(currentDirectory) {
+        var pnpapi = getPnpApi(currentDirectory);
+        if (!pnpapi) {
+            return [];
+        }
+        // Some TS consumers pass relative paths that aren't normalized
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var currentPackage = pnpapi.findPackageLocator("".concat(currentDirectory, "/"));
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            // eslint-disable-next-line no-null/no-null
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    ts.getPnpTypeRoots = getPnpTypeRoots;
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArray(__spreadArray([], nmTypes, true), pnpTypes, true);
+        }
+    }
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
@@ -43572,7 +43612,9 @@ var ts;
                 }
                 var result_4;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
+                    var searchResult = getPnpApi(initialLocationForSecondaryLookup)
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
                     result_4 = searchResult && searchResult.value;
                 }
                 else {
@@ -44297,7 +44339,9 @@ var ts;
                     if (traceEnabled) {
                         trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                     }
-                    resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                    resolved_1 = getPnpApi(containingDirectory)
+                        ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference)
+                        : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
                 }
                 if (!resolved_1)
                     return undefined;
@@ -45243,8 +45287,16 @@ var ts;
         }
     }
     function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference) {
-        var _a;
         var candidate = ts.normalizePath(ts.combinePaths(nodeModulesDirectory, moduleName));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, /* rest */ undefined, /* packageDirectory */ undefined);
+    }
+    function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state, cache, redirectedReference) {
+        var candidate = ts.normalizePath(ts.combinePaths(packageDirectory, rest));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, /*moduleName*/ undefined, /*nodeModulesDirectory*/ undefined, /*nodeModulesDirectoryExists*/ true, state, cache, redirectedReference, candidate, rest, packageDirectory);
+    }
+    function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory) {
+        var _a;
+        var _b;
         // First look for a nested package.json, as in `node_modules/foo/bar/package.json`.
         var packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
         // But only if we're not respecting export maps (if we are, we might redirect around this location)
@@ -45271,15 +45323,18 @@ var ts;
             }
             return withPackageId(packageInfo, pathAndExtension);
         };
-        var _b = parsePackageName(moduleName), packageName = _b.packageName, rest = _b.rest;
-        var packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
+        var packageName;
+        if (rest === undefined)
+            (_a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest);
+        if (packageDirectory === undefined)
+            packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
         if (rest !== "") {
             // Previous `packageInfo` may have been from a nested package.json; ensure we have the one from the package root now.
             packageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state);
         }
         // package exports are higher priority than file/directory/typesVersions lookups and (and, if there's exports present, blocks them)
         if (packageInfo && packageInfo.contents.packageJsonContent.exports && state.features & NodeResolutionFeatures.Exports) {
-            return (_a = loadModuleFromExports(packageInfo, extensions, ts.combinePaths(".", rest), state, cache, redirectedReference)) === null || _a === void 0 ? void 0 : _a.value;
+            return (_b = loadModuleFromExports(packageInfo, extensions, ts.combinePaths(".", rest), state, cache, redirectedReference)) === null || _b === void 0 ? void 0 : _b.value;
         }
         if (rest !== "" && packageInfo && packageInfo.contents.versionPaths) {
             if (state.traceEnabled) {
@@ -45464,6 +45519,58 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    /**
+     * We only allow PnP to be used as a resolution strategy if TypeScript
+     * itself is executed under a PnP runtime (and we only allow it to access
+     * the current PnP runtime, not any on the disk). This ensures that we
+     * don't execute potentially malicious code that didn't already have a
+     * chance to be executed (if we're running within the runtime, it means
+     * that the runtime has already been executed).
+     * @internal
+     */
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi("".concat(path, "/"));
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, "".concat(containingDirectory, "/"), { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution).replace(/\/$/, "");
+        }
+        catch (_a) {
+            // Nothing to do
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    /* @internal */
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state, cache, redirectedReference)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? loadModuleFromPnpResolution(Extensions.DtsOnly, typePackageResolution, rest, state, cache, redirectedReference)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 /* @internal */
 var ts;
@@ -117885,6 +117992,8 @@ var ts;
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Partial"] = 1] = "Partial";
         /** Reload completely by re-reading contents of config file from disk and updating program */
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Full"] = 2] = "Full";
+        /** Reload the resolutions */
+        ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Resolutions"] = 3] = "Resolutions";
     })(ConfigFileProgramReloadLevel = ts.ConfigFileProgramReloadLevel || (ts.ConfigFileProgramReloadLevel = {}));
     /**
      * Updates the map of shared extended config file watches with a new set of extended config files from a base config file of the project
@@ -125272,6 +125381,30 @@ var ts;
                 return undefined;
             }
             var parts = ts.getNodeModulePathParts(path);
+            var packageName;
+            if (!parts && typeof process.versions.pnp !== "undefined") {
+                var findPnpApi = require("module").findPnpApi;
+                var pnpApi = findPnpApi(path);
+                var locator = pnpApi === null || pnpApi === void 0 ? void 0 : pnpApi.findPackageLocator(path);
+                // eslint-disable-next-line no-null/no-null
+                if (locator !== null && locator !== undefined) {
+                    var sourceLocator = pnpApi.findPackageLocator("".concat(sourceDirectory, "/"));
+                    // Don't use the package name when the imported file is inside
+                    // the source directory (prefer a relative path instead)
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        // The last character from packageLocation is the trailing "/", we want to point to it
+                        packageRootIndex: information.packageLocation.length - 1,
+                        fileNameIndex: path.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -125311,18 +125444,24 @@ var ts;
             if (isRedirect && !isPackageRootPath) {
                 return undefined;
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            // Get a path that's relative to node_modules or the importing file's path
-            // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            // If PnP is enabled the node_modules entries we'll get will always be relevant even if they
+            // are located in a weird path apparently outside of the source directory
+            if (typeof process.versions.pnp === "undefined") {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                // Get a path that's relative to node_modules or the importing file's path
+                // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
             // If the module was found in @types, get the actual Node package name
-            var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            var nodeModulesDirectoryName = typeof packageName !== "undefined"
+                ? packageName + moduleSpecifier.substring(parts.packageRootIndex)
+                : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
             // For classic resolution, only allow importing from node_modules/@types, not other node_modules
-            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var _a, _b;
                 var packageRootPath = path.substring(0, packageRootIndex);
@@ -126215,6 +126354,10 @@ var ts;
         if (configFileName) {
             configFileWatcher = watchFile(configFileName, scheduleProgramReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
         }
+        var pnpFileWatcher;
+        if (typeof process.versions.pnp !== "undefined") {
+            pnpFileWatcher = watchFile(require.resolve("pnpapi"), scheduleResolutionReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
+        }
         var compilerHost = ts.createCompilerHostFromProgramHost(host, function () { return compilerOptions; }, directoryStructureHost);
         ts.setGetSourceFileAsHashVersioned(compilerHost, host);
         // Members for CompilerHost
@@ -126301,6 +126444,10 @@ var ts;
                 configFileWatcher.close();
                 configFileWatcher = undefined;
             }
+            if (pnpFileWatcher) {
+                pnpFileWatcher.close();
+                pnpFileWatcher = undefined;
+            }
             extendedConfigCache === null || extendedConfigCache === void 0 ? void 0 : extendedConfigCache.clear();
             extendedConfigCache = undefined;
             if (sharedExtendedConfigFileWatchers) {
@@ -126333,7 +126480,8 @@ var ts;
         function getCurrentProgram() {
             return builderProgram && builderProgram.getProgramOrUndefined();
         }
-        function synchronizeProgram() {
+        function synchronizeProgram(forceAllFilesAsInvalidated) {
+            if (forceAllFilesAsInvalidated === void 0) { forceAllFilesAsInvalidated = false; }
             writeLog("Synchronizing program");
             clearInvalidateResolutionsOfFailedLookupLocations();
             var program = getCurrentBuilderProgram();
@@ -126343,7 +126491,7 @@ var ts;
                     resolutionCache.clear();
                 }
             }
-            var hasInvalidatedResolutions = resolutionCache.createHasInvalidatedResolutions(customHasInvalidatedResolutions);
+            var hasInvalidatedResolutions = resolutionCache.createHasInvalidatedResolutions(forceAllFilesAsInvalidated ? ts.returnTrue : customHasInvalidatedResolutions);
             var _a = ts.changeCompilerHostLikeToUseCache(compilerHost, toPath), originalReadFile = _a.originalReadFile, originalFileExists = _a.originalFileExists, originalDirectoryExists = _a.originalDirectoryExists, originalCreateDirectory = _a.originalCreateDirectory, originalWriteFile = _a.originalWriteFile;
             if (ts.isProgramUptoDate(getCurrentProgram(), rootFileNames, compilerOptions, getSourceVersion, function (fileName) { return compilerHost.fileExists(fileName); }, hasInvalidatedResolutions, hasChangedAutomaticTypeDirectiveNames, getParsedCommandLine, projectReferences)) {
                 if (hasChangedConfigFileParsingErrors) {
@@ -126557,6 +126705,12 @@ var ts;
             reloadLevel = ts.ConfigFileProgramReloadLevel.Full;
             scheduleProgramUpdate();
         }
+        function scheduleResolutionReload() {
+            writeLog("Clearing resolutions");
+            resolutionCache.clear();
+            reloadLevel = ts.ConfigFileProgramReloadLevel.Resolutions;
+            scheduleProgramUpdate();
+        }
         function updateProgramWithWatchStatus() {
             timerToUpdateProgram = undefined;
             reportFileChangeDetectedOnCreateProgram = true;
@@ -126572,6 +126726,10 @@ var ts;
                     ts.perfLogger.logStartUpdateProgram("FullConfigReload");
                     reloadConfigFile();
                     break;
+                case ts.ConfigFileProgramReloadLevel.Resolutions:
+                    ts.perfLogger.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+                    synchronizeProgram(/*forceAllFilesAsInvalidated*/ true);
+                    break;
                 default:
                     ts.perfLogger.logStartUpdateProgram("SynchronizeProgram");
                     synchronizeProgram();
@@ -132949,7 +133107,7 @@ var ts;
      * Don't include something from a `node_modules` that isn't actually reachable by a global import.
      * A relative import to node_modules is usually a bad idea.
      */
-    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+    function isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath) {
         // If it's in a `node_modules` but is not reachable from here via a global import, don't bother.
         var toNodeModules = ts.forEachAncestorDirectory(toPath, function (ancestor) { return ts.getBaseFileName(ancestor) === "node_modules" ? ancestor : undefined; });
         var toNodeModulesParent = toNodeModules && ts.getDirectoryPath(getCanonicalFileName(toNodeModules));
@@ -132957,6 +133115,33 @@ var ts;
             || ts.startsWith(getCanonicalFileName(fromPath), toNodeModulesParent)
             || (!!globalCachePath && ts.startsWith(getCanonicalFileName(globalCachePath), toNodeModulesParent));
     }
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi("".concat(path, "/"));
+    }
+    function isImportablePathPnp(fromPath, toPath) {
+        var pnpApi = getPnpApi(fromPath);
+        var fromLocator = pnpApi.findPackageLocator(fromPath);
+        var toLocator = pnpApi.findPackageLocator(toPath);
+        // eslint-disable-next-line no-null/no-null
+        if (toLocator === null) {
+            return false;
+        }
+        var fromInfo = pnpApi.getPackageInformation(fromLocator);
+        var toReference = fromInfo.packageDependencies.get(toLocator.name);
+        return toReference === toLocator.reference;
+    }
+    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+        if (getPnpApi(fromPath)) {
+            return isImportablePathPnp(fromPath, toPath);
+        }
+        else {
+            return isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath);
+        }
+    }
     function forEachExternalModuleToImportFrom(program, host, preferences, useAutoImportProvider, cb) {
         var _a, _b;
         var useCaseSensitiveFileNames = ts.hostUsesCaseSensitiveFileNames(host);
@@ -134868,6 +135053,7 @@ var ts;
              *          This includes all files that are found in node_modules/moduleName/ with acceptable file extensions
              */
             function getCompletionEntriesForNonRelativeModules(fragment, scriptPath, mode, compilerOptions, host, includeExtensionsOption, typeChecker) {
+                var _a, _b;
                 var baseUrl = compilerOptions.baseUrl, paths = compilerOptions.paths;
                 var result = createNameAndKindSet();
                 var extensionOptions = getExtensionOptions(compilerOptions, includeExtensionsOption);
@@ -134880,8 +135066,8 @@ var ts;
                     }
                 }
                 var fragmentDirectory = getFragmentDirectory(fragment);
-                for (var _i = 0, _a = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _a.length; _i++) {
-                    var ambientName = _a[_i];
+                for (var _i = 0, _c = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _c.length; _i++) {
+                    var ambientName = _c[_i];
                     result.add(nameAndKind(ambientName, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined));
                 }
                 getCompletionEntriesFromTypings(host, compilerOptions, scriptPath, fragmentDirectory, extensionOptions, result);
@@ -134890,8 +135076,8 @@ var ts;
                     // (But do if we didn't find anything, e.g. 'package.json' missing.)
                     var foundGlobal = false;
                     if (fragmentDirectory === undefined) {
-                        for (var _b = 0, _c = enumerateNodeModulesVisibleToScript(host, scriptPath); _b < _c.length; _b++) {
-                            var moduleName = _c[_b];
+                        for (var _d = 0, _e = enumerateNodeModulesVisibleToScript(host, scriptPath); _d < _e.length; _d++) {
+                            var moduleName = _e[_d];
                             var moduleResult = nameAndKind(moduleName, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined);
                             if (!result.has(moduleResult.name)) {
                                 foundGlobal = true;
@@ -134906,7 +135092,22 @@ var ts;
                                 getCompletionEntriesForDirectoryFragment(fragment, nodeModules, extensionOptions, host, /*exclude*/ undefined, result);
                             }
                         };
-                        if (fragmentDirectory && isEmitModuleResolutionRespectingExportMaps(compilerOptions)) {
+                        var checkExports_1 = function (packageFile, packageDirectory, fragmentSubpath) {
+                            var packageJson = ts.readJson(packageFile, host);
+                            var exports = packageJson.exports;
+                            if (exports) {
+                                if (typeof exports !== "object" || exports === null) { // eslint-disable-line no-null/no-null
+                                    return true; // null exports or entrypoint only, no sub-modules available
+                                }
+                                var keys = ts.getOwnKeys(exports);
+                                var conditions_1 = mode === ts.ModuleKind.ESNext ? ["node", "import", "types"] : ["node", "require", "types"];
+                                addCompletionEntriesFromPathsOrExports(result, fragmentSubpath, packageDirectory, extensionOptions, host, keys, function (key) { return ts.singleElementArray(getPatternFromFirstMatchingCondition(exports[key], conditions_1)); }, ts.comparePatternKeys);
+                                return true;
+                            }
+                            return false;
+                        };
+                        var shouldCheckExports = fragmentDirectory && isEmitModuleResolutionRespectingExportMaps(compilerOptions);
+                        if (shouldCheckExports) {
                             var nodeModulesDirectoryLookup_1 = ancestorLookup;
                             ancestorLookup = function (ancestor) {
                                 var components = ts.getPathComponents(fragment);
@@ -134925,23 +135126,46 @@ var ts;
                                 var packageDirectory = ts.combinePaths(ancestor, "node_modules", packagePath);
                                 var packageFile = ts.combinePaths(packageDirectory, "package.json");
                                 if (ts.tryFileExists(host, packageFile)) {
-                                    var packageJson = ts.readJson(packageFile, host);
-                                    var exports_1 = packageJson.exports;
-                                    if (exports_1) {
-                                        if (typeof exports_1 !== "object" || exports_1 === null) { // eslint-disable-line no-null/no-null
-                                            return; // null exports or entrypoint only, no sub-modules available
-                                        }
-                                        var keys = ts.getOwnKeys(exports_1);
-                                        var fragmentSubpath = components.join("/") + (components.length && ts.hasTrailingDirectorySeparator(fragment) ? "/" : "");
-                                        var conditions_1 = mode === ts.ModuleKind.ESNext ? ["node", "import", "types"] : ["node", "require", "types"];
-                                        addCompletionEntriesFromPathsOrExports(result, fragmentSubpath, packageDirectory, extensionOptions, host, keys, function (key) { return ts.singleElementArray(getPatternFromFirstMatchingCondition(exports_1[key], conditions_1)); }, ts.comparePatternKeys);
+                                    var fragmentSubpath = components.join("/") + (components.length && ts.hasTrailingDirectorySeparator(fragment) ? "/" : "");
+                                    if (checkExports_1(packageFile, packageDirectory, fragmentSubpath)) {
                                         return;
                                     }
                                 }
                                 return nodeModulesDirectoryLookup_1(ancestor);
                             };
                         }
-                        ts.forEachAncestorDirectory(scriptPath, ancestorLookup);
+                        var pnpapi = (_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath);
+                        if (pnpapi) {
+                            // Splits a require request into its components, or return null if the request is a file path
+                            var pathRegExp = /^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:@[^/]+\/)?[^/]+)\/*(.*|)$/;
+                            var dependencyNameMatch = fragment.match(pathRegExp);
+                            if (dependencyNameMatch) {
+                                var dependencyName = dependencyNameMatch[1], subPath = dependencyNameMatch[2];
+                                var unqualified = void 0;
+                                try {
+                                    unqualified = pnpapi.resolveToUnqualified(dependencyName, scriptPath, { considerBuiltins: false });
+                                }
+                                catch (_f) {
+                                    // It's fine if the resolution fails
+                                }
+                                if (unqualified) {
+                                    var packageDirectory = ts.normalizePath(unqualified);
+                                    var shouldGetCompletions = true;
+                                    if (shouldCheckExports) {
+                                        var packageFile = ts.combinePaths(packageDirectory, "package.json");
+                                        if (ts.tryFileExists(host, packageFile) && checkExports_1(packageFile, packageDirectory, subPath)) {
+                                            shouldGetCompletions = false;
+                                        }
+                                    }
+                                    if (shouldGetCompletions) {
+                                        getCompletionEntriesForDirectoryFragment(subPath, packageDirectory, extensionOptions, host, /*exclude*/ undefined, result);
+                                    }
+                                }
+                            }
+                        }
+                        else {
+                            ts.forEachAncestorDirectory(scriptPath, ancestorLookup);
+                        }
                     }
                 }
                 return ts.arrayFrom(result.values());
@@ -135072,6 +135296,7 @@ var ts;
                 return addReplacementSpans(toComplete, range.pos + prefix.length, ts.arrayFrom(names.values()));
             }
             function getCompletionEntriesFromTypings(host, options, scriptPath, fragmentDirectory, extensionOptions, result) {
+                var _a, _b;
                 if (result === void 0) { result = createNameAndKindSet(); }
                 // Check for typings specified in compiler options
                 var seen = new ts.Map();
@@ -135080,11 +135305,19 @@ var ts;
                     var root = typeRoots_1[_i];
                     getCompletionEntriesFromDirectories(root);
                 }
-                // Also get all @types typings installed in visible node_modules directories
-                for (var _a = 0, _b = ts.findPackageJsons(scriptPath, host); _a < _b.length; _a++) {
-                    var packageJson = _b[_a];
-                    var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
-                    getCompletionEntriesFromDirectories(typesDir);
+                if ((_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath)) {
+                    for (var _c = 0, _d = ts.getPnpTypeRoots(scriptPath); _c < _d.length; _c++) {
+                        var root = _d[_c];
+                        getCompletionEntriesFromDirectories(root);
+                    }
+                }
+                else {
+                    // Also get all @types typings installed in visible node_modules directories
+                    for (var _e = 0, _f = ts.findPackageJsons(scriptPath, host); _e < _f.length; _e++) {
+                        var packageJson = _f[_e];
+                        var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
+                        getCompletionEntriesFromDirectories(typesDir);
+                    }
                 }
                 return result;
                 function getCompletionEntriesFromDirectories(directory) {
@@ -166057,9 +166290,9 @@ var ts;
                 if (isTopLevelDeclarationStatement(statement) &&
                     !isExported(sourceFile, statement, useEs6Exports) &&
                     forEachTopLevelDeclaration(statement, function (d) { return needExport.has(ts.Debug.checkDefined(d.symbol)); })) {
-                    var exports = addExport(statement, useEs6Exports);
-                    if (exports)
-                        return exports;
+                    var exports_1 = addExport(statement, useEs6Exports);
+                    if (exports_1)
+                        return exports_1;
                 }
                 return statement;
             });
diff --git a/lib/typescriptServices.js b/lib/typescriptServices.js
index 0b6841d28..e3d34fdbd 100644
semver exclusivity >=4.9.1-beta <4.9.2-rc
--- a/lib/typescriptServices.js
+++ b/lib/typescriptServices.js
@@ -7281,6 +7281,11 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                // The PnP runtime is always case-sensitive
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    return true;
+                }
                 // win32\win64 are case insensitive platforms
                 if (platform === "win32" || platform === "win64") {
                     return false;
@@ -43409,18 +43414,17 @@ var ts;
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
     /**
      * Returns the path to every node_modules/@types directory from some ancestor directory.
-     * Returns undefined if there are none.
      */
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
             // And if it doesn't exist, tough.
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
@@ -43431,6 +43435,42 @@ var ts;
         var useCaseSensitiveFileNames = typeof host.useCaseSensitiveFileNames === "function" ? host.useCaseSensitiveFileNames() : host.useCaseSensitiveFileNames;
         return ts.comparePaths(path1, path2, !useCaseSensitiveFileNames) === 0 /* Comparison.EqualTo */;
     }
+    /**
+     * @internal
+     */
+    function getPnpTypeRoots(currentDirectory) {
+        var pnpapi = getPnpApi(currentDirectory);
+        if (!pnpapi) {
+            return [];
+        }
+        // Some TS consumers pass relative paths that aren't normalized
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var currentPackage = pnpapi.findPackageLocator("".concat(currentDirectory, "/"));
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            // eslint-disable-next-line no-null/no-null
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    ts.getPnpTypeRoots = getPnpTypeRoots;
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArray(__spreadArray([], nmTypes, true), pnpTypes, true);
+        }
+    }
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
@@ -43572,7 +43612,9 @@ var ts;
                 }
                 var result_4;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
+                    var searchResult = getPnpApi(initialLocationForSecondaryLookup)
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
                     result_4 = searchResult && searchResult.value;
                 }
                 else {
@@ -44297,7 +44339,9 @@ var ts;
                     if (traceEnabled) {
                         trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                     }
-                    resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                    resolved_1 = getPnpApi(containingDirectory)
+                        ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference)
+                        : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
                 }
                 if (!resolved_1)
                     return undefined;
@@ -45243,8 +45287,16 @@ var ts;
         }
     }
     function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference) {
-        var _a;
         var candidate = ts.normalizePath(ts.combinePaths(nodeModulesDirectory, moduleName));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, /* rest */ undefined, /* packageDirectory */ undefined);
+    }
+    function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state, cache, redirectedReference) {
+        var candidate = ts.normalizePath(ts.combinePaths(packageDirectory, rest));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, /*moduleName*/ undefined, /*nodeModulesDirectory*/ undefined, /*nodeModulesDirectoryExists*/ true, state, cache, redirectedReference, candidate, rest, packageDirectory);
+    }
+    function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory) {
+        var _a;
+        var _b;
         // First look for a nested package.json, as in `node_modules/foo/bar/package.json`.
         var packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
         // But only if we're not respecting export maps (if we are, we might redirect around this location)
@@ -45271,15 +45323,18 @@ var ts;
             }
             return withPackageId(packageInfo, pathAndExtension);
         };
-        var _b = parsePackageName(moduleName), packageName = _b.packageName, rest = _b.rest;
-        var packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
+        var packageName;
+        if (rest === undefined)
+            (_a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest);
+        if (packageDirectory === undefined)
+            packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
         if (rest !== "") {
             // Previous `packageInfo` may have been from a nested package.json; ensure we have the one from the package root now.
             packageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state);
         }
         // package exports are higher priority than file/directory/typesVersions lookups and (and, if there's exports present, blocks them)
         if (packageInfo && packageInfo.contents.packageJsonContent.exports && state.features & NodeResolutionFeatures.Exports) {
-            return (_a = loadModuleFromExports(packageInfo, extensions, ts.combinePaths(".", rest), state, cache, redirectedReference)) === null || _a === void 0 ? void 0 : _a.value;
+            return (_b = loadModuleFromExports(packageInfo, extensions, ts.combinePaths(".", rest), state, cache, redirectedReference)) === null || _b === void 0 ? void 0 : _b.value;
         }
         if (rest !== "" && packageInfo && packageInfo.contents.versionPaths) {
             if (state.traceEnabled) {
@@ -45464,6 +45519,58 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    /**
+     * We only allow PnP to be used as a resolution strategy if TypeScript
+     * itself is executed under a PnP runtime (and we only allow it to access
+     * the current PnP runtime, not any on the disk). This ensures that we
+     * don't execute potentially malicious code that didn't already have a
+     * chance to be executed (if we're running within the runtime, it means
+     * that the runtime has already been executed).
+     * @internal
+     */
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi("".concat(path, "/"));
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, "".concat(containingDirectory, "/"), { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution).replace(/\/$/, "");
+        }
+        catch (_a) {
+            // Nothing to do
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    /* @internal */
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state, cache, redirectedReference)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? loadModuleFromPnpResolution(Extensions.DtsOnly, typePackageResolution, rest, state, cache, redirectedReference)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 /* @internal */
 var ts;
@@ -117885,6 +117992,8 @@ var ts;
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Partial"] = 1] = "Partial";
         /** Reload completely by re-reading contents of config file from disk and updating program */
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Full"] = 2] = "Full";
+        /** Reload the resolutions */
+        ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Resolutions"] = 3] = "Resolutions";
     })(ConfigFileProgramReloadLevel = ts.ConfigFileProgramReloadLevel || (ts.ConfigFileProgramReloadLevel = {}));
     /**
      * Updates the map of shared extended config file watches with a new set of extended config files from a base config file of the project
@@ -125272,6 +125381,30 @@ var ts;
                 return undefined;
             }
             var parts = ts.getNodeModulePathParts(path);
+            var packageName;
+            if (!parts && typeof process.versions.pnp !== "undefined") {
+                var findPnpApi = require("module").findPnpApi;
+                var pnpApi = findPnpApi(path);
+                var locator = pnpApi === null || pnpApi === void 0 ? void 0 : pnpApi.findPackageLocator(path);
+                // eslint-disable-next-line no-null/no-null
+                if (locator !== null && locator !== undefined) {
+                    var sourceLocator = pnpApi.findPackageLocator("".concat(sourceDirectory, "/"));
+                    // Don't use the package name when the imported file is inside
+                    // the source directory (prefer a relative path instead)
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        // The last character from packageLocation is the trailing "/", we want to point to it
+                        packageRootIndex: information.packageLocation.length - 1,
+                        fileNameIndex: path.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -125311,18 +125444,24 @@ var ts;
             if (isRedirect && !isPackageRootPath) {
                 return undefined;
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            // Get a path that's relative to node_modules or the importing file's path
-            // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            // If PnP is enabled the node_modules entries we'll get will always be relevant even if they
+            // are located in a weird path apparently outside of the source directory
+            if (typeof process.versions.pnp === "undefined") {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                // Get a path that's relative to node_modules or the importing file's path
+                // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
             // If the module was found in @types, get the actual Node package name
-            var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            var nodeModulesDirectoryName = typeof packageName !== "undefined"
+                ? packageName + moduleSpecifier.substring(parts.packageRootIndex)
+                : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
             // For classic resolution, only allow importing from node_modules/@types, not other node_modules
-            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var _a, _b;
                 var packageRootPath = path.substring(0, packageRootIndex);
@@ -126215,6 +126354,10 @@ var ts;
         if (configFileName) {
             configFileWatcher = watchFile(configFileName, scheduleProgramReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
         }
+        var pnpFileWatcher;
+        if (typeof process.versions.pnp !== "undefined") {
+            pnpFileWatcher = watchFile(require.resolve("pnpapi"), scheduleResolutionReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
+        }
         var compilerHost = ts.createCompilerHostFromProgramHost(host, function () { return compilerOptions; }, directoryStructureHost);
         ts.setGetSourceFileAsHashVersioned(compilerHost, host);
         // Members for CompilerHost
@@ -126301,6 +126444,10 @@ var ts;
                 configFileWatcher.close();
                 configFileWatcher = undefined;
             }
+            if (pnpFileWatcher) {
+                pnpFileWatcher.close();
+                pnpFileWatcher = undefined;
+            }
             extendedConfigCache === null || extendedConfigCache === void 0 ? void 0 : extendedConfigCache.clear();
             extendedConfigCache = undefined;
             if (sharedExtendedConfigFileWatchers) {
@@ -126333,7 +126480,8 @@ var ts;
         function getCurrentProgram() {
             return builderProgram && builderProgram.getProgramOrUndefined();
         }
-        function synchronizeProgram() {
+        function synchronizeProgram(forceAllFilesAsInvalidated) {
+            if (forceAllFilesAsInvalidated === void 0) { forceAllFilesAsInvalidated = false; }
             writeLog("Synchronizing program");
             clearInvalidateResolutionsOfFailedLookupLocations();
             var program = getCurrentBuilderProgram();
@@ -126343,7 +126491,7 @@ var ts;
                     resolutionCache.clear();
                 }
             }
-            var hasInvalidatedResolutions = resolutionCache.createHasInvalidatedResolutions(customHasInvalidatedResolutions);
+            var hasInvalidatedResolutions = resolutionCache.createHasInvalidatedResolutions(forceAllFilesAsInvalidated ? ts.returnTrue : customHasInvalidatedResolutions);
             var _a = ts.changeCompilerHostLikeToUseCache(compilerHost, toPath), originalReadFile = _a.originalReadFile, originalFileExists = _a.originalFileExists, originalDirectoryExists = _a.originalDirectoryExists, originalCreateDirectory = _a.originalCreateDirectory, originalWriteFile = _a.originalWriteFile;
             if (ts.isProgramUptoDate(getCurrentProgram(), rootFileNames, compilerOptions, getSourceVersion, function (fileName) { return compilerHost.fileExists(fileName); }, hasInvalidatedResolutions, hasChangedAutomaticTypeDirectiveNames, getParsedCommandLine, projectReferences)) {
                 if (hasChangedConfigFileParsingErrors) {
@@ -126557,6 +126705,12 @@ var ts;
             reloadLevel = ts.ConfigFileProgramReloadLevel.Full;
             scheduleProgramUpdate();
         }
+        function scheduleResolutionReload() {
+            writeLog("Clearing resolutions");
+            resolutionCache.clear();
+            reloadLevel = ts.ConfigFileProgramReloadLevel.Resolutions;
+            scheduleProgramUpdate();
+        }
         function updateProgramWithWatchStatus() {
             timerToUpdateProgram = undefined;
             reportFileChangeDetectedOnCreateProgram = true;
@@ -126572,6 +126726,10 @@ var ts;
                     ts.perfLogger.logStartUpdateProgram("FullConfigReload");
                     reloadConfigFile();
                     break;
+                case ts.ConfigFileProgramReloadLevel.Resolutions:
+                    ts.perfLogger.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+                    synchronizeProgram(/*forceAllFilesAsInvalidated*/ true);
+                    break;
                 default:
                     ts.perfLogger.logStartUpdateProgram("SynchronizeProgram");
                     synchronizeProgram();
@@ -132949,7 +133107,7 @@ var ts;
      * Don't include something from a `node_modules` that isn't actually reachable by a global import.
      * A relative import to node_modules is usually a bad idea.
      */
-    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+    function isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath) {
         // If it's in a `node_modules` but is not reachable from here via a global import, don't bother.
         var toNodeModules = ts.forEachAncestorDirectory(toPath, function (ancestor) { return ts.getBaseFileName(ancestor) === "node_modules" ? ancestor : undefined; });
         var toNodeModulesParent = toNodeModules && ts.getDirectoryPath(getCanonicalFileName(toNodeModules));
@@ -132957,6 +133115,33 @@ var ts;
             || ts.startsWith(getCanonicalFileName(fromPath), toNodeModulesParent)
             || (!!globalCachePath && ts.startsWith(getCanonicalFileName(globalCachePath), toNodeModulesParent));
     }
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi("".concat(path, "/"));
+    }
+    function isImportablePathPnp(fromPath, toPath) {
+        var pnpApi = getPnpApi(fromPath);
+        var fromLocator = pnpApi.findPackageLocator(fromPath);
+        var toLocator = pnpApi.findPackageLocator(toPath);
+        // eslint-disable-next-line no-null/no-null
+        if (toLocator === null) {
+            return false;
+        }
+        var fromInfo = pnpApi.getPackageInformation(fromLocator);
+        var toReference = fromInfo.packageDependencies.get(toLocator.name);
+        return toReference === toLocator.reference;
+    }
+    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+        if (getPnpApi(fromPath)) {
+            return isImportablePathPnp(fromPath, toPath);
+        }
+        else {
+            return isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath);
+        }
+    }
     function forEachExternalModuleToImportFrom(program, host, preferences, useAutoImportProvider, cb) {
         var _a, _b;
         var useCaseSensitiveFileNames = ts.hostUsesCaseSensitiveFileNames(host);
@@ -134868,6 +135053,7 @@ var ts;
              *          This includes all files that are found in node_modules/moduleName/ with acceptable file extensions
              */
             function getCompletionEntriesForNonRelativeModules(fragment, scriptPath, mode, compilerOptions, host, includeExtensionsOption, typeChecker) {
+                var _a, _b;
                 var baseUrl = compilerOptions.baseUrl, paths = compilerOptions.paths;
                 var result = createNameAndKindSet();
                 var extensionOptions = getExtensionOptions(compilerOptions, includeExtensionsOption);
@@ -134880,8 +135066,8 @@ var ts;
                     }
                 }
                 var fragmentDirectory = getFragmentDirectory(fragment);
-                for (var _i = 0, _a = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _a.length; _i++) {
-                    var ambientName = _a[_i];
+                for (var _i = 0, _c = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _c.length; _i++) {
+                    var ambientName = _c[_i];
                     result.add(nameAndKind(ambientName, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined));
                 }
                 getCompletionEntriesFromTypings(host, compilerOptions, scriptPath, fragmentDirectory, extensionOptions, result);
@@ -134890,8 +135076,8 @@ var ts;
                     // (But do if we didn't find anything, e.g. 'package.json' missing.)
                     var foundGlobal = false;
                     if (fragmentDirectory === undefined) {
-                        for (var _b = 0, _c = enumerateNodeModulesVisibleToScript(host, scriptPath); _b < _c.length; _b++) {
-                            var moduleName = _c[_b];
+                        for (var _d = 0, _e = enumerateNodeModulesVisibleToScript(host, scriptPath); _d < _e.length; _d++) {
+                            var moduleName = _e[_d];
                             var moduleResult = nameAndKind(moduleName, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined);
                             if (!result.has(moduleResult.name)) {
                                 foundGlobal = true;
@@ -134906,7 +135092,22 @@ var ts;
                                 getCompletionEntriesForDirectoryFragment(fragment, nodeModules, extensionOptions, host, /*exclude*/ undefined, result);
                             }
                         };
-                        if (fragmentDirectory && isEmitModuleResolutionRespectingExportMaps(compilerOptions)) {
+                        var checkExports_1 = function (packageFile, packageDirectory, fragmentSubpath) {
+                            var packageJson = ts.readJson(packageFile, host);
+                            var exports = packageJson.exports;
+                            if (exports) {
+                                if (typeof exports !== "object" || exports === null) { // eslint-disable-line no-null/no-null
+                                    return true; // null exports or entrypoint only, no sub-modules available
+                                }
+                                var keys = ts.getOwnKeys(exports);
+                                var conditions_1 = mode === ts.ModuleKind.ESNext ? ["node", "import", "types"] : ["node", "require", "types"];
+                                addCompletionEntriesFromPathsOrExports(result, fragmentSubpath, packageDirectory, extensionOptions, host, keys, function (key) { return ts.singleElementArray(getPatternFromFirstMatchingCondition(exports[key], conditions_1)); }, ts.comparePatternKeys);
+                                return true;
+                            }
+                            return false;
+                        };
+                        var shouldCheckExports = fragmentDirectory && isEmitModuleResolutionRespectingExportMaps(compilerOptions);
+                        if (shouldCheckExports) {
                             var nodeModulesDirectoryLookup_1 = ancestorLookup;
                             ancestorLookup = function (ancestor) {
                                 var components = ts.getPathComponents(fragment);
@@ -134925,23 +135126,46 @@ var ts;
                                 var packageDirectory = ts.combinePaths(ancestor, "node_modules", packagePath);
                                 var packageFile = ts.combinePaths(packageDirectory, "package.json");
                                 if (ts.tryFileExists(host, packageFile)) {
-                                    var packageJson = ts.readJson(packageFile, host);
-                                    var exports_1 = packageJson.exports;
-                                    if (exports_1) {
-                                        if (typeof exports_1 !== "object" || exports_1 === null) { // eslint-disable-line no-null/no-null
-                                            return; // null exports or entrypoint only, no sub-modules available
-                                        }
-                                        var keys = ts.getOwnKeys(exports_1);
-                                        var fragmentSubpath = components.join("/") + (components.length && ts.hasTrailingDirectorySeparator(fragment) ? "/" : "");
-                                        var conditions_1 = mode === ts.ModuleKind.ESNext ? ["node", "import", "types"] : ["node", "require", "types"];
-                                        addCompletionEntriesFromPathsOrExports(result, fragmentSubpath, packageDirectory, extensionOptions, host, keys, function (key) { return ts.singleElementArray(getPatternFromFirstMatchingCondition(exports_1[key], conditions_1)); }, ts.comparePatternKeys);
+                                    var fragmentSubpath = components.join("/") + (components.length && ts.hasTrailingDirectorySeparator(fragment) ? "/" : "");
+                                    if (checkExports_1(packageFile, packageDirectory, fragmentSubpath)) {
                                         return;
                                     }
                                 }
                                 return nodeModulesDirectoryLookup_1(ancestor);
                             };
                         }
-                        ts.forEachAncestorDirectory(scriptPath, ancestorLookup);
+                        var pnpapi = (_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath);
+                        if (pnpapi) {
+                            // Splits a require request into its components, or return null if the request is a file path
+                            var pathRegExp = /^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:@[^/]+\/)?[^/]+)\/*(.*|)$/;
+                            var dependencyNameMatch = fragment.match(pathRegExp);
+                            if (dependencyNameMatch) {
+                                var dependencyName = dependencyNameMatch[1], subPath = dependencyNameMatch[2];
+                                var unqualified = void 0;
+                                try {
+                                    unqualified = pnpapi.resolveToUnqualified(dependencyName, scriptPath, { considerBuiltins: false });
+                                }
+                                catch (_f) {
+                                    // It's fine if the resolution fails
+                                }
+                                if (unqualified) {
+                                    var packageDirectory = ts.normalizePath(unqualified);
+                                    var shouldGetCompletions = true;
+                                    if (shouldCheckExports) {
+                                        var packageFile = ts.combinePaths(packageDirectory, "package.json");
+                                        if (ts.tryFileExists(host, packageFile) && checkExports_1(packageFile, packageDirectory, subPath)) {
+                                            shouldGetCompletions = false;
+                                        }
+                                    }
+                                    if (shouldGetCompletions) {
+                                        getCompletionEntriesForDirectoryFragment(subPath, packageDirectory, extensionOptions, host, /*exclude*/ undefined, result);
+                                    }
+                                }
+                            }
+                        }
+                        else {
+                            ts.forEachAncestorDirectory(scriptPath, ancestorLookup);
+                        }
                     }
                 }
                 return ts.arrayFrom(result.values());
@@ -135072,6 +135296,7 @@ var ts;
                 return addReplacementSpans(toComplete, range.pos + prefix.length, ts.arrayFrom(names.values()));
             }
             function getCompletionEntriesFromTypings(host, options, scriptPath, fragmentDirectory, extensionOptions, result) {
+                var _a, _b;
                 if (result === void 0) { result = createNameAndKindSet(); }
                 // Check for typings specified in compiler options
                 var seen = new ts.Map();
@@ -135080,11 +135305,19 @@ var ts;
                     var root = typeRoots_1[_i];
                     getCompletionEntriesFromDirectories(root);
                 }
-                // Also get all @types typings installed in visible node_modules directories
-                for (var _a = 0, _b = ts.findPackageJsons(scriptPath, host); _a < _b.length; _a++) {
-                    var packageJson = _b[_a];
-                    var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
-                    getCompletionEntriesFromDirectories(typesDir);
+                if ((_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath)) {
+                    for (var _c = 0, _d = ts.getPnpTypeRoots(scriptPath); _c < _d.length; _c++) {
+                        var root = _d[_c];
+                        getCompletionEntriesFromDirectories(root);
+                    }
+                }
+                else {
+                    // Also get all @types typings installed in visible node_modules directories
+                    for (var _e = 0, _f = ts.findPackageJsons(scriptPath, host); _e < _f.length; _e++) {
+                        var packageJson = _f[_e];
+                        var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
+                        getCompletionEntriesFromDirectories(typesDir);
+                    }
                 }
                 return result;
                 function getCompletionEntriesFromDirectories(directory) {
@@ -166057,9 +166290,9 @@ var ts;
                 if (isTopLevelDeclarationStatement(statement) &&
                     !isExported(sourceFile, statement, useEs6Exports) &&
                     forEachTopLevelDeclaration(statement, function (d) { return needExport.has(ts.Debug.checkDefined(d.symbol)); })) {
-                    var exports = addExport(statement, useEs6Exports);
-                    if (exports)
-                        return exports;
+                    var exports_1 = addExport(statement, useEs6Exports);
+                    if (exports_1)
+                        return exports_1;
                 }
                 return statement;
             });
diff --git a/lib/typingsInstaller.js b/lib/typingsInstaller.js
index 284a066b2..177d61407 100644
semver exclusivity >=4.9.1-beta <4.9.2-rc
--- a/lib/typingsInstaller.js
+++ b/lib/typingsInstaller.js
@@ -7271,6 +7271,11 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                // The PnP runtime is always case-sensitive
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    return true;
+                }
                 // win32\win64 are case insensitive platforms
                 if (platform === "win32" || platform === "win64") {
                     return false;
@@ -43399,18 +43404,17 @@ var ts;
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
     /**
      * Returns the path to every node_modules/@types directory from some ancestor directory.
-     * Returns undefined if there are none.
      */
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
             // And if it doesn't exist, tough.
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
@@ -43421,6 +43425,42 @@ var ts;
         var useCaseSensitiveFileNames = typeof host.useCaseSensitiveFileNames === "function" ? host.useCaseSensitiveFileNames() : host.useCaseSensitiveFileNames;
         return ts.comparePaths(path1, path2, !useCaseSensitiveFileNames) === 0 /* Comparison.EqualTo */;
     }
+    /**
+     * @internal
+     */
+    function getPnpTypeRoots(currentDirectory) {
+        var pnpapi = getPnpApi(currentDirectory);
+        if (!pnpapi) {
+            return [];
+        }
+        // Some TS consumers pass relative paths that aren't normalized
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var currentPackage = pnpapi.findPackageLocator("".concat(currentDirectory, "/"));
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            // eslint-disable-next-line no-null/no-null
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    ts.getPnpTypeRoots = getPnpTypeRoots;
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArray(__spreadArray([], nmTypes, true), pnpTypes, true);
+        }
+    }
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
@@ -43562,7 +43602,9 @@ var ts;
                 }
                 var result_4;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
+                    var searchResult = getPnpApi(initialLocationForSecondaryLookup)
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
                     result_4 = searchResult && searchResult.value;
                 }
                 else {
@@ -44287,7 +44329,9 @@ var ts;
                     if (traceEnabled) {
                         trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                     }
-                    resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                    resolved_1 = getPnpApi(containingDirectory)
+                        ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference)
+                        : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
                 }
                 if (!resolved_1)
                     return undefined;
@@ -45233,8 +45277,16 @@ var ts;
         }
     }
     function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference) {
-        var _a;
         var candidate = ts.normalizePath(ts.combinePaths(nodeModulesDirectory, moduleName));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, /* rest */ undefined, /* packageDirectory */ undefined);
+    }
+    function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state, cache, redirectedReference) {
+        var candidate = ts.normalizePath(ts.combinePaths(packageDirectory, rest));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, /*moduleName*/ undefined, /*nodeModulesDirectory*/ undefined, /*nodeModulesDirectoryExists*/ true, state, cache, redirectedReference, candidate, rest, packageDirectory);
+    }
+    function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory) {
+        var _a;
+        var _b;
         // First look for a nested package.json, as in `node_modules/foo/bar/package.json`.
         var packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
         // But only if we're not respecting export maps (if we are, we might redirect around this location)
@@ -45261,15 +45313,18 @@ var ts;
             }
             return withPackageId(packageInfo, pathAndExtension);
         };
-        var _b = parsePackageName(moduleName), packageName = _b.packageName, rest = _b.rest;
-        var packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
+        var packageName;
+        if (rest === undefined)
+            (_a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest);
+        if (packageDirectory === undefined)
+            packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
         if (rest !== "") {
             // Previous `packageInfo` may have been from a nested package.json; ensure we have the one from the package root now.
             packageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state);
         }
         // package exports are higher priority than file/directory/typesVersions lookups and (and, if there's exports present, blocks them)
         if (packageInfo && packageInfo.contents.packageJsonContent.exports && state.features & NodeResolutionFeatures.Exports) {
-            return (_a = loadModuleFromExports(packageInfo, extensions, ts.combinePaths(".", rest), state, cache, redirectedReference)) === null || _a === void 0 ? void 0 : _a.value;
+            return (_b = loadModuleFromExports(packageInfo, extensions, ts.combinePaths(".", rest), state, cache, redirectedReference)) === null || _b === void 0 ? void 0 : _b.value;
         }
         if (rest !== "" && packageInfo && packageInfo.contents.versionPaths) {
             if (state.traceEnabled) {
@@ -45454,6 +45509,58 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    /**
+     * We only allow PnP to be used as a resolution strategy if TypeScript
+     * itself is executed under a PnP runtime (and we only allow it to access
+     * the current PnP runtime, not any on the disk). This ensures that we
+     * don't execute potentially malicious code that didn't already have a
+     * chance to be executed (if we're running within the runtime, it means
+     * that the runtime has already been executed).
+     * @internal
+     */
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi("".concat(path, "/"));
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, "".concat(containingDirectory, "/"), { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution).replace(/\/$/, "");
+        }
+        catch (_a) {
+            // Nothing to do
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    /* @internal */
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state, cache, redirectedReference)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? loadModuleFromPnpResolution(Extensions.DtsOnly, typePackageResolution, rest, state, cache, redirectedReference)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 /* @internal */
 var ts;
@@ -117875,6 +117982,8 @@ var ts;
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Partial"] = 1] = "Partial";
         /** Reload completely by re-reading contents of config file from disk and updating program */
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Full"] = 2] = "Full";
+        /** Reload the resolutions */
+        ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Resolutions"] = 3] = "Resolutions";
     })(ConfigFileProgramReloadLevel = ts.ConfigFileProgramReloadLevel || (ts.ConfigFileProgramReloadLevel = {}));
     /**
      * Updates the map of shared extended config file watches with a new set of extended config files from a base config file of the project
@@ -125262,6 +125371,30 @@ var ts;
                 return undefined;
             }
             var parts = ts.getNodeModulePathParts(path);
+            var packageName;
+            if (!parts && typeof process.versions.pnp !== "undefined") {
+                var findPnpApi = require("module").findPnpApi;
+                var pnpApi = findPnpApi(path);
+                var locator = pnpApi === null || pnpApi === void 0 ? void 0 : pnpApi.findPackageLocator(path);
+                // eslint-disable-next-line no-null/no-null
+                if (locator !== null && locator !== undefined) {
+                    var sourceLocator = pnpApi.findPackageLocator("".concat(sourceDirectory, "/"));
+                    // Don't use the package name when the imported file is inside
+                    // the source directory (prefer a relative path instead)
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        // The last character from packageLocation is the trailing "/", we want to point to it
+                        packageRootIndex: information.packageLocation.length - 1,
+                        fileNameIndex: path.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -125301,18 +125434,24 @@ var ts;
             if (isRedirect && !isPackageRootPath) {
                 return undefined;
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            // Get a path that's relative to node_modules or the importing file's path
-            // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            // If PnP is enabled the node_modules entries we'll get will always be relevant even if they
+            // are located in a weird path apparently outside of the source directory
+            if (typeof process.versions.pnp === "undefined") {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                // Get a path that's relative to node_modules or the importing file's path
+                // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
             // If the module was found in @types, get the actual Node package name
-            var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            var nodeModulesDirectoryName = typeof packageName !== "undefined"
+                ? packageName + moduleSpecifier.substring(parts.packageRootIndex)
+                : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
             // For classic resolution, only allow importing from node_modules/@types, not other node_modules
-            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var _a, _b;
                 var packageRootPath = path.substring(0, packageRootIndex);
@@ -126205,6 +126344,10 @@ var ts;
         if (configFileName) {
             configFileWatcher = watchFile(configFileName, scheduleProgramReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
         }
+        var pnpFileWatcher;
+        if (typeof process.versions.pnp !== "undefined") {
+            pnpFileWatcher = watchFile(require.resolve("pnpapi"), scheduleResolutionReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
+        }
         var compilerHost = ts.createCompilerHostFromProgramHost(host, function () { return compilerOptions; }, directoryStructureHost);
         ts.setGetSourceFileAsHashVersioned(compilerHost, host);
         // Members for CompilerHost
@@ -126291,6 +126434,10 @@ var ts;
                 configFileWatcher.close();
                 configFileWatcher = undefined;
             }
+            if (pnpFileWatcher) {
+                pnpFileWatcher.close();
+                pnpFileWatcher = undefined;
+            }
             extendedConfigCache === null || extendedConfigCache === void 0 ? void 0 : extendedConfigCache.clear();
             extendedConfigCache = undefined;
             if (sharedExtendedConfigFileWatchers) {
@@ -126323,7 +126470,8 @@ var ts;
         function getCurrentProgram() {
             return builderProgram && builderProgram.getProgramOrUndefined();
         }
-        function synchronizeProgram() {
+        function synchronizeProgram(forceAllFilesAsInvalidated) {
+            if (forceAllFilesAsInvalidated === void 0) { forceAllFilesAsInvalidated = false; }
             writeLog("Synchronizing program");
             clearInvalidateResolutionsOfFailedLookupLocations();
             var program = getCurrentBuilderProgram();
@@ -126333,7 +126481,7 @@ var ts;
                     resolutionCache.clear();
                 }
             }
-            var hasInvalidatedResolutions = resolutionCache.createHasInvalidatedResolutions(customHasInvalidatedResolutions);
+            var hasInvalidatedResolutions = resolutionCache.createHasInvalidatedResolutions(forceAllFilesAsInvalidated ? ts.returnTrue : customHasInvalidatedResolutions);
             var _a = ts.changeCompilerHostLikeToUseCache(compilerHost, toPath), originalReadFile = _a.originalReadFile, originalFileExists = _a.originalFileExists, originalDirectoryExists = _a.originalDirectoryExists, originalCreateDirectory = _a.originalCreateDirectory, originalWriteFile = _a.originalWriteFile;
             if (ts.isProgramUptoDate(getCurrentProgram(), rootFileNames, compilerOptions, getSourceVersion, function (fileName) { return compilerHost.fileExists(fileName); }, hasInvalidatedResolutions, hasChangedAutomaticTypeDirectiveNames, getParsedCommandLine, projectReferences)) {
                 if (hasChangedConfigFileParsingErrors) {
@@ -126547,6 +126695,12 @@ var ts;
             reloadLevel = ts.ConfigFileProgramReloadLevel.Full;
             scheduleProgramUpdate();
         }
+        function scheduleResolutionReload() {
+            writeLog("Clearing resolutions");
+            resolutionCache.clear();
+            reloadLevel = ts.ConfigFileProgramReloadLevel.Resolutions;
+            scheduleProgramUpdate();
+        }
         function updateProgramWithWatchStatus() {
             timerToUpdateProgram = undefined;
             reportFileChangeDetectedOnCreateProgram = true;
@@ -126562,6 +126716,10 @@ var ts;
                     ts.perfLogger.logStartUpdateProgram("FullConfigReload");
                     reloadConfigFile();
                     break;
+                case ts.ConfigFileProgramReloadLevel.Resolutions:
+                    ts.perfLogger.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+                    synchronizeProgram(/*forceAllFilesAsInvalidated*/ true);
+                    break;
                 default:
                     ts.perfLogger.logStartUpdateProgram("SynchronizeProgram");
                     synchronizeProgram();
