diff --git a/lib/tsc.js b/lib/tsc.js
index 012388982..34e6d3071 100644
semver exclusivity >=5.1.0-beta
--- a/lib/tsc.js
+++ b/lib/tsc.js
@@ -5054,6 +5054,9 @@ var sys = (() => {
       return Buffer.from && Buffer.from !== Int8Array.from ? Buffer.from(input, encoding) : new Buffer(input, encoding);
     }
     function isFileSystemCaseSensitive() {
+      if (typeof process.versions.pnp !== `undefined`) {
+        return true;
+      }
       if (platform === "win32" || platform === "win64") {
         return false;
       }
@@ -36340,6 +36343,46 @@ function getDefaultValueForOption(option) {
   }
 }
 
+// src/compiler/pnp.ts
+function getPnpApi(path) {
+  if (typeof process.versions.pnp === "undefined") {
+    return;
+  }
+  const { findPnpApi } = require("module");
+  if (findPnpApi) {
+    return findPnpApi(`${path}/`);
+  }
+}
+function getPnpApiPath(path) {
+  var _a;
+  return (_a = getPnpApi(path)) == null ? void 0 : _a.resolveRequest(
+    "pnpapi",
+    /*issuer*/
+    null
+  );
+}
+function getPnpTypeRoots(currentDirectory) {
+  const pnpApi = getPnpApi(currentDirectory);
+  if (!pnpApi) {
+    return [];
+  }
+  currentDirectory = resolvePath(currentDirectory);
+  const currentPackage = pnpApi.findPackageLocator(`${currentDirectory}/`);
+  if (!currentPackage) {
+    return [];
+  }
+  const { packageDependencies } = pnpApi.getPackageInformation(currentPackage);
+  const typeRoots = [];
+  for (const [name, referencish] of Array.from(packageDependencies.entries())) {
+    if (name.startsWith(`@types/`) && referencish !== null) {
+      const dependencyLocator = pnpApi.getLocator(name, referencish);
+      const { packageLocation } = pnpApi.getPackageInformation(dependencyLocator);
+      typeRoots.push(getDirectoryPath(packageLocation));
+    }
+  }
+  return typeRoots;
+}
+
 // src/compiler/moduleNameResolver.ts
 function trace(host) {
   host.trace(formatMessage.apply(void 0, arguments));
@@ -36550,7 +36593,7 @@ function getEffectiveTypeRoots(options, host) {
     return getDefaultTypeRoots(currentDirectory);
   }
 }
-function getDefaultTypeRoots(currentDirectory) {
+function getNodeModulesTypeRoots(currentDirectory) {
   let typeRoots;
   forEachAncestorDirectory(normalizePath(currentDirectory), (directory) => {
     const atTypes = combinePaths(directory, nodeModulesAtTypes);
@@ -36563,6 +36606,15 @@ function arePathsEqual(path1, path2, host) {
   const useCaseSensitiveFileNames = typeof host.useCaseSensitiveFileNames === "function" ? host.useCaseSensitiveFileNames() : host.useCaseSensitiveFileNames;
   return comparePaths(path1, path2, !useCaseSensitiveFileNames) === 0 /* EqualTo */;
 }
+function getDefaultTypeRoots(currentDirectory) {
+  const nmTypes = getNodeModulesTypeRoots(currentDirectory);
+  const pnpTypes = getPnpTypeRoots(currentDirectory);
+  if (nmTypes == null ? void 0 : nmTypes.length) {
+    return [...nmTypes, ...pnpTypes];
+  } else if (pnpTypes.length) {
+    return pnpTypes;
+  }
+}
 function getOriginalAndResolvedFileName(fileName, host, traceEnabled) {
   const resolvedFileName = realPath(fileName, host, traceEnabled);
   const pathsAreEqual = arePathsEqual(fileName, resolvedFileName, host);
@@ -38421,7 +38473,15 @@ function loadModuleFromNearestNodeModulesDirectoryWorker(extensions, moduleName,
     return lookup(secondaryExtensions);
   }
   function lookup(extensions2) {
-    return forEachAncestorDirectory(normalizeSlashes(directory), (ancestorDirectory) => {
+    const issuer = normalizeSlashes(directory);
+    if (getPnpApi(issuer)) {
+      const resolutionFromCache = tryFindNonRelativeModuleNameInCache(cache, moduleName, mode, issuer, redirectedReference, state);
+      if (resolutionFromCache) {
+        return resolutionFromCache;
+      }
+      return toSearchResult(loadModuleFromImmediateNodeModulesDirectoryPnP(extensions2, moduleName, issuer, state, typesScopeOnly, cache, redirectedReference));
+    }
+    return forEachAncestorDirectory(issuer, (ancestorDirectory) => {
       if (getBaseFileName(ancestorDirectory) !== "node_modules") {
         const resolutionFromCache = tryFindNonRelativeModuleNameInCache(cache, moduleName, mode, ancestorDirectory, redirectedReference, state);
         if (resolutionFromCache) {
@@ -38456,11 +38516,40 @@ function loadModuleFromImmediateNodeModulesDirectory(extensions, moduleName, dir
     return loadModuleFromSpecificNodeModulesDirectory(4 /* Declaration */, mangleScopedPackageNameWithTrace(moduleName, state), nodeModulesAtTypes2, nodeModulesAtTypesExists, state, cache, redirectedReference);
   }
 }
+function loadModuleFromImmediateNodeModulesDirectoryPnP(extensions, moduleName, directory, state, typesScopeOnly, cache, redirectedReference) {
+  const issuer = normalizeSlashes(directory);
+  if (!typesScopeOnly) {
+    const packageResult = tryLoadModuleUsingPnpResolution(extensions, moduleName, issuer, state, cache, redirectedReference);
+    if (packageResult) {
+      return packageResult;
+    }
+  }
+  if (extensions & 4 /* Declaration */) {
+    return tryLoadModuleUsingPnpResolution(4 /* Declaration */, `@types/${mangleScopedPackageNameWithTrace(moduleName, state)}`, issuer, state, cache, redirectedReference);
+  }
+}
 function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference) {
-  var _a, _b;
   const candidate = normalizePath(combinePaths(nodeModulesDirectory, moduleName));
   const { packageName, rest } = parsePackageName(moduleName);
   const packageDirectory = combinePaths(nodeModulesDirectory, packageName);
+  return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory);
+}
+function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state, cache, redirectedReference) {
+  const candidate = normalizePath(combinePaths(packageDirectory, rest));
+  return loadModuleFromSpecificNodeModulesDirectoryImpl(
+    extensions,
+    /*nodeModulesDirectoryExists*/
+    true,
+    state,
+    cache,
+    redirectedReference,
+    candidate,
+    rest,
+    packageDirectory
+  );
+}
+function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory) {
+  var _a, _b;
   let rootPackageInfo;
   let packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
   if (rest !== "" && packageInfo && (!(state.features & 8 /* Exports */) || !hasProperty(((_a = rootPackageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state)) == null ? void 0 : _a.contents.packageJsonContent) ?? emptyArray, "exports"))) {
@@ -38754,6 +38843,18 @@ function traceIfEnabled(state, diagnostic, ...args) {
     trace(state.host, diagnostic, ...args);
   }
 }
+function loadPnpPackageResolution(packageName, containingDirectory) {
+  try {
+    const resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, `${containingDirectory}/`, { considerBuiltins: false });
+    return normalizeSlashes(resolution).replace(/\/$/, "");
+  } catch {
+  }
+}
+function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference) {
+  const { packageName, rest } = parsePackageName(moduleName);
+  const packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+  return packageResolution ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state, cache, redirectedReference) : void 0;
+}
 
 // src/compiler/binder.ts
 function getModuleInstanceState(node, visited) {
@@ -42079,7 +42180,15 @@ function getAllModulePathsWorker(importingFileName, importedFileName, host) {
     /*preferSymlinks*/
     true,
     (path, isRedirect) => {
-      const isInNodeModules = pathContainsNodeModules(path);
+      let isInNodeModules = pathContainsNodeModules(path);
+      const pnpapi = getPnpApi(path);
+      if (!isInNodeModules && pnpapi) {
+        const fromLocator = pnpapi.findPackageLocator(importingFileName);
+        const toLocator = pnpapi.findPackageLocator(path);
+        if (fromLocator && toLocator && fromLocator !== toLocator) {
+          isInNodeModules = true;
+        }
+      }
       allFileNames.set(path, { path: getCanonicalFileName(path), isRedirect, isInNodeModules });
       importedFileFromNodeModules = importedFileFromNodeModules || isInNodeModules;
     }
@@ -42271,7 +42380,41 @@ function tryGetModuleNameAsNodeModule({ path, isRedirect }, { getCanonicalFileNa
   if (!host.fileExists || !host.readFile) {
     return void 0;
   }
-  const parts = getNodeModulePathParts(path);
+  let parts = getNodeModulePathParts(path);
+  let pnpPackageName;
+  const pnpApi = getPnpApi(path);
+  if (pnpApi) {
+    const fromLocator = pnpApi.findPackageLocator(importingSourceFile.fileName);
+    const toLocator = pnpApi.findPackageLocator(path);
+    if (fromLocator === toLocator) {
+      return void 0;
+    }
+    if (fromLocator && toLocator) {
+      const fromInfo = pnpApi.getPackageInformation(fromLocator);
+      if (toLocator.reference === fromInfo.packageDependencies.get(toLocator.name)) {
+        pnpPackageName = toLocator.name;
+      } else {
+        for (const [name, reference] of fromInfo.packageDependencies) {
+          if (Array.isArray(reference)) {
+            if (reference[0] === toLocator.name && reference[1] === toLocator.reference) {
+              pnpPackageName = name;
+              break;
+            }
+          }
+        }
+      }
+      if (!parts) {
+        const toInfo = pnpApi.getPackageInformation(toLocator);
+        parts = {
+          topLevelNodeModulesIndex: void 0,
+          topLevelPackageNameIndex: void 0,
+          // The last character from packageLocation is the trailing "/", we want to point to it
+          packageRootIndex: toInfo.packageLocation.length - 1,
+          fileNameIndex: path.lastIndexOf(`/`)
+        };
+      }
+    }
+  }
   if (!parts) {
     return void 0;
   }
@@ -42309,14 +42452,16 @@ function tryGetModuleNameAsNodeModule({ path, isRedirect }, { getCanonicalFileNa
   if (isRedirect && !isPackageRootPath) {
     return void 0;
   }
-  const globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-  const pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-  if (!(startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-    return void 0;
+  if (typeof process.versions.pnp === "undefined") {
+    const globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+    const pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+    if (!(startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+      return void 0;
+    }
   }
-  const nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-  const packageName = getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
-  return getEmitModuleResolutionKind(options) === 1 /* Classic */ && packageName === nodeModulesDirectoryName ? void 0 : packageName;
+  const nodeModulesDirectoryName = typeof pnpPackageName !== "undefined" ? pnpPackageName + moduleSpecifier.substring(parts.packageRootIndex) : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+  const packageNameFromPath = getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+  return getEmitModuleResolutionKind(options) === 1 /* Classic */ && packageNameFromPath === nodeModulesDirectoryName ? void 0 : packageNameFromPath;
   function tryDirectoryWithPackageJson(packageRootIndex) {
     var _a, _b;
     const packageRootPath = path.substring(0, packageRootIndex);
@@ -42329,9 +42474,9 @@ function tryGetModuleNameAsNodeModule({ path, isRedirect }, { getCanonicalFileNa
       const importMode = overrideMode || importingSourceFile.impliedNodeFormat;
       if (getResolvePackageJsonExports(options)) {
         const nodeModulesDirectoryName2 = packageRootPath.substring(parts.topLevelPackageNameIndex + 1);
-        const packageName2 = getPackageNameFromTypesPackageName(nodeModulesDirectoryName2);
+        const packageName = getPackageNameFromTypesPackageName(pnpPackageName ? pnpPackageName : nodeModulesDirectoryName2);
         const conditions = getConditions(options, importMode === 99 /* ESNext */);
-        const fromExports = packageJsonContent.exports ? tryGetModuleNameFromExports(options, path, packageRootPath, packageName2, packageJsonContent.exports, conditions) : void 0;
+        const fromExports = packageJsonContent.exports ? tryGetModuleNameFromExports(options, path, packageRootPath, packageName, packageJsonContent.exports, conditions) : void 0;
         if (fromExports) {
           const withJsExtension = !hasTSFileExtension(fromExports.moduleFileToTry) ? fromExports : { moduleFileToTry: removeFileExtension(fromExports.moduleFileToTry) + tryGetJSExtensionForFile(fromExports.moduleFileToTry, options) };
           return { ...withJsExtension, verbatimFromExports: true };
@@ -119761,6 +119906,11 @@ function createWatchProgram(host) {
   if (configFileName) {
     configFileWatcher = watchFile2(configFileName, scheduleProgramReload, 2e3 /* High */, watchOptions, WatchType.ConfigFile);
   }
+  let pnpFileWatcher;
+  const pnpApiPath = getPnpApiPath(__filename);
+  if (pnpApiPath) {
+    pnpFileWatcher = watchFile2(pnpApiPath, scheduleResolutionReload, 2e3 /* High */, watchOptions, WatchType.ConfigFile);
+  }
   const compilerHost = createCompilerHostFromProgramHost(host, () => compilerOptions, directoryStructureHost);
   setGetSourceFileAsHashVersioned(compilerHost);
   const getNewSourceFile = compilerHost.getSourceFile;
@@ -119822,6 +119972,10 @@ function createWatchProgram(host) {
       configFileWatcher.close();
       configFileWatcher = void 0;
     }
+    if (pnpFileWatcher) {
+      pnpFileWatcher.close();
+      pnpFileWatcher = void 0;
+    }
     extendedConfigCache == null ? void 0 : extendedConfigCache.clear();
     extendedConfigCache = void 0;
     if (sharedExtendedConfigFileWatchers) {
@@ -119854,7 +120008,7 @@ function createWatchProgram(host) {
   function getCurrentProgram() {
     return builderProgram && builderProgram.getProgramOrUndefined();
   }
-  function synchronizeProgram() {
+  function synchronizeProgram(forceAllFilesAsInvalidated = false) {
     writeLog(`Synchronizing program`);
     Debug.assert(compilerOptions);
     Debug.assert(rootFileNames);
@@ -119866,7 +120020,7 @@ function createWatchProgram(host) {
         resolutionCache.clear();
       }
     }
-    const hasInvalidatedResolutions = resolutionCache.createHasInvalidatedResolutions(customHasInvalidatedResolutions);
+    const hasInvalidatedResolutions = resolutionCache.createHasInvalidatedResolutions(forceAllFilesAsInvalidated ? returnTrue : customHasInvalidatedResolutions);
     const {
       originalReadFile,
       originalFileExists,
@@ -120072,13 +120226,19 @@ function createWatchProgram(host) {
     reloadLevel = 2 /* Full */;
     scheduleProgramUpdate();
   }
+  function scheduleResolutionReload() {
+    writeLog("Clearing resolutions");
+    resolutionCache.clear();
+    reloadLevel = 3 /* Resolutions */;
+    scheduleProgramUpdate();
+  }
   function updateProgramWithWatchStatus() {
     timerToUpdateProgram = void 0;
     reportFileChangeDetectedOnCreateProgram = true;
     updateProgram();
   }
   function updateProgram() {
-    var _a, _b, _c, _d;
+    var _a, _b, _c, _d, _e;
     switch (reloadLevel) {
       case 1 /* Partial */:
         (_a = perfLogger) == null ? void 0 : _a.logStartUpdateProgram("PartialConfigReload");
@@ -120088,12 +120248,19 @@ function createWatchProgram(host) {
         (_b = perfLogger) == null ? void 0 : _b.logStartUpdateProgram("FullConfigReload");
         reloadConfigFile();
         break;
+      case 3 /* Resolutions */:
+        (_c = perfLogger) == null ? void 0 : _c.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+        synchronizeProgram(
+          /*forceAllFilesAsInvalidated*/
+          true
+        );
+        break;
       default:
-        (_c = perfLogger) == null ? void 0 : _c.logStartUpdateProgram("SynchronizeProgram");
+        (_d = perfLogger) == null ? void 0 : _d.logStartUpdateProgram("SynchronizeProgram");
         synchronizeProgram();
         break;
     }
-    (_d = perfLogger) == null ? void 0 : _d.logStopUpdateProgram("Done");
+    (_e = perfLogger) == null ? void 0 : _e.logStopUpdateProgram("Done");
     return getCurrentBuilderProgram();
   }
   function reloadFileNamesFromConfigFile() {
diff --git a/lib/tsserver.js b/lib/tsserver.js
index 1bcfee524..bf80053e9 100644
semver exclusivity >=5.1.0-beta
--- a/lib/tsserver.js
+++ b/lib/tsserver.js
@@ -8547,6 +8547,9 @@ var sys = (() => {
       return Buffer2.from && Buffer2.from !== Int8Array.from ? Buffer2.from(input, encoding) : new Buffer2(input, encoding);
     }
     function isFileSystemCaseSensitive() {
+      if (typeof process.versions.pnp !== `undefined`) {
+        return true;
+      }
       if (platform === "win32" || platform === "win64") {
         return false;
       }
@@ -40801,6 +40804,67 @@ function getDefaultValueForOption(option) {
   }
 }
 
+// src/compiler/pnp.ts
+function getPnpApi(path) {
+  if (typeof process.versions.pnp === "undefined") {
+    return;
+  }
+  const { findPnpApi } = require("module");
+  if (findPnpApi) {
+    return findPnpApi(`${path}/`);
+  }
+}
+function getPnpApiPath(path) {
+  var _a;
+  return (_a = getPnpApi(path)) == null ? void 0 : _a.resolveRequest(
+    "pnpapi",
+    /*issuer*/
+    null
+  );
+}
+function getPnpTypeRoots(currentDirectory) {
+  const pnpApi = getPnpApi(currentDirectory);
+  if (!pnpApi) {
+    return [];
+  }
+  currentDirectory = resolvePath(currentDirectory);
+  const currentPackage = pnpApi.findPackageLocator(`${currentDirectory}/`);
+  if (!currentPackage) {
+    return [];
+  }
+  const { packageDependencies } = pnpApi.getPackageInformation(currentPackage);
+  const typeRoots = [];
+  for (const [name, referencish] of Array.from(packageDependencies.entries())) {
+    if (name.startsWith(`@types/`) && referencish !== null) {
+      const dependencyLocator = pnpApi.getLocator(name, referencish);
+      const { packageLocation } = pnpApi.getPackageInformation(dependencyLocator);
+      typeRoots.push(getDirectoryPath(packageLocation));
+    }
+  }
+  return typeRoots;
+}
+function isImportablePathPnp(fromPath, toPath3) {
+  const pnpApi = getPnpApi(fromPath);
+  const fromLocator = pnpApi.findPackageLocator(fromPath);
+  const toLocator = pnpApi.findPackageLocator(toPath3);
+  if (toLocator === null) {
+    return false;
+  }
+  const fromInfo = pnpApi.getPackageInformation(fromLocator);
+  const toReference = fromInfo.packageDependencies.get(toLocator.name);
+  if (toReference) {
+    return toReference === toLocator.reference;
+  }
+  for (const reference of fromInfo.packageDependencies.values()) {
+    if (Array.isArray(reference)) {
+      if (reference[0] === toLocator.name && reference[1] === toLocator.reference) {
+        return true;
+      }
+    }
+  }
+  return false;
+}
+
 // src/compiler/moduleNameResolver.ts
 function trace(host) {
   host.trace(formatMessage.apply(void 0, arguments));
@@ -41011,7 +41075,7 @@ function getEffectiveTypeRoots(options, host) {
     return getDefaultTypeRoots(currentDirectory);
   }
 }
-function getDefaultTypeRoots(currentDirectory) {
+function getNodeModulesTypeRoots(currentDirectory) {
   let typeRoots;
   forEachAncestorDirectory(normalizePath(currentDirectory), (directory) => {
     const atTypes = combinePaths(directory, nodeModulesAtTypes);
@@ -41024,6 +41088,15 @@ function arePathsEqual(path1, path2, host) {
   const useCaseSensitiveFileNames = typeof host.useCaseSensitiveFileNames === "function" ? host.useCaseSensitiveFileNames() : host.useCaseSensitiveFileNames;
   return comparePaths(path1, path2, !useCaseSensitiveFileNames) === 0 /* EqualTo */;
 }
+function getDefaultTypeRoots(currentDirectory) {
+  const nmTypes = getNodeModulesTypeRoots(currentDirectory);
+  const pnpTypes = getPnpTypeRoots(currentDirectory);
+  if (nmTypes == null ? void 0 : nmTypes.length) {
+    return [...nmTypes, ...pnpTypes];
+  } else if (pnpTypes.length) {
+    return pnpTypes;
+  }
+}
 function getOriginalAndResolvedFileName(fileName, host, traceEnabled) {
   const resolvedFileName = realPath(fileName, host, traceEnabled);
   const pathsAreEqual = arePathsEqual(fileName, resolvedFileName, host);
@@ -41268,6 +41341,21 @@ function getConditions(options, esmMode) {
 }
 function resolvePackageNameToPackageJson(packageName, containingDirectory, options, host, cache) {
   const moduleResolutionState = getTemporaryModuleResolutionState(cache == null ? void 0 : cache.getPackageJsonInfoCache(), host, options);
+  const pnpapi = getPnpApi(containingDirectory);
+  if (pnpapi) {
+    try {
+      const resolution = pnpapi.resolveToUnqualified(packageName, `${containingDirectory}/`, { considerBuiltins: false });
+      const candidate = normalizeSlashes(resolution).replace(/\/$/, "");
+      return getPackageJsonInfo(
+        candidate,
+        /*onlyRecordFailures*/
+        false,
+        moduleResolutionState
+      );
+    } catch {
+      return;
+    }
+  }
   return forEachAncestorDirectory(containingDirectory, (ancestorDirectory) => {
     if (getBaseFileName(ancestorDirectory) !== "node_modules") {
       const nodeModulesFolder = combinePaths(ancestorDirectory, "node_modules");
@@ -43021,7 +43109,15 @@ function loadModuleFromNearestNodeModulesDirectoryWorker(extensions, moduleName,
     return lookup(secondaryExtensions);
   }
   function lookup(extensions2) {
-    return forEachAncestorDirectory(normalizeSlashes(directory), (ancestorDirectory) => {
+    const issuer = normalizeSlashes(directory);
+    if (getPnpApi(issuer)) {
+      const resolutionFromCache = tryFindNonRelativeModuleNameInCache(cache, moduleName, mode, issuer, redirectedReference, state);
+      if (resolutionFromCache) {
+        return resolutionFromCache;
+      }
+      return toSearchResult(loadModuleFromImmediateNodeModulesDirectoryPnP(extensions2, moduleName, issuer, state, typesScopeOnly, cache, redirectedReference));
+    }
+    return forEachAncestorDirectory(issuer, (ancestorDirectory) => {
       if (getBaseFileName(ancestorDirectory) !== "node_modules") {
         const resolutionFromCache = tryFindNonRelativeModuleNameInCache(cache, moduleName, mode, ancestorDirectory, redirectedReference, state);
         if (resolutionFromCache) {
@@ -43056,11 +43152,40 @@ function loadModuleFromImmediateNodeModulesDirectory(extensions, moduleName, dir
     return loadModuleFromSpecificNodeModulesDirectory(4 /* Declaration */, mangleScopedPackageNameWithTrace(moduleName, state), nodeModulesAtTypes2, nodeModulesAtTypesExists, state, cache, redirectedReference);
   }
 }
+function loadModuleFromImmediateNodeModulesDirectoryPnP(extensions, moduleName, directory, state, typesScopeOnly, cache, redirectedReference) {
+  const issuer = normalizeSlashes(directory);
+  if (!typesScopeOnly) {
+    const packageResult = tryLoadModuleUsingPnpResolution(extensions, moduleName, issuer, state, cache, redirectedReference);
+    if (packageResult) {
+      return packageResult;
+    }
+  }
+  if (extensions & 4 /* Declaration */) {
+    return tryLoadModuleUsingPnpResolution(4 /* Declaration */, `@types/${mangleScopedPackageNameWithTrace(moduleName, state)}`, issuer, state, cache, redirectedReference);
+  }
+}
 function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference) {
-  var _a, _b;
   const candidate = normalizePath(combinePaths(nodeModulesDirectory, moduleName));
   const { packageName, rest } = parsePackageName(moduleName);
   const packageDirectory = combinePaths(nodeModulesDirectory, packageName);
+  return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory);
+}
+function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state, cache, redirectedReference) {
+  const candidate = normalizePath(combinePaths(packageDirectory, rest));
+  return loadModuleFromSpecificNodeModulesDirectoryImpl(
+    extensions,
+    /*nodeModulesDirectoryExists*/
+    true,
+    state,
+    cache,
+    redirectedReference,
+    candidate,
+    rest,
+    packageDirectory
+  );
+}
+function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory) {
+  var _a, _b;
   let rootPackageInfo;
   let packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
   if (rest !== "" && packageInfo && (!(state.features & 8 /* Exports */) || !hasProperty(((_a = rootPackageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state)) == null ? void 0 : _a.contents.packageJsonContent) ?? emptyArray, "exports"))) {
@@ -43354,6 +43479,18 @@ function traceIfEnabled(state, diagnostic, ...args) {
     trace(state.host, diagnostic, ...args);
   }
 }
+function loadPnpPackageResolution(packageName, containingDirectory) {
+  try {
+    const resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, `${containingDirectory}/`, { considerBuiltins: false });
+    return normalizeSlashes(resolution).replace(/\/$/, "");
+  } catch {
+  }
+}
+function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference) {
+  const { packageName, rest } = parsePackageName(moduleName);
+  const packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+  return packageResolution ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state, cache, redirectedReference) : void 0;
+}
 
 // src/compiler/binder.ts
 var ModuleInstanceState = /* @__PURE__ */ ((ModuleInstanceState2) => {
@@ -46733,7 +46870,15 @@ function getAllModulePathsWorker(importingFileName, importedFileName, host) {
     /*preferSymlinks*/
     true,
     (path, isRedirect) => {
-      const isInNodeModules = pathContainsNodeModules(path);
+      let isInNodeModules = pathContainsNodeModules(path);
+      const pnpapi = getPnpApi(path);
+      if (!isInNodeModules && pnpapi) {
+        const fromLocator = pnpapi.findPackageLocator(importingFileName);
+        const toLocator = pnpapi.findPackageLocator(path);
+        if (fromLocator && toLocator && fromLocator !== toLocator) {
+          isInNodeModules = true;
+        }
+      }
       allFileNames.set(path, { path: getCanonicalFileName(path), isRedirect, isInNodeModules });
       importedFileFromNodeModules = importedFileFromNodeModules || isInNodeModules;
     }
@@ -46925,7 +47070,41 @@ function tryGetModuleNameAsNodeModule({ path, isRedirect }, { getCanonicalFileNa
   if (!host.fileExists || !host.readFile) {
     return void 0;
   }
-  const parts = getNodeModulePathParts(path);
+  let parts = getNodeModulePathParts(path);
+  let pnpPackageName;
+  const pnpApi = getPnpApi(path);
+  if (pnpApi) {
+    const fromLocator = pnpApi.findPackageLocator(importingSourceFile.fileName);
+    const toLocator = pnpApi.findPackageLocator(path);
+    if (fromLocator === toLocator) {
+      return void 0;
+    }
+    if (fromLocator && toLocator) {
+      const fromInfo = pnpApi.getPackageInformation(fromLocator);
+      if (toLocator.reference === fromInfo.packageDependencies.get(toLocator.name)) {
+        pnpPackageName = toLocator.name;
+      } else {
+        for (const [name, reference] of fromInfo.packageDependencies) {
+          if (Array.isArray(reference)) {
+            if (reference[0] === toLocator.name && reference[1] === toLocator.reference) {
+              pnpPackageName = name;
+              break;
+            }
+          }
+        }
+      }
+      if (!parts) {
+        const toInfo = pnpApi.getPackageInformation(toLocator);
+        parts = {
+          topLevelNodeModulesIndex: void 0,
+          topLevelPackageNameIndex: void 0,
+          // The last character from packageLocation is the trailing "/", we want to point to it
+          packageRootIndex: toInfo.packageLocation.length - 1,
+          fileNameIndex: path.lastIndexOf(`/`)
+        };
+      }
+    }
+  }
   if (!parts) {
     return void 0;
   }
@@ -46963,14 +47142,16 @@ function tryGetModuleNameAsNodeModule({ path, isRedirect }, { getCanonicalFileNa
   if (isRedirect && !isPackageRootPath) {
     return void 0;
   }
-  const globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-  const pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-  if (!(startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-    return void 0;
+  if (typeof process.versions.pnp === "undefined") {
+    const globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+    const pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+    if (!(startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+      return void 0;
+    }
   }
-  const nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-  const packageName = getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
-  return getEmitModuleResolutionKind(options) === 1 /* Classic */ && packageName === nodeModulesDirectoryName ? void 0 : packageName;
+  const nodeModulesDirectoryName = typeof pnpPackageName !== "undefined" ? pnpPackageName + moduleSpecifier.substring(parts.packageRootIndex) : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+  const packageNameFromPath = getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+  return getEmitModuleResolutionKind(options) === 1 /* Classic */ && packageNameFromPath === nodeModulesDirectoryName ? void 0 : packageNameFromPath;
   function tryDirectoryWithPackageJson(packageRootIndex) {
     var _a, _b;
     const packageRootPath = path.substring(0, packageRootIndex);
@@ -46983,9 +47164,9 @@ function tryGetModuleNameAsNodeModule({ path, isRedirect }, { getCanonicalFileNa
       const importMode = overrideMode || importingSourceFile.impliedNodeFormat;
       if (getResolvePackageJsonExports(options)) {
         const nodeModulesDirectoryName2 = packageRootPath.substring(parts.topLevelPackageNameIndex + 1);
-        const packageName2 = getPackageNameFromTypesPackageName(nodeModulesDirectoryName2);
+        const packageName = getPackageNameFromTypesPackageName(pnpPackageName ? pnpPackageName : nodeModulesDirectoryName2);
         const conditions = getConditions(options, importMode === 99 /* ESNext */);
-        const fromExports = packageJsonContent.exports ? tryGetModuleNameFromExports(options, path, packageRootPath, packageName2, packageJsonContent.exports, conditions) : void 0;
+        const fromExports = packageJsonContent.exports ? tryGetModuleNameFromExports(options, path, packageRootPath, packageName, packageJsonContent.exports, conditions) : void 0;
         if (fromExports) {
           const withJsExtension = !hasTSFileExtension(fromExports.moduleFileToTry) ? fromExports : { moduleFileToTry: removeFileExtension(fromExports.moduleFileToTry) + tryGetJSExtensionForFile(fromExports.moduleFileToTry, options) };
           return { ...withJsExtension, verbatimFromExports: true };
@@ -117187,6 +117368,7 @@ var ConfigFileProgramReloadLevel = /* @__PURE__ */ ((ConfigFileProgramReloadLeve
   ConfigFileProgramReloadLevel2[ConfigFileProgramReloadLevel2["None"] = 0] = "None";
   ConfigFileProgramReloadLevel2[ConfigFileProgramReloadLevel2["Partial"] = 1] = "Partial";
   ConfigFileProgramReloadLevel2[ConfigFileProgramReloadLevel2["Full"] = 2] = "Full";
+  ConfigFileProgramReloadLevel2[ConfigFileProgramReloadLevel2["Resolutions"] = 3] = "Resolutions";
   return ConfigFileProgramReloadLevel2;
 })(ConfigFileProgramReloadLevel || {});
 function updateSharedExtendedConfigFileWatcher(projectPath, options, extendedConfigFilesMap, createExtendedConfigFileWatch, toPath3) {
@@ -124711,6 +124893,11 @@ function createWatchProgram(host) {
   if (configFileName) {
     configFileWatcher = watchFile2(configFileName, scheduleProgramReload, 2e3 /* High */, watchOptions, WatchType.ConfigFile);
   }
+  let pnpFileWatcher;
+  const pnpApiPath = getPnpApiPath(__filename);
+  if (pnpApiPath) {
+    pnpFileWatcher = watchFile2(pnpApiPath, scheduleResolutionReload, 2e3 /* High */, watchOptions, WatchType.ConfigFile);
+  }
   const compilerHost = createCompilerHostFromProgramHost(host, () => compilerOptions, directoryStructureHost);
   setGetSourceFileAsHashVersioned(compilerHost);
   const getNewSourceFile = compilerHost.getSourceFile;
@@ -124772,6 +124959,10 @@ function createWatchProgram(host) {
       configFileWatcher.close();
       configFileWatcher = void 0;
     }
+    if (pnpFileWatcher) {
+      pnpFileWatcher.close();
+      pnpFileWatcher = void 0;
+    }
     extendedConfigCache == null ? void 0 : extendedConfigCache.clear();
     extendedConfigCache = void 0;
     if (sharedExtendedConfigFileWatchers) {
@@ -124804,7 +124995,7 @@ function createWatchProgram(host) {
   function getCurrentProgram() {
     return builderProgram && builderProgram.getProgramOrUndefined();
   }
-  function synchronizeProgram() {
+  function synchronizeProgram(forceAllFilesAsInvalidated = false) {
     writeLog(`Synchronizing program`);
     Debug.assert(compilerOptions);
     Debug.assert(rootFileNames);
@@ -124816,7 +125007,7 @@ function createWatchProgram(host) {
         resolutionCache.clear();
       }
     }
-    const hasInvalidatedResolutions = resolutionCache.createHasInvalidatedResolutions(customHasInvalidatedResolutions);
+    const hasInvalidatedResolutions = resolutionCache.createHasInvalidatedResolutions(forceAllFilesAsInvalidated ? returnTrue : customHasInvalidatedResolutions);
     const {
       originalReadFile,
       originalFileExists,
@@ -125022,13 +125213,19 @@ function createWatchProgram(host) {
     reloadLevel = 2 /* Full */;
     scheduleProgramUpdate();
   }
+  function scheduleResolutionReload() {
+    writeLog("Clearing resolutions");
+    resolutionCache.clear();
+    reloadLevel = 3 /* Resolutions */;
+    scheduleProgramUpdate();
+  }
   function updateProgramWithWatchStatus() {
     timerToUpdateProgram = void 0;
     reportFileChangeDetectedOnCreateProgram = true;
     updateProgram();
   }
   function updateProgram() {
-    var _a, _b, _c, _d;
+    var _a, _b, _c, _d, _e;
     switch (reloadLevel) {
       case 1 /* Partial */:
         (_a = perfLogger) == null ? void 0 : _a.logStartUpdateProgram("PartialConfigReload");
@@ -125038,12 +125235,19 @@ function createWatchProgram(host) {
         (_b = perfLogger) == null ? void 0 : _b.logStartUpdateProgram("FullConfigReload");
         reloadConfigFile();
         break;
+      case 3 /* Resolutions */:
+        (_c = perfLogger) == null ? void 0 : _c.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+        synchronizeProgram(
+          /*forceAllFilesAsInvalidated*/
+          true
+        );
+        break;
       default:
-        (_c = perfLogger) == null ? void 0 : _c.logStartUpdateProgram("SynchronizeProgram");
+        (_d = perfLogger) == null ? void 0 : _d.logStartUpdateProgram("SynchronizeProgram");
         synchronizeProgram();
         break;
     }
-    (_d = perfLogger) == null ? void 0 : _d.logStopUpdateProgram("Done");
+    (_e = perfLogger) == null ? void 0 : _e.logStopUpdateProgram("Done");
     return getCurrentBuilderProgram();
   }
   function reloadFileNamesFromConfigFile() {
@@ -130495,7 +130699,14 @@ function createPackageJsonImportFilter(fromFile, preferences, host) {
     return false;
   }
   function getNodeModulesPackageNameFromFileName(importedFileName, moduleSpecifierResolutionHost) {
-    if (!stringContains(importedFileName, "node_modules")) {
+    const pnpapi = getPnpApi(importedFileName);
+    if (pnpapi) {
+      const fromLocator = pnpapi.findPackageLocator(fromFile.fileName);
+      const toLocator = pnpapi.findPackageLocator(importedFileName);
+      if (!(fromLocator && toLocator)) {
+        return void 0;
+      }
+    } else if (!stringContains(importedFileName, "node_modules")) {
       return void 0;
     }
     const specifier = ts_moduleSpecifiers_exports.getNodeModulesPackageName(
@@ -130986,6 +131197,9 @@ function isImportableFile(program, from, to, preferences, packageJsonFilter, mod
   return hasImportablePath;
 }
 function isImportablePath(fromPath, toPath3, getCanonicalFileName, globalCachePath) {
+  if (getPnpApi(fromPath)) {
+    return isImportablePathPnp(fromPath, toPath3);
+  }
   const toNodeModules = forEachAncestorDirectory(toPath3, (ancestor) => getBaseFileName(ancestor) === "node_modules" ? ancestor : void 0);
   const toNodeModulesParent = toNodeModules && getDirectoryPath(getCanonicalFileName(toNodeModules));
   return toNodeModulesParent === void 0 || startsWith(getCanonicalFileName(fromPath), toNodeModulesParent) || !!globalCachePath && startsWith(getCanonicalFileName(globalCachePath), toNodeModulesParent);
@@ -153414,7 +153628,31 @@ function getCompletionEntriesForNonRelativeModules(fragment, scriptPath, mode, c
           );
         }
       };
-      if (fragmentDirectory && getResolvePackageJsonExports(compilerOptions)) {
+      const checkExports = (packageFile, packageDirectory, fragmentSubpath) => {
+        const packageJson = readJson(packageFile, host);
+        const exports = packageJson.exports;
+        if (exports) {
+          if (typeof exports !== "object" || exports === null) {
+            return true;
+          }
+          const keys = getOwnKeys(exports);
+          const conditions = mode === 99 /* ESNext */ ? ["node", "import", "types"] : ["node", "require", "types"];
+          addCompletionEntriesFromPathsOrExports(
+            result,
+            fragmentSubpath,
+            packageDirectory,
+            extensionOptions,
+            host,
+            keys,
+            (key) => singleElementArray(getPatternFromFirstMatchingCondition(exports[key], conditions)),
+            comparePatternKeys
+          );
+          return true;
+        }
+        return false;
+      };
+      const shouldCheckExports = fragmentDirectory && getResolvePackageJsonExports(compilerOptions);
+      if (shouldCheckExports) {
         const nodeModulesDirectoryLookup = ancestorLookup;
         ancestorLookup = (ancestor) => {
           const components = getPathComponents(fragment);
@@ -153433,32 +153671,52 @@ function getCompletionEntriesForNonRelativeModules(fragment, scriptPath, mode, c
           const packageDirectory = combinePaths(ancestor, "node_modules", packagePath);
           const packageFile = combinePaths(packageDirectory, "package.json");
           if (tryFileExists(host, packageFile)) {
-            const packageJson = readJson(packageFile, host);
-            const exports = packageJson.exports;
-            if (exports) {
-              if (typeof exports !== "object" || exports === null) {
-                return;
+            const fragmentSubpath = components.join("/") + (components.length && hasTrailingDirectorySeparator(fragment) ? "/" : "");
+            if (checkExports(packageFile, packageDirectory, fragmentSubpath)) {
+              return;
+            }
+          }
+          return nodeModulesDirectoryLookup(ancestor);
+        };
+      }
+      const pnpApi = getPnpApi(scriptPath);
+      if (pnpApi) {
+        const pathRegExp = /^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:@[^/]+\/)?[^/]+)\/*(.*|)$/;
+        const dependencyNameMatch = fragment.match(pathRegExp);
+        if (dependencyNameMatch) {
+          const [, dependencyName, subPath] = dependencyNameMatch;
+          let unqualified;
+          try {
+            unqualified = pnpApi.resolveToUnqualified(dependencyName, scriptPath, { considerBuiltins: false });
+          } catch {
+          }
+          if (unqualified) {
+            const packageDirectory = normalizePath(unqualified);
+            let shouldGetCompletions = true;
+            if (shouldCheckExports) {
+              const packageFile = combinePaths(packageDirectory, "package.json");
+              if (tryFileExists(host, packageFile) && checkExports(packageFile, packageDirectory, subPath)) {
+                shouldGetCompletions = false;
               }
-              const keys = getOwnKeys(exports);
-              const fragmentSubpath = components.join("/") + (components.length && hasTrailingDirectorySeparator(fragment) ? "/" : "");
-              const conditions = mode === 99 /* ESNext */ ? ["node", "import", "types"] : ["node", "require", "types"];
-              addCompletionEntriesFromPathsOrExports(
-                result,
-                fragmentSubpath,
+            }
+            if (shouldGetCompletions) {
+              getCompletionEntriesForDirectoryFragment(
+                subPath,
                 packageDirectory,
                 extensionOptions,
                 host,
-                keys,
-                (key) => singleElementArray(getPatternFromFirstMatchingCondition(exports[key], conditions)),
-                comparePatternKeys
+                /*moduleSpecifierIsRelative*/
+                false,
+                /*exclude*/
+                void 0,
+                result
               );
-              return;
             }
           }
-          return nodeModulesDirectoryLookup(ancestor);
-        };
+        }
+      } else {
+        forEachAncestorDirectory(scriptPath, ancestorLookup);
       }
-      forEachAncestorDirectory(scriptPath, ancestorLookup);
     }
   }
   return arrayFrom(result.values());
@@ -153585,9 +153843,15 @@ function getCompletionEntriesFromTypings(host, options, scriptPath, fragmentDire
   for (const root of typeRoots) {
     getCompletionEntriesFromDirectories(root);
   }
-  for (const packageJson of findPackageJsons(scriptPath, host)) {
-    const typesDir = combinePaths(getDirectoryPath(packageJson), "node_modules/@types");
-    getCompletionEntriesFromDirectories(typesDir);
+  if (getPnpApi(scriptPath)) {
+    for (const root of getPnpTypeRoots(scriptPath)) {
+      getCompletionEntriesFromDirectories(root);
+    }
+  } else {
+    for (const packageJson of findPackageJsons(scriptPath, host)) {
+      const typesDir = combinePaths(getDirectoryPath(packageJson), "node_modules/@types");
+      getCompletionEntriesFromDirectories(typesDir);
+    }
   }
   return result;
   function getCompletionEntriesFromDirectories(directory) {
@@ -174821,6 +175085,29 @@ var ConfiguredProject2 = class extends Project3 {
     return this.projectReferences;
   }
   updateReferences(refs) {
+    if (typeof process.versions.pnp !== `undefined`) {
+      const basePath = this.getCurrentDirectory();
+      const getPnpPath = (path) => {
+        try {
+          const pnpApi = getPnpApi(`${path}/`);
+          if (!pnpApi) {
+            return path;
+          }
+          const targetLocator = pnpApi.findPackageLocator(`${path}/`);
+          const { packageLocation } = pnpApi.getPackageInformation(targetLocator);
+          const request = combinePaths(targetLocator.name, getRelativePathFromDirectory(
+            packageLocation,
+            path,
+            /*ignoreCase*/
+            false
+          ));
+          return pnpApi.resolveToUnqualified(request, `${basePath}/`);
+        } catch {
+          return path;
+        }
+      };
+      refs = refs == null ? void 0 : refs.map((r) => ({ ...r, path: getPnpPath(r.path) }));
+    }
     this.projectReferences = refs;
     this.potentialProjectReferences = void 0;
   }
@@ -175392,6 +175679,7 @@ var _ProjectService = class {
       watchFile: returnNoopFileWatcher,
       watchDirectory: returnNoopFileWatcher
     } : getWatchFactory(this.host, watchLogLevel, log, getDetailWatchInfo2);
+    this.pnpWatcher = this.watchPnpFile();
   }
   toPath(fileName) {
     return toPath(fileName, this.currentDirectory, this.toCanonicalFileName);
@@ -177192,7 +177480,7 @@ Dynamic files must always be opened with service's current directory or service
     this.performanceEventHandler = performanceEventHandler;
   }
   setHostConfiguration(args) {
-    var _a;
+    var _a, _b;
     if (args.file) {
       const info = this.getScriptInfoForNormalizedPath(toNormalizedPath(args.file));
       if (info) {
@@ -177236,6 +177524,8 @@ Dynamic files must always be opened with service's current directory or service
       if (args.watchOptions) {
         this.hostConfiguration.watchOptions = (_a = convertWatchOptions(args.watchOptions)) == null ? void 0 : _a.watchOptions;
         this.logger.info(`Host watch options changed to ${JSON.stringify(this.hostConfiguration.watchOptions)}, it will be take effect for next watches.`);
+        (_b = this.pnpWatcher) == null ? void 0 : _b.close();
+        this.watchPnpFile();
       }
     }
   }
@@ -178147,6 +178437,29 @@ Dynamic files must always be opened with service's current directory or service
     });
   }
   /** @internal */
+  watchPnpFile() {
+    const pnpApiPath = getPnpApiPath(__filename);
+    if (!pnpApiPath) {
+      return;
+    }
+    return this.watchFactory.watchFile(
+      pnpApiPath,
+      () => {
+        this.forEachProject((project) => {
+          for (const info of project.getScriptInfos()) {
+            project.resolutionCache.invalidateResolutionOfFile(info.path);
+          }
+          project.markAsDirty();
+          updateProjectIfDirty(project);
+        });
+        this.delayEnsureProjectForOpenFiles();
+      },
+      250 /* Low */,
+      this.hostConfiguration.watchOptions,
+      WatchType.ConfigFile
+    );
+  }
+  /** @internal */
   watchPackageJsonFile(path) {
     const watchers = this.packageJsonFilesMap || (this.packageJsonFilesMap = /* @__PURE__ */ new Map());
     if (!watchers.has(path)) {
@@ -182675,6 +182988,10 @@ function initializeNodeSystem() {
         }
         try {
           const args = [combinePaths(libDirectory, "watchGuard.js"), path];
+          const pnpApiPath = getPnpApiPath(__filename);
+          if (pnpApiPath) {
+            args.unshift("-r", pnpApiPath);
+          }
           if (logger.hasLevel(3 /* verbose */)) {
             logger.info(`Starting ${process.execPath} with args:${stringifyIndented(args)}`);
           }
@@ -182887,6 +183204,10 @@ function startNodeSession(options, logger, cancellationToken) {
           break;
         }
       }
+      const pnpApiPath = getPnpApiPath(__filename);
+      if (pnpApiPath) {
+        execArgv.unshift("-r", pnpApiPath);
+      }
       const typingsInstaller = combinePaths(getDirectoryPath(sys.getExecutingFilePath()), "typingsInstaller.js");
       this.installer = childProcess.fork(typingsInstaller, args, { execArgv });
       this.installer.on("message", (m) => this.handleMessage(m));
diff --git a/lib/tsserverlibrary.js b/lib/tsserverlibrary.js
index 0d1d2fcd0..85552699b 100644
semver exclusivity >=5.1.0-beta
--- a/lib/tsserverlibrary.js
+++ b/lib/tsserverlibrary.js
@@ -6345,6 +6345,9 @@ ${lanes.join("\n")}
             return Buffer2.from && Buffer2.from !== Int8Array.from ? Buffer2.from(input, encoding) : new Buffer2(input, encoding);
           }
           function isFileSystemCaseSensitive() {
+            if (typeof process.versions.pnp !== `undefined`) {
+              return true;
+            }
             if (platform === "win32" || platform === "win64") {
               return false;
             }
@@ -38688,6 +38691,73 @@ ${lanes.join("\n")}
     }
   });
 
+  // src/compiler/pnp.ts
+  function getPnpApi(path) {
+    if (typeof process.versions.pnp === "undefined") {
+      return;
+    }
+    const { findPnpApi } =   require("module");
+    if (findPnpApi) {
+      return findPnpApi(`${path}/`);
+    }
+  }
+  function getPnpApiPath(path) {
+    var _a;
+    return (_a = getPnpApi(path)) == null ? void 0 : _a.resolveRequest(
+      "pnpapi",
+      /*issuer*/
+      null
+    );
+  }
+  function getPnpTypeRoots(currentDirectory) {
+    const pnpApi = getPnpApi(currentDirectory);
+    if (!pnpApi) {
+      return [];
+    }
+    currentDirectory = resolvePath(currentDirectory);
+    const currentPackage = pnpApi.findPackageLocator(`${currentDirectory}/`);
+    if (!currentPackage) {
+      return [];
+    }
+    const { packageDependencies } = pnpApi.getPackageInformation(currentPackage);
+    const typeRoots = [];
+    for (const [name, referencish] of Array.from(packageDependencies.entries())) {
+      if (name.startsWith(`@types/`) && referencish !== null) {
+        const dependencyLocator = pnpApi.getLocator(name, referencish);
+        const { packageLocation } = pnpApi.getPackageInformation(dependencyLocator);
+        typeRoots.push(getDirectoryPath(packageLocation));
+      }
+    }
+    return typeRoots;
+  }
+  function isImportablePathPnp(fromPath, toPath3) {
+    const pnpApi = getPnpApi(fromPath);
+    const fromLocator = pnpApi.findPackageLocator(fromPath);
+    const toLocator = pnpApi.findPackageLocator(toPath3);
+    if (toLocator === null) {
+      return false;
+    }
+    const fromInfo = pnpApi.getPackageInformation(fromLocator);
+    const toReference = fromInfo.packageDependencies.get(toLocator.name);
+    if (toReference) {
+      return toReference === toLocator.reference;
+    }
+    for (const reference of fromInfo.packageDependencies.values()) {
+      if (Array.isArray(reference)) {
+        if (reference[0] === toLocator.name && reference[1] === toLocator.reference) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+  var init_pnp = __esm({
+    "src/compiler/pnp.ts"() {
+      "use strict";
+      init_path();
+    }
+  });
+
   // src/compiler/moduleNameResolver.ts
   function trace(host) {
     host.trace(formatMessage.apply(void 0, arguments));
@@ -38897,7 +38967,7 @@ ${lanes.join("\n")}
       return getDefaultTypeRoots(currentDirectory);
     }
   }
-  function getDefaultTypeRoots(currentDirectory) {
+  function getNodeModulesTypeRoots(currentDirectory) {
     let typeRoots;
     forEachAncestorDirectory(normalizePath(currentDirectory), (directory) => {
       const atTypes = combinePaths(directory, nodeModulesAtTypes);
@@ -38909,6 +38979,15 @@ ${lanes.join("\n")}
     const useCaseSensitiveFileNames = typeof host.useCaseSensitiveFileNames === "function" ? host.useCaseSensitiveFileNames() : host.useCaseSensitiveFileNames;
     return comparePaths(path1, path2, !useCaseSensitiveFileNames) === 0 /* EqualTo */;
   }
+  function getDefaultTypeRoots(currentDirectory) {
+    const nmTypes = getNodeModulesTypeRoots(currentDirectory);
+    const pnpTypes = getPnpTypeRoots(currentDirectory);
+    if (nmTypes == null ? void 0 : nmTypes.length) {
+      return [...nmTypes, ...pnpTypes];
+    } else if (pnpTypes.length) {
+      return pnpTypes;
+    }
+  }
   function getOriginalAndResolvedFileName(fileName, host, traceEnabled) {
     const resolvedFileName = realPath(fileName, host, traceEnabled);
     const pathsAreEqual = arePathsEqual(fileName, resolvedFileName, host);
@@ -39153,6 +39232,21 @@ ${lanes.join("\n")}
   }
   function resolvePackageNameToPackageJson(packageName, containingDirectory, options, host, cache) {
     const moduleResolutionState = getTemporaryModuleResolutionState(cache == null ? void 0 : cache.getPackageJsonInfoCache(), host, options);
+    const pnpapi = getPnpApi(containingDirectory);
+    if (pnpapi) {
+      try {
+        const resolution = pnpapi.resolveToUnqualified(packageName, `${containingDirectory}/`, { considerBuiltins: false });
+        const candidate = normalizeSlashes(resolution).replace(/\/$/, "");
+        return getPackageJsonInfo(
+          candidate,
+          /*onlyRecordFailures*/
+          false,
+          moduleResolutionState
+        );
+      } catch {
+        return;
+      }
+    }
     return forEachAncestorDirectory(containingDirectory, (ancestorDirectory) => {
       if (getBaseFileName(ancestorDirectory) !== "node_modules") {
         const nodeModulesFolder = combinePaths(ancestorDirectory, "node_modules");
@@ -40892,7 +40986,15 @@ ${lanes.join("\n")}
       return lookup(secondaryExtensions);
     }
     function lookup(extensions2) {
-      return forEachAncestorDirectory(normalizeSlashes(directory), (ancestorDirectory) => {
+      const issuer = normalizeSlashes(directory);
+      if (getPnpApi(issuer)) {
+        const resolutionFromCache = tryFindNonRelativeModuleNameInCache(cache, moduleName, mode, issuer, redirectedReference, state);
+        if (resolutionFromCache) {
+          return resolutionFromCache;
+        }
+        return toSearchResult(loadModuleFromImmediateNodeModulesDirectoryPnP(extensions2, moduleName, issuer, state, typesScopeOnly, cache, redirectedReference));
+      }
+      return forEachAncestorDirectory(issuer, (ancestorDirectory) => {
         if (getBaseFileName(ancestorDirectory) !== "node_modules") {
           const resolutionFromCache = tryFindNonRelativeModuleNameInCache(cache, moduleName, mode, ancestorDirectory, redirectedReference, state);
           if (resolutionFromCache) {
@@ -40927,11 +41029,40 @@ ${lanes.join("\n")}
       return loadModuleFromSpecificNodeModulesDirectory(4 /* Declaration */, mangleScopedPackageNameWithTrace(moduleName, state), nodeModulesAtTypes2, nodeModulesAtTypesExists, state, cache, redirectedReference);
     }
   }
+  function loadModuleFromImmediateNodeModulesDirectoryPnP(extensions, moduleName, directory, state, typesScopeOnly, cache, redirectedReference) {
+    const issuer = normalizeSlashes(directory);
+    if (!typesScopeOnly) {
+      const packageResult = tryLoadModuleUsingPnpResolution(extensions, moduleName, issuer, state, cache, redirectedReference);
+      if (packageResult) {
+        return packageResult;
+      }
+    }
+    if (extensions & 4 /* Declaration */) {
+      return tryLoadModuleUsingPnpResolution(4 /* Declaration */, `@types/${mangleScopedPackageNameWithTrace(moduleName, state)}`, issuer, state, cache, redirectedReference);
+    }
+  }
   function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference) {
-    var _a, _b;
     const candidate = normalizePath(combinePaths(nodeModulesDirectory, moduleName));
     const { packageName, rest } = parsePackageName(moduleName);
     const packageDirectory = combinePaths(nodeModulesDirectory, packageName);
+    return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory);
+  }
+  function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state, cache, redirectedReference) {
+    const candidate = normalizePath(combinePaths(packageDirectory, rest));
+    return loadModuleFromSpecificNodeModulesDirectoryImpl(
+      extensions,
+      /*nodeModulesDirectoryExists*/
+      true,
+      state,
+      cache,
+      redirectedReference,
+      candidate,
+      rest,
+      packageDirectory
+    );
+  }
+  function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory) {
+    var _a, _b;
     let rootPackageInfo;
     let packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
     if (rest !== "" && packageInfo && (!(state.features & 8 /* Exports */) || !hasProperty(((_a = rootPackageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state)) == null ? void 0 : _a.contents.packageJsonContent) ?? emptyArray, "exports"))) {
@@ -41224,11 +41355,24 @@ ${lanes.join("\n")}
       trace(state.host, diagnostic, ...args);
     }
   }
+  function loadPnpPackageResolution(packageName, containingDirectory) {
+    try {
+      const resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, `${containingDirectory}/`, { considerBuiltins: false });
+      return normalizeSlashes(resolution).replace(/\/$/, "");
+    } catch {
+    }
+  }
+  function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference) {
+    const { packageName, rest } = parsePackageName(moduleName);
+    const packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+    return packageResolution ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state, cache, redirectedReference) : void 0;
+  }
   var typeScriptVersion, nodeModulesAtTypes, NodeResolutionFeatures, nodeModulesPathPart, mangledScopedPackageSeparator;
   var init_moduleNameResolver = __esm({
     "src/compiler/moduleNameResolver.ts"() {
       "use strict";
       init_ts2();
+      init_pnp();
       nodeModulesAtTypes = combinePaths("node_modules", "@types");
       NodeResolutionFeatures = /* @__PURE__ */ ((NodeResolutionFeatures2) => {
         NodeResolutionFeatures2[NodeResolutionFeatures2["None"] = 0] = "None";
@@ -44625,7 +44769,15 @@ ${lanes.join("\n")}
       /*preferSymlinks*/
       true,
       (path, isRedirect) => {
-        const isInNodeModules = pathContainsNodeModules(path);
+        let isInNodeModules = pathContainsNodeModules(path);
+        const pnpapi = getPnpApi(path);
+        if (!isInNodeModules && pnpapi) {
+          const fromLocator = pnpapi.findPackageLocator(importingFileName);
+          const toLocator = pnpapi.findPackageLocator(path);
+          if (fromLocator && toLocator && fromLocator !== toLocator) {
+            isInNodeModules = true;
+          }
+        }
         allFileNames.set(path, { path: getCanonicalFileName(path), isRedirect, isInNodeModules });
         importedFileFromNodeModules = importedFileFromNodeModules || isInNodeModules;
       }
@@ -44817,7 +44969,41 @@ ${lanes.join("\n")}
     if (!host.fileExists || !host.readFile) {
       return void 0;
     }
-    const parts = getNodeModulePathParts(path);
+    let parts = getNodeModulePathParts(path);
+    let pnpPackageName;
+    const pnpApi = getPnpApi(path);
+    if (pnpApi) {
+      const fromLocator = pnpApi.findPackageLocator(importingSourceFile.fileName);
+      const toLocator = pnpApi.findPackageLocator(path);
+      if (fromLocator === toLocator) {
+        return void 0;
+      }
+      if (fromLocator && toLocator) {
+        const fromInfo = pnpApi.getPackageInformation(fromLocator);
+        if (toLocator.reference === fromInfo.packageDependencies.get(toLocator.name)) {
+          pnpPackageName = toLocator.name;
+        } else {
+          for (const [name, reference] of fromInfo.packageDependencies) {
+            if (Array.isArray(reference)) {
+              if (reference[0] === toLocator.name && reference[1] === toLocator.reference) {
+                pnpPackageName = name;
+                break;
+              }
+            }
+          }
+        }
+        if (!parts) {
+          const toInfo = pnpApi.getPackageInformation(toLocator);
+          parts = {
+            topLevelNodeModulesIndex: void 0,
+            topLevelPackageNameIndex: void 0,
+            // The last character from packageLocation is the trailing "/", we want to point to it
+            packageRootIndex: toInfo.packageLocation.length - 1,
+            fileNameIndex: path.lastIndexOf(`/`)
+          };
+        }
+      }
+    }
     if (!parts) {
       return void 0;
     }
@@ -44855,14 +45041,16 @@ ${lanes.join("\n")}
     if (isRedirect && !isPackageRootPath) {
       return void 0;
     }
-    const globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-    const pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-    if (!(startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-      return void 0;
+    if (typeof process.versions.pnp === "undefined") {
+      const globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+      const pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+      if (!(startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+        return void 0;
+      }
     }
-    const nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-    const packageName = getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
-    return getEmitModuleResolutionKind(options) === 1 /* Classic */ && packageName === nodeModulesDirectoryName ? void 0 : packageName;
+    const nodeModulesDirectoryName = typeof pnpPackageName !== "undefined" ? pnpPackageName + moduleSpecifier.substring(parts.packageRootIndex) : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+    const packageNameFromPath = getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+    return getEmitModuleResolutionKind(options) === 1 /* Classic */ && packageNameFromPath === nodeModulesDirectoryName ? void 0 : packageNameFromPath;
     function tryDirectoryWithPackageJson(packageRootIndex) {
       var _a, _b;
       const packageRootPath = path.substring(0, packageRootIndex);
@@ -44875,9 +45063,9 @@ ${lanes.join("\n")}
         const importMode = overrideMode || importingSourceFile.impliedNodeFormat;
         if (getResolvePackageJsonExports(options)) {
           const nodeModulesDirectoryName2 = packageRootPath.substring(parts.topLevelPackageNameIndex + 1);
-          const packageName2 = getPackageNameFromTypesPackageName(nodeModulesDirectoryName2);
+          const packageName = getPackageNameFromTypesPackageName(pnpPackageName ? pnpPackageName : nodeModulesDirectoryName2);
           const conditions = getConditions(options, importMode === 99 /* ESNext */);
-          const fromExports = packageJsonContent.exports ? tryGetModuleNameFromExports(options, path, packageRootPath, packageName2, packageJsonContent.exports, conditions) : void 0;
+          const fromExports = packageJsonContent.exports ? tryGetModuleNameFromExports(options, path, packageRootPath, packageName, packageJsonContent.exports, conditions) : void 0;
           if (fromExports) {
             const withJsExtension = !hasTSFileExtension(fromExports.moduleFileToTry) ? fromExports : { moduleFileToTry: removeFileExtension(fromExports.moduleFileToTry) + tryGetJSExtensionForFile(fromExports.moduleFileToTry, options) };
             return { ...withJsExtension, verbatimFromExports: true };
@@ -45023,6 +45211,7 @@ ${lanes.join("\n")}
     "src/compiler/moduleSpecifiers.ts"() {
       "use strict";
       init_ts2();
+      init_pnp();
     }
   });
 
@@ -115572,6 +115761,7 @@ ${lanes.join("\n")}
         ConfigFileProgramReloadLevel2[ConfigFileProgramReloadLevel2["None"] = 0] = "None";
         ConfigFileProgramReloadLevel2[ConfigFileProgramReloadLevel2["Partial"] = 1] = "Partial";
         ConfigFileProgramReloadLevel2[ConfigFileProgramReloadLevel2["Full"] = 2] = "Full";
+        ConfigFileProgramReloadLevel2[ConfigFileProgramReloadLevel2["Resolutions"] = 3] = "Resolutions";
         return ConfigFileProgramReloadLevel2;
       })(ConfigFileProgramReloadLevel || {});
       WatchLogLevel = /* @__PURE__ */ ((WatchLogLevel2) => {
@@ -122881,6 +123071,11 @@ ${lanes.join("\n")}
     if (configFileName) {
       configFileWatcher = watchFile2(configFileName, scheduleProgramReload, 2e3 /* High */, watchOptions, WatchType.ConfigFile);
     }
+    let pnpFileWatcher;
+    const pnpApiPath = getPnpApiPath(__filename);
+    if (pnpApiPath) {
+      pnpFileWatcher = watchFile2(pnpApiPath, scheduleResolutionReload, 2e3 /* High */, watchOptions, WatchType.ConfigFile);
+    }
     const compilerHost = createCompilerHostFromProgramHost(host, () => compilerOptions, directoryStructureHost);
     setGetSourceFileAsHashVersioned(compilerHost);
     const getNewSourceFile = compilerHost.getSourceFile;
@@ -122942,6 +123137,10 @@ ${lanes.join("\n")}
         configFileWatcher.close();
         configFileWatcher = void 0;
       }
+      if (pnpFileWatcher) {
+        pnpFileWatcher.close();
+        pnpFileWatcher = void 0;
+      }
       extendedConfigCache == null ? void 0 : extendedConfigCache.clear();
       extendedConfigCache = void 0;
       if (sharedExtendedConfigFileWatchers) {
@@ -122974,7 +123173,7 @@ ${lanes.join("\n")}
     function getCurrentProgram() {
       return builderProgram && builderProgram.getProgramOrUndefined();
     }
-    function synchronizeProgram() {
+    function synchronizeProgram(forceAllFilesAsInvalidated = false) {
       writeLog(`Synchronizing program`);
       Debug.assert(compilerOptions);
       Debug.assert(rootFileNames);
@@ -122986,7 +123185,7 @@ ${lanes.join("\n")}
           resolutionCache.clear();
         }
       }
-      const hasInvalidatedResolutions = resolutionCache.createHasInvalidatedResolutions(customHasInvalidatedResolutions);
+      const hasInvalidatedResolutions = resolutionCache.createHasInvalidatedResolutions(forceAllFilesAsInvalidated ? returnTrue : customHasInvalidatedResolutions);
       const {
         originalReadFile,
         originalFileExists,
@@ -123192,13 +123391,19 @@ ${lanes.join("\n")}
       reloadLevel = 2 /* Full */;
       scheduleProgramUpdate();
     }
+    function scheduleResolutionReload() {
+      writeLog("Clearing resolutions");
+      resolutionCache.clear();
+      reloadLevel = 3 /* Resolutions */;
+      scheduleProgramUpdate();
+    }
     function updateProgramWithWatchStatus() {
       timerToUpdateProgram = void 0;
       reportFileChangeDetectedOnCreateProgram = true;
       updateProgram();
     }
     function updateProgram() {
-      var _a, _b, _c, _d;
+      var _a, _b, _c, _d, _e;
       switch (reloadLevel) {
         case 1 /* Partial */:
           (_a = perfLogger) == null ? void 0 : _a.logStartUpdateProgram("PartialConfigReload");
@@ -123208,12 +123413,19 @@ ${lanes.join("\n")}
           (_b = perfLogger) == null ? void 0 : _b.logStartUpdateProgram("FullConfigReload");
           reloadConfigFile();
           break;
+        case 3 /* Resolutions */:
+          (_c = perfLogger) == null ? void 0 : _c.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+          synchronizeProgram(
+            /*forceAllFilesAsInvalidated*/
+            true
+          );
+          break;
         default:
-          (_c = perfLogger) == null ? void 0 : _c.logStartUpdateProgram("SynchronizeProgram");
+          (_d = perfLogger) == null ? void 0 : _d.logStartUpdateProgram("SynchronizeProgram");
           synchronizeProgram();
           break;
       }
-      (_d = perfLogger) == null ? void 0 : _d.logStopUpdateProgram("Done");
+      (_e = perfLogger) == null ? void 0 : _e.logStopUpdateProgram("Done");
       return getCurrentBuilderProgram();
     }
     function reloadFileNamesFromConfigFile() {
@@ -123499,6 +123711,7 @@ ${lanes.join("\n")}
     "src/compiler/watchPublic.ts"() {
       "use strict";
       init_ts2();
+      init_pnp();
     }
   });
 
@@ -128764,7 +128977,14 @@ ${lanes.join("\n")}
       return false;
     }
     function getNodeModulesPackageNameFromFileName(importedFileName, moduleSpecifierResolutionHost) {
-      if (!stringContains(importedFileName, "node_modules")) {
+      const pnpapi = getPnpApi(importedFileName);
+      if (pnpapi) {
+        const fromLocator = pnpapi.findPackageLocator(fromFile.fileName);
+        const toLocator = pnpapi.findPackageLocator(importedFileName);
+        if (!(fromLocator && toLocator)) {
+          return void 0;
+        }
+      } else if (!stringContains(importedFileName, "node_modules")) {
         return void 0;
       }
       const specifier = ts_moduleSpecifiers_exports.getNodeModulesPackageName(
@@ -129026,6 +129246,7 @@ ${lanes.join("\n")}
   var init_utilities4 = __esm({
     "src/services/utilities.ts"() {
       "use strict";
+      init_pnp();
       init_ts4();
       scanner = createScanner(
         99 /* Latest */,
@@ -129298,6 +129519,9 @@ ${lanes.join("\n")}
     return hasImportablePath;
   }
   function isImportablePath(fromPath, toPath3, getCanonicalFileName, globalCachePath) {
+    if (getPnpApi(fromPath)) {
+      return isImportablePathPnp(fromPath, toPath3);
+    }
     const toNodeModules = forEachAncestorDirectory(toPath3, (ancestor) => getBaseFileName(ancestor) === "node_modules" ? ancestor : void 0);
     const toNodeModulesParent = toNodeModules && getDirectoryPath(getCanonicalFileName(toNodeModules));
     return toNodeModulesParent === void 0 || startsWith(getCanonicalFileName(fromPath), toNodeModulesParent) || !!globalCachePath && startsWith(getCanonicalFileName(globalCachePath), toNodeModulesParent);
@@ -129481,6 +129705,7 @@ ${lanes.join("\n")}
   var init_exportInfoMap = __esm({
     "src/services/exportInfoMap.ts"() {
       "use strict";
+      init_pnp();
       init_ts4();
       ImportKind = /* @__PURE__ */ ((ImportKind2) => {
         ImportKind2[ImportKind2["Named"] = 0] = "Named";
@@ -152497,7 +152722,31 @@ ${lanes.join("\n")}
             );
           }
         };
-        if (fragmentDirectory && getResolvePackageJsonExports(compilerOptions)) {
+        const checkExports = (packageFile, packageDirectory, fragmentSubpath) => {
+          const packageJson = readJson(packageFile, host);
+          const exports = packageJson.exports;
+          if (exports) {
+            if (typeof exports !== "object" || exports === null) {
+              return true;
+            }
+            const keys = getOwnKeys(exports);
+            const conditions = mode === 99 /* ESNext */ ? ["node", "import", "types"] : ["node", "require", "types"];
+            addCompletionEntriesFromPathsOrExports(
+              result,
+              fragmentSubpath,
+              packageDirectory,
+              extensionOptions,
+              host,
+              keys,
+              (key) => singleElementArray(getPatternFromFirstMatchingCondition(exports[key], conditions)),
+              comparePatternKeys
+            );
+            return true;
+          }
+          return false;
+        };
+        const shouldCheckExports = fragmentDirectory && getResolvePackageJsonExports(compilerOptions);
+        if (shouldCheckExports) {
           const nodeModulesDirectoryLookup = ancestorLookup;
           ancestorLookup = (ancestor) => {
             const components = getPathComponents(fragment);
@@ -152516,32 +152765,52 @@ ${lanes.join("\n")}
             const packageDirectory = combinePaths(ancestor, "node_modules", packagePath);
             const packageFile = combinePaths(packageDirectory, "package.json");
             if (tryFileExists(host, packageFile)) {
-              const packageJson = readJson(packageFile, host);
-              const exports = packageJson.exports;
-              if (exports) {
-                if (typeof exports !== "object" || exports === null) {
-                  return;
+              const fragmentSubpath = components.join("/") + (components.length && hasTrailingDirectorySeparator(fragment) ? "/" : "");
+              if (checkExports(packageFile, packageDirectory, fragmentSubpath)) {
+                return;
+              }
+            }
+            return nodeModulesDirectoryLookup(ancestor);
+          };
+        }
+        const pnpApi = getPnpApi(scriptPath);
+        if (pnpApi) {
+          const pathRegExp = /^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:@[^/]+\/)?[^/]+)\/*(.*|)$/;
+          const dependencyNameMatch = fragment.match(pathRegExp);
+          if (dependencyNameMatch) {
+            const [, dependencyName, subPath] = dependencyNameMatch;
+            let unqualified;
+            try {
+              unqualified = pnpApi.resolveToUnqualified(dependencyName, scriptPath, { considerBuiltins: false });
+            } catch {
+            }
+            if (unqualified) {
+              const packageDirectory = normalizePath(unqualified);
+              let shouldGetCompletions = true;
+              if (shouldCheckExports) {
+                const packageFile = combinePaths(packageDirectory, "package.json");
+                if (tryFileExists(host, packageFile) && checkExports(packageFile, packageDirectory, subPath)) {
+                  shouldGetCompletions = false;
                 }
-                const keys = getOwnKeys(exports);
-                const fragmentSubpath = components.join("/") + (components.length && hasTrailingDirectorySeparator(fragment) ? "/" : "");
-                const conditions = mode === 99 /* ESNext */ ? ["node", "import", "types"] : ["node", "require", "types"];
-                addCompletionEntriesFromPathsOrExports(
-                  result,
-                  fragmentSubpath,
+              }
+              if (shouldGetCompletions) {
+                getCompletionEntriesForDirectoryFragment(
+                  subPath,
                   packageDirectory,
                   extensionOptions,
                   host,
-                  keys,
-                  (key) => singleElementArray(getPatternFromFirstMatchingCondition(exports[key], conditions)),
-                  comparePatternKeys
+                  /*moduleSpecifierIsRelative*/
+                  false,
+                  /*exclude*/
+                  void 0,
+                  result
                 );
-                return;
               }
             }
-            return nodeModulesDirectoryLookup(ancestor);
-          };
+          }
+        } else {
+          forEachAncestorDirectory(scriptPath, ancestorLookup);
         }
-        forEachAncestorDirectory(scriptPath, ancestorLookup);
       }
     }
     return arrayFrom(result.values());
@@ -152668,9 +152937,15 @@ ${lanes.join("\n")}
     for (const root of typeRoots) {
       getCompletionEntriesFromDirectories(root);
     }
-    for (const packageJson of findPackageJsons(scriptPath, host)) {
-      const typesDir = combinePaths(getDirectoryPath(packageJson), "node_modules/@types");
-      getCompletionEntriesFromDirectories(typesDir);
+    if (getPnpApi(scriptPath)) {
+      for (const root of getPnpTypeRoots(scriptPath)) {
+        getCompletionEntriesFromDirectories(root);
+      }
+    } else {
+      for (const packageJson of findPackageJsons(scriptPath, host)) {
+        const typesDir = combinePaths(getDirectoryPath(packageJson), "node_modules/@types");
+        getCompletionEntriesFromDirectories(typesDir);
+      }
     }
     return result;
     function getCompletionEntriesFromDirectories(directory) {
@@ -152753,6 +153028,7 @@ ${lanes.join("\n")}
   var init_stringCompletions = __esm({
     "src/services/stringCompletions.ts"() {
       "use strict";
+      init_pnp();
       init_ts4();
       init_ts_Completions();
       kindPrecedence = {
@@ -170163,6 +170439,7 @@ ${options.prefix}` : "\n" : options.prefix
   var init_project = __esm({
     "src/server/project.ts"() {
       "use strict";
+      init_pnp();
       init_ts7();
       init_ts7();
       init_ts_server3();
@@ -172160,6 +172437,29 @@ ${options.prefix}` : "\n" : options.prefix
           return this.projectReferences;
         }
         updateReferences(refs) {
+          if (typeof process.versions.pnp !== `undefined`) {
+            const basePath = this.getCurrentDirectory();
+            const getPnpPath = (path) => {
+              try {
+                const pnpApi = getPnpApi(`${path}/`);
+                if (!pnpApi) {
+                  return path;
+                }
+                const targetLocator = pnpApi.findPackageLocator(`${path}/`);
+                const { packageLocation } = pnpApi.getPackageInformation(targetLocator);
+                const request = combinePaths(targetLocator.name, getRelativePathFromDirectory(
+                  packageLocation,
+                  path,
+                  /*ignoreCase*/
+                  false
+                ));
+                return pnpApi.resolveToUnqualified(request, `${basePath}/`);
+              } catch {
+                return path;
+              }
+            };
+            refs = refs == null ? void 0 : refs.map((r) => ({ ...r, path: getPnpPath(r.path) }));
+          }
           this.projectReferences = refs;
           this.potentialProjectReferences = void 0;
         }
@@ -172544,6 +172844,7 @@ ${options.prefix}` : "\n" : options.prefix
   var init_editorServices = __esm({
     "src/server/editorServices.ts"() {
       "use strict";
+      init_pnp();
       init_ts7();
       init_ts_server3();
       maxProgramSizeForNonTsFiles = 20 * 1024 * 1024;
@@ -172757,6 +173058,7 @@ ${options.prefix}` : "\n" : options.prefix
             watchFile: returnNoopFileWatcher,
             watchDirectory: returnNoopFileWatcher
           } : getWatchFactory(this.host, watchLogLevel, log, getDetailWatchInfo2);
+          this.pnpWatcher = this.watchPnpFile();
         }
         toPath(fileName) {
           return toPath(fileName, this.currentDirectory, this.toCanonicalFileName);
@@ -174557,7 +174859,7 @@ Dynamic files must always be opened with service's current directory or service
           this.performanceEventHandler = performanceEventHandler;
         }
         setHostConfiguration(args) {
-          var _a;
+          var _a, _b;
           if (args.file) {
             const info = this.getScriptInfoForNormalizedPath(toNormalizedPath(args.file));
             if (info) {
@@ -174601,6 +174903,8 @@ Dynamic files must always be opened with service's current directory or service
             if (args.watchOptions) {
               this.hostConfiguration.watchOptions = (_a = convertWatchOptions(args.watchOptions)) == null ? void 0 : _a.watchOptions;
               this.logger.info(`Host watch options changed to ${JSON.stringify(this.hostConfiguration.watchOptions)}, it will be take effect for next watches.`);
+              (_b = this.pnpWatcher) == null ? void 0 : _b.close();
+              this.watchPnpFile();
             }
           }
         }
@@ -175512,6 +175816,29 @@ Dynamic files must always be opened with service's current directory or service
           });
         }
         /** @internal */
+        watchPnpFile() {
+          const pnpApiPath = getPnpApiPath(__filename);
+          if (!pnpApiPath) {
+            return;
+          }
+          return this.watchFactory.watchFile(
+            pnpApiPath,
+            () => {
+              this.forEachProject((project) => {
+                for (const info of project.getScriptInfos()) {
+                  project.resolutionCache.invalidateResolutionOfFile(info.path);
+                }
+                project.markAsDirty();
+                updateProjectIfDirty(project);
+              });
+              this.delayEnsureProjectForOpenFiles();
+            },
+            250 /* Low */,
+            this.hostConfiguration.watchOptions,
+            WatchType.ConfigFile
+          );
+        }
+        /** @internal */
         watchPackageJsonFile(path) {
           const watchers = this.packageJsonFilesMap || (this.packageJsonFilesMap = /* @__PURE__ */ new Map());
           if (!watchers.has(path)) {
diff --git a/lib/typescript.js b/lib/typescript.js
index 1b800b1d0..377a93466 100644
semver exclusivity >=5.1.0-beta
--- a/lib/typescript.js
+++ b/lib/typescript.js
@@ -6345,6 +6345,9 @@ ${lanes.join("\n")}
             return Buffer2.from && Buffer2.from !== Int8Array.from ? Buffer2.from(input, encoding) : new Buffer2(input, encoding);
           }
           function isFileSystemCaseSensitive() {
+            if (typeof process.versions.pnp !== `undefined`) {
+              return true;
+            }
             if (platform === "win32" || platform === "win64") {
               return false;
             }
@@ -38688,6 +38691,73 @@ ${lanes.join("\n")}
     }
   });
 
+  // src/compiler/pnp.ts
+  function getPnpApi(path) {
+    if (typeof process.versions.pnp === "undefined") {
+      return;
+    }
+    const { findPnpApi } =   require("module");
+    if (findPnpApi) {
+      return findPnpApi(`${path}/`);
+    }
+  }
+  function getPnpApiPath(path) {
+    var _a;
+    return (_a = getPnpApi(path)) == null ? void 0 : _a.resolveRequest(
+      "pnpapi",
+      /*issuer*/
+      null
+    );
+  }
+  function getPnpTypeRoots(currentDirectory) {
+    const pnpApi = getPnpApi(currentDirectory);
+    if (!pnpApi) {
+      return [];
+    }
+    currentDirectory = resolvePath(currentDirectory);
+    const currentPackage = pnpApi.findPackageLocator(`${currentDirectory}/`);
+    if (!currentPackage) {
+      return [];
+    }
+    const { packageDependencies } = pnpApi.getPackageInformation(currentPackage);
+    const typeRoots = [];
+    for (const [name, referencish] of Array.from(packageDependencies.entries())) {
+      if (name.startsWith(`@types/`) && referencish !== null) {
+        const dependencyLocator = pnpApi.getLocator(name, referencish);
+        const { packageLocation } = pnpApi.getPackageInformation(dependencyLocator);
+        typeRoots.push(getDirectoryPath(packageLocation));
+      }
+    }
+    return typeRoots;
+  }
+  function isImportablePathPnp(fromPath, toPath3) {
+    const pnpApi = getPnpApi(fromPath);
+    const fromLocator = pnpApi.findPackageLocator(fromPath);
+    const toLocator = pnpApi.findPackageLocator(toPath3);
+    if (toLocator === null) {
+      return false;
+    }
+    const fromInfo = pnpApi.getPackageInformation(fromLocator);
+    const toReference = fromInfo.packageDependencies.get(toLocator.name);
+    if (toReference) {
+      return toReference === toLocator.reference;
+    }
+    for (const reference of fromInfo.packageDependencies.values()) {
+      if (Array.isArray(reference)) {
+        if (reference[0] === toLocator.name && reference[1] === toLocator.reference) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+  var init_pnp = __esm({
+    "src/compiler/pnp.ts"() {
+      "use strict";
+      init_path();
+    }
+  });
+
   // src/compiler/moduleNameResolver.ts
   function trace(host) {
     host.trace(formatMessage.apply(void 0, arguments));
@@ -38897,7 +38967,7 @@ ${lanes.join("\n")}
       return getDefaultTypeRoots(currentDirectory);
     }
   }
-  function getDefaultTypeRoots(currentDirectory) {
+  function getNodeModulesTypeRoots(currentDirectory) {
     let typeRoots;
     forEachAncestorDirectory(normalizePath(currentDirectory), (directory) => {
       const atTypes = combinePaths(directory, nodeModulesAtTypes);
@@ -38909,6 +38979,15 @@ ${lanes.join("\n")}
     const useCaseSensitiveFileNames = typeof host.useCaseSensitiveFileNames === "function" ? host.useCaseSensitiveFileNames() : host.useCaseSensitiveFileNames;
     return comparePaths(path1, path2, !useCaseSensitiveFileNames) === 0 /* EqualTo */;
   }
+  function getDefaultTypeRoots(currentDirectory) {
+    const nmTypes = getNodeModulesTypeRoots(currentDirectory);
+    const pnpTypes = getPnpTypeRoots(currentDirectory);
+    if (nmTypes == null ? void 0 : nmTypes.length) {
+      return [...nmTypes, ...pnpTypes];
+    } else if (pnpTypes.length) {
+      return pnpTypes;
+    }
+  }
   function getOriginalAndResolvedFileName(fileName, host, traceEnabled) {
     const resolvedFileName = realPath(fileName, host, traceEnabled);
     const pathsAreEqual = arePathsEqual(fileName, resolvedFileName, host);
@@ -39153,6 +39232,21 @@ ${lanes.join("\n")}
   }
   function resolvePackageNameToPackageJson(packageName, containingDirectory, options, host, cache) {
     const moduleResolutionState = getTemporaryModuleResolutionState(cache == null ? void 0 : cache.getPackageJsonInfoCache(), host, options);
+    const pnpapi = getPnpApi(containingDirectory);
+    if (pnpapi) {
+      try {
+        const resolution = pnpapi.resolveToUnqualified(packageName, `${containingDirectory}/`, { considerBuiltins: false });
+        const candidate = normalizeSlashes(resolution).replace(/\/$/, "");
+        return getPackageJsonInfo(
+          candidate,
+          /*onlyRecordFailures*/
+          false,
+          moduleResolutionState
+        );
+      } catch {
+        return;
+      }
+    }
     return forEachAncestorDirectory(containingDirectory, (ancestorDirectory) => {
       if (getBaseFileName(ancestorDirectory) !== "node_modules") {
         const nodeModulesFolder = combinePaths(ancestorDirectory, "node_modules");
@@ -40892,7 +40986,15 @@ ${lanes.join("\n")}
       return lookup(secondaryExtensions);
     }
     function lookup(extensions2) {
-      return forEachAncestorDirectory(normalizeSlashes(directory), (ancestorDirectory) => {
+      const issuer = normalizeSlashes(directory);
+      if (getPnpApi(issuer)) {
+        const resolutionFromCache = tryFindNonRelativeModuleNameInCache(cache, moduleName, mode, issuer, redirectedReference, state);
+        if (resolutionFromCache) {
+          return resolutionFromCache;
+        }
+        return toSearchResult(loadModuleFromImmediateNodeModulesDirectoryPnP(extensions2, moduleName, issuer, state, typesScopeOnly, cache, redirectedReference));
+      }
+      return forEachAncestorDirectory(issuer, (ancestorDirectory) => {
         if (getBaseFileName(ancestorDirectory) !== "node_modules") {
           const resolutionFromCache = tryFindNonRelativeModuleNameInCache(cache, moduleName, mode, ancestorDirectory, redirectedReference, state);
           if (resolutionFromCache) {
@@ -40927,11 +41029,40 @@ ${lanes.join("\n")}
       return loadModuleFromSpecificNodeModulesDirectory(4 /* Declaration */, mangleScopedPackageNameWithTrace(moduleName, state), nodeModulesAtTypes2, nodeModulesAtTypesExists, state, cache, redirectedReference);
     }
   }
+  function loadModuleFromImmediateNodeModulesDirectoryPnP(extensions, moduleName, directory, state, typesScopeOnly, cache, redirectedReference) {
+    const issuer = normalizeSlashes(directory);
+    if (!typesScopeOnly) {
+      const packageResult = tryLoadModuleUsingPnpResolution(extensions, moduleName, issuer, state, cache, redirectedReference);
+      if (packageResult) {
+        return packageResult;
+      }
+    }
+    if (extensions & 4 /* Declaration */) {
+      return tryLoadModuleUsingPnpResolution(4 /* Declaration */, `@types/${mangleScopedPackageNameWithTrace(moduleName, state)}`, issuer, state, cache, redirectedReference);
+    }
+  }
   function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference) {
-    var _a, _b;
     const candidate = normalizePath(combinePaths(nodeModulesDirectory, moduleName));
     const { packageName, rest } = parsePackageName(moduleName);
     const packageDirectory = combinePaths(nodeModulesDirectory, packageName);
+    return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory);
+  }
+  function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state, cache, redirectedReference) {
+    const candidate = normalizePath(combinePaths(packageDirectory, rest));
+    return loadModuleFromSpecificNodeModulesDirectoryImpl(
+      extensions,
+      /*nodeModulesDirectoryExists*/
+      true,
+      state,
+      cache,
+      redirectedReference,
+      candidate,
+      rest,
+      packageDirectory
+    );
+  }
+  function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory) {
+    var _a, _b;
     let rootPackageInfo;
     let packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
     if (rest !== "" && packageInfo && (!(state.features & 8 /* Exports */) || !hasProperty(((_a = rootPackageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state)) == null ? void 0 : _a.contents.packageJsonContent) ?? emptyArray, "exports"))) {
@@ -41224,11 +41355,24 @@ ${lanes.join("\n")}
       trace(state.host, diagnostic, ...args);
     }
   }
+  function loadPnpPackageResolution(packageName, containingDirectory) {
+    try {
+      const resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, `${containingDirectory}/`, { considerBuiltins: false });
+      return normalizeSlashes(resolution).replace(/\/$/, "");
+    } catch {
+    }
+  }
+  function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference) {
+    const { packageName, rest } = parsePackageName(moduleName);
+    const packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+    return packageResolution ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state, cache, redirectedReference) : void 0;
+  }
   var typeScriptVersion, nodeModulesAtTypes, NodeResolutionFeatures, nodeModulesPathPart, mangledScopedPackageSeparator;
   var init_moduleNameResolver = __esm({
     "src/compiler/moduleNameResolver.ts"() {
       "use strict";
       init_ts2();
+      init_pnp();
       nodeModulesAtTypes = combinePaths("node_modules", "@types");
       NodeResolutionFeatures = /* @__PURE__ */ ((NodeResolutionFeatures2) => {
         NodeResolutionFeatures2[NodeResolutionFeatures2["None"] = 0] = "None";
@@ -44625,7 +44769,15 @@ ${lanes.join("\n")}
       /*preferSymlinks*/
       true,
       (path, isRedirect) => {
-        const isInNodeModules = pathContainsNodeModules(path);
+        let isInNodeModules = pathContainsNodeModules(path);
+        const pnpapi = getPnpApi(path);
+        if (!isInNodeModules && pnpapi) {
+          const fromLocator = pnpapi.findPackageLocator(importingFileName);
+          const toLocator = pnpapi.findPackageLocator(path);
+          if (fromLocator && toLocator && fromLocator !== toLocator) {
+            isInNodeModules = true;
+          }
+        }
         allFileNames.set(path, { path: getCanonicalFileName(path), isRedirect, isInNodeModules });
         importedFileFromNodeModules = importedFileFromNodeModules || isInNodeModules;
       }
@@ -44817,7 +44969,41 @@ ${lanes.join("\n")}
     if (!host.fileExists || !host.readFile) {
       return void 0;
     }
-    const parts = getNodeModulePathParts(path);
+    let parts = getNodeModulePathParts(path);
+    let pnpPackageName;
+    const pnpApi = getPnpApi(path);
+    if (pnpApi) {
+      const fromLocator = pnpApi.findPackageLocator(importingSourceFile.fileName);
+      const toLocator = pnpApi.findPackageLocator(path);
+      if (fromLocator === toLocator) {
+        return void 0;
+      }
+      if (fromLocator && toLocator) {
+        const fromInfo = pnpApi.getPackageInformation(fromLocator);
+        if (toLocator.reference === fromInfo.packageDependencies.get(toLocator.name)) {
+          pnpPackageName = toLocator.name;
+        } else {
+          for (const [name, reference] of fromInfo.packageDependencies) {
+            if (Array.isArray(reference)) {
+              if (reference[0] === toLocator.name && reference[1] === toLocator.reference) {
+                pnpPackageName = name;
+                break;
+              }
+            }
+          }
+        }
+        if (!parts) {
+          const toInfo = pnpApi.getPackageInformation(toLocator);
+          parts = {
+            topLevelNodeModulesIndex: void 0,
+            topLevelPackageNameIndex: void 0,
+            // The last character from packageLocation is the trailing "/", we want to point to it
+            packageRootIndex: toInfo.packageLocation.length - 1,
+            fileNameIndex: path.lastIndexOf(`/`)
+          };
+        }
+      }
+    }
     if (!parts) {
       return void 0;
     }
@@ -44855,14 +45041,16 @@ ${lanes.join("\n")}
     if (isRedirect && !isPackageRootPath) {
       return void 0;
     }
-    const globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-    const pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-    if (!(startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-      return void 0;
+    if (typeof process.versions.pnp === "undefined") {
+      const globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+      const pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+      if (!(startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+        return void 0;
+      }
     }
-    const nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-    const packageName = getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
-    return getEmitModuleResolutionKind(options) === 1 /* Classic */ && packageName === nodeModulesDirectoryName ? void 0 : packageName;
+    const nodeModulesDirectoryName = typeof pnpPackageName !== "undefined" ? pnpPackageName + moduleSpecifier.substring(parts.packageRootIndex) : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+    const packageNameFromPath = getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+    return getEmitModuleResolutionKind(options) === 1 /* Classic */ && packageNameFromPath === nodeModulesDirectoryName ? void 0 : packageNameFromPath;
     function tryDirectoryWithPackageJson(packageRootIndex) {
       var _a, _b;
       const packageRootPath = path.substring(0, packageRootIndex);
@@ -44875,9 +45063,9 @@ ${lanes.join("\n")}
         const importMode = overrideMode || importingSourceFile.impliedNodeFormat;
         if (getResolvePackageJsonExports(options)) {
           const nodeModulesDirectoryName2 = packageRootPath.substring(parts.topLevelPackageNameIndex + 1);
-          const packageName2 = getPackageNameFromTypesPackageName(nodeModulesDirectoryName2);
+          const packageName = getPackageNameFromTypesPackageName(pnpPackageName ? pnpPackageName : nodeModulesDirectoryName2);
           const conditions = getConditions(options, importMode === 99 /* ESNext */);
-          const fromExports = packageJsonContent.exports ? tryGetModuleNameFromExports(options, path, packageRootPath, packageName2, packageJsonContent.exports, conditions) : void 0;
+          const fromExports = packageJsonContent.exports ? tryGetModuleNameFromExports(options, path, packageRootPath, packageName, packageJsonContent.exports, conditions) : void 0;
           if (fromExports) {
             const withJsExtension = !hasTSFileExtension(fromExports.moduleFileToTry) ? fromExports : { moduleFileToTry: removeFileExtension(fromExports.moduleFileToTry) + tryGetJSExtensionForFile(fromExports.moduleFileToTry, options) };
             return { ...withJsExtension, verbatimFromExports: true };
@@ -45023,6 +45211,7 @@ ${lanes.join("\n")}
     "src/compiler/moduleSpecifiers.ts"() {
       "use strict";
       init_ts2();
+      init_pnp();
     }
   });
 
@@ -115572,6 +115761,7 @@ ${lanes.join("\n")}
         ConfigFileProgramReloadLevel2[ConfigFileProgramReloadLevel2["None"] = 0] = "None";
         ConfigFileProgramReloadLevel2[ConfigFileProgramReloadLevel2["Partial"] = 1] = "Partial";
         ConfigFileProgramReloadLevel2[ConfigFileProgramReloadLevel2["Full"] = 2] = "Full";
+        ConfigFileProgramReloadLevel2[ConfigFileProgramReloadLevel2["Resolutions"] = 3] = "Resolutions";
         return ConfigFileProgramReloadLevel2;
       })(ConfigFileProgramReloadLevel || {});
       WatchLogLevel = /* @__PURE__ */ ((WatchLogLevel2) => {
@@ -122881,6 +123071,11 @@ ${lanes.join("\n")}
     if (configFileName) {
       configFileWatcher = watchFile2(configFileName, scheduleProgramReload, 2e3 /* High */, watchOptions, WatchType.ConfigFile);
     }
+    let pnpFileWatcher;
+    const pnpApiPath = getPnpApiPath(__filename);
+    if (pnpApiPath) {
+      pnpFileWatcher = watchFile2(pnpApiPath, scheduleResolutionReload, 2e3 /* High */, watchOptions, WatchType.ConfigFile);
+    }
     const compilerHost = createCompilerHostFromProgramHost(host, () => compilerOptions, directoryStructureHost);
     setGetSourceFileAsHashVersioned(compilerHost);
     const getNewSourceFile = compilerHost.getSourceFile;
@@ -122942,6 +123137,10 @@ ${lanes.join("\n")}
         configFileWatcher.close();
         configFileWatcher = void 0;
       }
+      if (pnpFileWatcher) {
+        pnpFileWatcher.close();
+        pnpFileWatcher = void 0;
+      }
       extendedConfigCache == null ? void 0 : extendedConfigCache.clear();
       extendedConfigCache = void 0;
       if (sharedExtendedConfigFileWatchers) {
@@ -122974,7 +123173,7 @@ ${lanes.join("\n")}
     function getCurrentProgram() {
       return builderProgram && builderProgram.getProgramOrUndefined();
     }
-    function synchronizeProgram() {
+    function synchronizeProgram(forceAllFilesAsInvalidated = false) {
       writeLog(`Synchronizing program`);
       Debug.assert(compilerOptions);
       Debug.assert(rootFileNames);
@@ -122986,7 +123185,7 @@ ${lanes.join("\n")}
           resolutionCache.clear();
         }
       }
-      const hasInvalidatedResolutions = resolutionCache.createHasInvalidatedResolutions(customHasInvalidatedResolutions);
+      const hasInvalidatedResolutions = resolutionCache.createHasInvalidatedResolutions(forceAllFilesAsInvalidated ? returnTrue : customHasInvalidatedResolutions);
       const {
         originalReadFile,
         originalFileExists,
@@ -123192,13 +123391,19 @@ ${lanes.join("\n")}
       reloadLevel = 2 /* Full */;
       scheduleProgramUpdate();
     }
+    function scheduleResolutionReload() {
+      writeLog("Clearing resolutions");
+      resolutionCache.clear();
+      reloadLevel = 3 /* Resolutions */;
+      scheduleProgramUpdate();
+    }
     function updateProgramWithWatchStatus() {
       timerToUpdateProgram = void 0;
       reportFileChangeDetectedOnCreateProgram = true;
       updateProgram();
     }
     function updateProgram() {
-      var _a, _b, _c, _d;
+      var _a, _b, _c, _d, _e;
       switch (reloadLevel) {
         case 1 /* Partial */:
           (_a = perfLogger) == null ? void 0 : _a.logStartUpdateProgram("PartialConfigReload");
@@ -123208,12 +123413,19 @@ ${lanes.join("\n")}
           (_b = perfLogger) == null ? void 0 : _b.logStartUpdateProgram("FullConfigReload");
           reloadConfigFile();
           break;
+        case 3 /* Resolutions */:
+          (_c = perfLogger) == null ? void 0 : _c.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+          synchronizeProgram(
+            /*forceAllFilesAsInvalidated*/
+            true
+          );
+          break;
         default:
-          (_c = perfLogger) == null ? void 0 : _c.logStartUpdateProgram("SynchronizeProgram");
+          (_d = perfLogger) == null ? void 0 : _d.logStartUpdateProgram("SynchronizeProgram");
           synchronizeProgram();
           break;
       }
-      (_d = perfLogger) == null ? void 0 : _d.logStopUpdateProgram("Done");
+      (_e = perfLogger) == null ? void 0 : _e.logStopUpdateProgram("Done");
       return getCurrentBuilderProgram();
     }
     function reloadFileNamesFromConfigFile() {
@@ -123499,6 +123711,7 @@ ${lanes.join("\n")}
     "src/compiler/watchPublic.ts"() {
       "use strict";
       init_ts2();
+      init_pnp();
     }
   });
 
@@ -128778,7 +128991,14 @@ ${lanes.join("\n")}
       return false;
     }
     function getNodeModulesPackageNameFromFileName(importedFileName, moduleSpecifierResolutionHost) {
-      if (!stringContains(importedFileName, "node_modules")) {
+      const pnpapi = getPnpApi(importedFileName);
+      if (pnpapi) {
+        const fromLocator = pnpapi.findPackageLocator(fromFile.fileName);
+        const toLocator = pnpapi.findPackageLocator(importedFileName);
+        if (!(fromLocator && toLocator)) {
+          return void 0;
+        }
+      } else if (!stringContains(importedFileName, "node_modules")) {
         return void 0;
       }
       const specifier = ts_moduleSpecifiers_exports.getNodeModulesPackageName(
@@ -129040,6 +129260,7 @@ ${lanes.join("\n")}
   var init_utilities4 = __esm({
     "src/services/utilities.ts"() {
       "use strict";
+      init_pnp();
       init_ts4();
       scanner = createScanner(
         99 /* Latest */,
@@ -129312,6 +129533,9 @@ ${lanes.join("\n")}
     return hasImportablePath;
   }
   function isImportablePath(fromPath, toPath3, getCanonicalFileName, globalCachePath) {
+    if (getPnpApi(fromPath)) {
+      return isImportablePathPnp(fromPath, toPath3);
+    }
     const toNodeModules = forEachAncestorDirectory(toPath3, (ancestor) => getBaseFileName(ancestor) === "node_modules" ? ancestor : void 0);
     const toNodeModulesParent = toNodeModules && getDirectoryPath(getCanonicalFileName(toNodeModules));
     return toNodeModulesParent === void 0 || startsWith(getCanonicalFileName(fromPath), toNodeModulesParent) || !!globalCachePath && startsWith(getCanonicalFileName(globalCachePath), toNodeModulesParent);
@@ -129495,6 +129719,7 @@ ${lanes.join("\n")}
   var init_exportInfoMap = __esm({
     "src/services/exportInfoMap.ts"() {
       "use strict";
+      init_pnp();
       init_ts4();
       ImportKind = /* @__PURE__ */ ((ImportKind2) => {
         ImportKind2[ImportKind2["Named"] = 0] = "Named";
@@ -152511,7 +152736,31 @@ ${lanes.join("\n")}
             );
           }
         };
-        if (fragmentDirectory && getResolvePackageJsonExports(compilerOptions)) {
+        const checkExports = (packageFile, packageDirectory, fragmentSubpath) => {
+          const packageJson = readJson(packageFile, host);
+          const exports = packageJson.exports;
+          if (exports) {
+            if (typeof exports !== "object" || exports === null) {
+              return true;
+            }
+            const keys = getOwnKeys(exports);
+            const conditions = mode === 99 /* ESNext */ ? ["node", "import", "types"] : ["node", "require", "types"];
+            addCompletionEntriesFromPathsOrExports(
+              result,
+              fragmentSubpath,
+              packageDirectory,
+              extensionOptions,
+              host,
+              keys,
+              (key) => singleElementArray(getPatternFromFirstMatchingCondition(exports[key], conditions)),
+              comparePatternKeys
+            );
+            return true;
+          }
+          return false;
+        };
+        const shouldCheckExports = fragmentDirectory && getResolvePackageJsonExports(compilerOptions);
+        if (shouldCheckExports) {
           const nodeModulesDirectoryLookup = ancestorLookup;
           ancestorLookup = (ancestor) => {
             const components = getPathComponents(fragment);
@@ -152530,32 +152779,52 @@ ${lanes.join("\n")}
             const packageDirectory = combinePaths(ancestor, "node_modules", packagePath);
             const packageFile = combinePaths(packageDirectory, "package.json");
             if (tryFileExists(host, packageFile)) {
-              const packageJson = readJson(packageFile, host);
-              const exports = packageJson.exports;
-              if (exports) {
-                if (typeof exports !== "object" || exports === null) {
-                  return;
+              const fragmentSubpath = components.join("/") + (components.length && hasTrailingDirectorySeparator(fragment) ? "/" : "");
+              if (checkExports(packageFile, packageDirectory, fragmentSubpath)) {
+                return;
+              }
+            }
+            return nodeModulesDirectoryLookup(ancestor);
+          };
+        }
+        const pnpApi = getPnpApi(scriptPath);
+        if (pnpApi) {
+          const pathRegExp = /^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:@[^/]+\/)?[^/]+)\/*(.*|)$/;
+          const dependencyNameMatch = fragment.match(pathRegExp);
+          if (dependencyNameMatch) {
+            const [, dependencyName, subPath] = dependencyNameMatch;
+            let unqualified;
+            try {
+              unqualified = pnpApi.resolveToUnqualified(dependencyName, scriptPath, { considerBuiltins: false });
+            } catch {
+            }
+            if (unqualified) {
+              const packageDirectory = normalizePath(unqualified);
+              let shouldGetCompletions = true;
+              if (shouldCheckExports) {
+                const packageFile = combinePaths(packageDirectory, "package.json");
+                if (tryFileExists(host, packageFile) && checkExports(packageFile, packageDirectory, subPath)) {
+                  shouldGetCompletions = false;
                 }
-                const keys = getOwnKeys(exports);
-                const fragmentSubpath = components.join("/") + (components.length && hasTrailingDirectorySeparator(fragment) ? "/" : "");
-                const conditions = mode === 99 /* ESNext */ ? ["node", "import", "types"] : ["node", "require", "types"];
-                addCompletionEntriesFromPathsOrExports(
-                  result,
-                  fragmentSubpath,
+              }
+              if (shouldGetCompletions) {
+                getCompletionEntriesForDirectoryFragment(
+                  subPath,
                   packageDirectory,
                   extensionOptions,
                   host,
-                  keys,
-                  (key) => singleElementArray(getPatternFromFirstMatchingCondition(exports[key], conditions)),
-                  comparePatternKeys
+                  /*moduleSpecifierIsRelative*/
+                  false,
+                  /*exclude*/
+                  void 0,
+                  result
                 );
-                return;
               }
             }
-            return nodeModulesDirectoryLookup(ancestor);
-          };
+          }
+        } else {
+          forEachAncestorDirectory(scriptPath, ancestorLookup);
         }
-        forEachAncestorDirectory(scriptPath, ancestorLookup);
       }
     }
     return arrayFrom(result.values());
@@ -152682,9 +152951,15 @@ ${lanes.join("\n")}
     for (const root of typeRoots) {
       getCompletionEntriesFromDirectories(root);
     }
-    for (const packageJson of findPackageJsons(scriptPath, host)) {
-      const typesDir = combinePaths(getDirectoryPath(packageJson), "node_modules/@types");
-      getCompletionEntriesFromDirectories(typesDir);
+    if (getPnpApi(scriptPath)) {
+      for (const root of getPnpTypeRoots(scriptPath)) {
+        getCompletionEntriesFromDirectories(root);
+      }
+    } else {
+      for (const packageJson of findPackageJsons(scriptPath, host)) {
+        const typesDir = combinePaths(getDirectoryPath(packageJson), "node_modules/@types");
+        getCompletionEntriesFromDirectories(typesDir);
+      }
     }
     return result;
     function getCompletionEntriesFromDirectories(directory) {
@@ -152767,6 +153042,7 @@ ${lanes.join("\n")}
   var init_stringCompletions = __esm({
     "src/services/stringCompletions.ts"() {
       "use strict";
+      init_pnp();
       init_ts4();
       init_ts_Completions();
       kindPrecedence = {
diff --git a/lib/typingsInstaller.js b/lib/typingsInstaller.js
index 9fb36b5c5..b15c24bd1 100644
semver exclusivity >=5.1.0-beta
--- a/lib/typingsInstaller.js
+++ b/lib/typingsInstaller.js
@@ -4467,6 +4467,9 @@ var sys = (() => {
       return Buffer2.from && Buffer2.from !== Int8Array.from ? Buffer2.from(input, encoding) : new Buffer2(input, encoding);
     }
     function isFileSystemCaseSensitive() {
+      if (typeof process.versions.pnp !== `undefined`) {
+        return true;
+      }
       if (platform === "win32" || platform === "win64") {
         return false;
       }
@@ -27036,6 +27039,17 @@ function specToDiagnostic(spec, disallowTrailingRecursion) {
   }
 }
 
+// src/compiler/pnp.ts
+function getPnpApi(path2) {
+  if (typeof process.versions.pnp === "undefined") {
+    return;
+  }
+  const { findPnpApi } = require("module");
+  if (findPnpApi) {
+    return findPnpApi(`${path2}/`);
+  }
+}
+
 // src/compiler/moduleNameResolver.ts
 function trace(host) {
   host.trace(formatMessage.apply(void 0, arguments));
@@ -28506,7 +28520,15 @@ function loadModuleFromNearestNodeModulesDirectoryWorker(extensions, moduleName,
     return lookup(secondaryExtensions);
   }
   function lookup(extensions2) {
-    return forEachAncestorDirectory(normalizeSlashes(directory), (ancestorDirectory) => {
+    const issuer = normalizeSlashes(directory);
+    if (getPnpApi(issuer)) {
+      const resolutionFromCache = tryFindNonRelativeModuleNameInCache(cache, moduleName, mode, issuer, redirectedReference, state);
+      if (resolutionFromCache) {
+        return resolutionFromCache;
+      }
+      return toSearchResult(loadModuleFromImmediateNodeModulesDirectoryPnP(extensions2, moduleName, issuer, state, typesScopeOnly, cache, redirectedReference));
+    }
+    return forEachAncestorDirectory(issuer, (ancestorDirectory) => {
       if (getBaseFileName(ancestorDirectory) !== "node_modules") {
         const resolutionFromCache = tryFindNonRelativeModuleNameInCache(cache, moduleName, mode, ancestorDirectory, redirectedReference, state);
         if (resolutionFromCache) {
@@ -28541,11 +28563,40 @@ function loadModuleFromImmediateNodeModulesDirectory(extensions, moduleName, dir
     return loadModuleFromSpecificNodeModulesDirectory(4 /* Declaration */, mangleScopedPackageNameWithTrace(moduleName, state), nodeModulesAtTypes2, nodeModulesAtTypesExists, state, cache, redirectedReference);
   }
 }
+function loadModuleFromImmediateNodeModulesDirectoryPnP(extensions, moduleName, directory, state, typesScopeOnly, cache, redirectedReference) {
+  const issuer = normalizeSlashes(directory);
+  if (!typesScopeOnly) {
+    const packageResult = tryLoadModuleUsingPnpResolution(extensions, moduleName, issuer, state, cache, redirectedReference);
+    if (packageResult) {
+      return packageResult;
+    }
+  }
+  if (extensions & 4 /* Declaration */) {
+    return tryLoadModuleUsingPnpResolution(4 /* Declaration */, `@types/${mangleScopedPackageNameWithTrace(moduleName, state)}`, issuer, state, cache, redirectedReference);
+  }
+}
 function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference) {
-  var _a, _b;
   const candidate = normalizePath(combinePaths(nodeModulesDirectory, moduleName));
   const { packageName, rest } = parsePackageName(moduleName);
   const packageDirectory = combinePaths(nodeModulesDirectory, packageName);
+  return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory);
+}
+function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state, cache, redirectedReference) {
+  const candidate = normalizePath(combinePaths(packageDirectory, rest));
+  return loadModuleFromSpecificNodeModulesDirectoryImpl(
+    extensions,
+    /*nodeModulesDirectoryExists*/
+    true,
+    state,
+    cache,
+    redirectedReference,
+    candidate,
+    rest,
+    packageDirectory
+  );
+}
+function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory) {
+  var _a, _b;
   let rootPackageInfo;
   let packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
   if (rest !== "" && packageInfo && (!(state.features & 8 /* Exports */) || !hasProperty(((_a = rootPackageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state)) == null ? void 0 : _a.contents.packageJsonContent) ?? emptyArray, "exports"))) {
@@ -28779,6 +28830,18 @@ function traceIfEnabled(state, diagnostic, ...args) {
     trace(state.host, diagnostic, ...args);
   }
 }
+function loadPnpPackageResolution(packageName, containingDirectory) {
+  try {
+    const resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, `${containingDirectory}/`, { considerBuiltins: false });
+    return normalizeSlashes(resolution).replace(/\/$/, "");
+  } catch {
+  }
+}
+function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference) {
+  const { packageName, rest } = parsePackageName(moduleName);
+  const packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+  return packageResolution ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state, cache, redirectedReference) : void 0;
+}
 
 // src/compiler/checker.ts
 var nextNodeId = 1;
