diff --git a/lib/tsc.js b/lib/tsc.js
index 361e447f8..f07d1f913 100644
semver exclusivity >=3.9 <4.0
--- a/lib/tsc.js
+++ b/lib/tsc.js
@@ -3402,6 +3402,9 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                if (process.versions.pnp) {
+                    return true;
+                }
                 if (platform === "win32" || platform === "win64") {
                     return false;
                 }
@@ -23979,21 +23982,51 @@ var ts;
         }
     }
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
         return typeRoots;
     }
     var nodeModulesAtTypes = ts.combinePaths("node_modules", "@types");
+    function getPnpTypeRoots(currentDirectory) {
+        if (!isPnpAvailable()) {
+            return [];
+        }
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var pnpapi = getPnpApi();
+        var currentPackage = pnpapi.findPackageLocator(currentDirectory + "/");
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArrays(nmTypes, pnpTypes);
+        }
+    }
     function resolveTypeReferenceDirective(typeReferenceDirectiveName, containingFile, options, host, redirectedReference) {
         var traceEnabled = isTraceEnabled(options, host);
         if (redirectedReference) {
@@ -24073,7 +24106,9 @@ var ts;
                 }
                 var result = void 0;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, undefined, undefined);
+                    var searchResult = isPnpAvailable()
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, undefined, undefined);
                     result = searchResult && searchResult.value;
                 }
                 else {
@@ -24443,9 +24478,12 @@ var ts;
                 if (traceEnabled) {
                     trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                 }
-                var resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
-                if (!resolved_1)
+                var resolved_1 = isPnpAvailable()
+                    ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state)
+                    : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                if (!resolved_1) {
                     return undefined;
+                }
                 var resolvedValue = resolved_1.value;
                 if (!compilerOptions.preserveSymlinks && resolvedValue && !resolvedValue.originalPath) {
                     var path = realPath(resolvedValue.path, host, traceEnabled);
@@ -24886,6 +24924,46 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    function isPnpAvailable() {
+        return process.versions.pnp;
+    }
+    function getPnpApi() {
+        return require("pnpapi");
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi().resolveToUnqualified(packageName, containingDirectory + "/", { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution);
+        }
+        catch (_a) {
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? nodeLoadModuleByRelativeName(extensions, ts.combinePaths(packageResolution, rest), false, state, true)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? nodeLoadModuleByRelativeName(Extensions.DtsOnly, ts.combinePaths(typePackageResolution, rest), false, state, true)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 var ts;
 (function (ts) {
@@ -86406,12 +86484,34 @@ var ts;
                 ? removeExtensionAndIndexPostFix(relativePath, ending, compilerOptions)
                 : ts.removeFileExtension(relativePath);
         }
+        function isPnpAvailable() {
+            return process.versions.pnp;
+        }
         function tryGetModuleNameAsNodeModule(moduleFileName, _a, host, options, packageNameOnly) {
             var getCanonicalFileName = _a.getCanonicalFileName, sourceDirectory = _a.sourceDirectory;
             if (!host.fileExists || !host.readFile) {
                 return undefined;
             }
             var parts = getNodeModulePathParts(moduleFileName);
+            var packageName;
+            if (!parts && isPnpAvailable()) {
+                var pnpApi = require("pnpapi");
+                var locator = pnpApi.findPackageLocator(moduleFileName);
+                if (locator !== null) {
+                    var sourceLocator = pnpApi.findPackageLocator(sourceDirectory + "/");
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        packageRootIndex: information.packageLocation.length,
+                        fileNameIndex: moduleFileName.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -86434,14 +86534,22 @@ var ts;
                     }
                 }
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            if (packageName !== undefined) {
+                var typelessPackageName = ts.getPackageNameFromTypesPackageName(packageName);
+                return typelessPackageName + moduleSpecifier.substring(parts.packageRootIndex);
+            }
+            ts.Debug.assertIsDefined(parts.topLevelNodeModulesIndex);
+            ts.Debug.assertIsDefined(parts.topLevelPackageNameIndex);
+            if (!isPnpAvailable()) {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
             var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
-            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var packageRootPath = moduleFileName.substring(0, packageRootIndex);
                 var packageJsonPath = ts.combinePaths(packageRootPath, "package.json");
diff --git a/lib/tsserver.js b/lib/tsserver.js
index 2b6f035cc..21f9ad412 100644
semver exclusivity >=3.9 <4.0
--- a/lib/tsserver.js
+++ b/lib/tsserver.js
@@ -5652,6 +5652,11 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                // The PnP runtime is always case-sensitive
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    return true;
+                }
                 // win32\win64 are case insensitive platforms
                 if (platform === "win32" || platform === "win64") {
                     return false;
@@ -29402,24 +29407,55 @@ var ts;
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
     /**
      * Returns the path to every node_modules/@types directory from some ancestor directory.
-     * Returns undefined if there are none.
      */
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
             // And if it doesn't exist, tough.
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
         return typeRoots;
     }
     var nodeModulesAtTypes = ts.combinePaths("node_modules", "@types");
+    function getPnpTypeRoots(currentDirectory) {
+        if (!isPnpAvailable()) {
+            return [];
+        }
+        // Some TS consumers pass relative paths that aren't normalized
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var pnpapi = getPnpApi();
+        var currentPackage = pnpapi.findPackageLocator(currentDirectory + "/");
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            // eslint-disable-next-line no-null/no-null
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArrays(nmTypes, pnpTypes);
+        }
+    }
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
@@ -29506,7 +29542,9 @@ var ts;
                 }
                 var result = void 0;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
+                    var searchResult = isPnpAvailable()
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
                     result = searchResult && searchResult.value;
                 }
                 else {
@@ -29987,9 +30025,12 @@ var ts;
                 if (traceEnabled) {
                     trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                 }
-                var resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
-                if (!resolved_1)
+                var resolved_1 = isPnpAvailable()
+                    ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state)
+                    : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                if (!resolved_1) {
                     return undefined;
+                }
                 var resolvedValue = resolved_1.value;
                 if (!compilerOptions.preserveSymlinks && resolvedValue && !resolvedValue.originalPath) {
                     var path = realPath(resolvedValue.path, host, traceEnabled);
@@ -30484,6 +30525,58 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    /**
+     * We only allow PnP to be used as a resolution strategy if TypeScript
+     * itself is executed under a PnP runtime (and we only allow it to access
+     * the current PnP runtime, not any on the disk). This ensures that we
+     * don't execute potentially malicious code that didn't already have a
+     * chance to be executed (if we're running within the runtime, it means
+     * that the runtime has already been executed).
+     * @internal
+     */
+    function isPnpAvailable() {
+        // @ts-ignore
+        return process.versions.pnp;
+    }
+    function getPnpApi() {
+        return require("pnpapi");
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi().resolveToUnqualified(packageName, containingDirectory + "/", { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution);
+        }
+        catch (_a) {
+            // Nothing to do
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    /* @internal */
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? nodeLoadModuleByRelativeName(extensions, ts.combinePaths(packageResolution, rest), /*onlyRecordFailures*/ false, state, /*considerPackageJson*/ true)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? nodeLoadModuleByRelativeName(Extensions.DtsOnly, ts.combinePaths(typePackageResolution, rest), /*onlyRecordFailures*/ false, state, /*considerPackageJson*/ true)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 /* @internal */
 var ts;
@@ -104806,12 +104899,40 @@ var ts;
                 ? removeExtensionAndIndexPostFix(relativePath, ending, compilerOptions)
                 : ts.removeFileExtension(relativePath);
         }
+        function isPnpAvailable() {
+            // @ts-ignore
+            return process.versions.pnp;
+        }
         function tryGetModuleNameAsNodeModule(moduleFileName, _a, host, options, packageNameOnly) {
             var getCanonicalFileName = _a.getCanonicalFileName, sourceDirectory = _a.sourceDirectory;
             if (!host.fileExists || !host.readFile) {
                 return undefined;
             }
             var parts = getNodeModulePathParts(moduleFileName);
+            var packageName;
+            // Even if there is no node_modules component in the path, we still may
+            // be inside a package (Yarn workspaces). Query the PnP API directly.
+            if (!parts && isPnpAvailable()) {
+                var pnpApi = require("pnpapi");
+                var locator = pnpApi.findPackageLocator(moduleFileName);
+                // eslint-disable-next-line no-null/no-null
+                if (locator !== null) {
+                    var sourceLocator = pnpApi.findPackageLocator(sourceDirectory + "/");
+                    // Don't use the package name when the imported file is inside
+                    // the source directory (prefer a relative path instead)
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        packageRootIndex: information.packageLocation.length,
+                        fileNameIndex: moduleFileName.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -104837,18 +104958,29 @@ var ts;
                     }
                 }
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            // Get a path that's relative to node_modules or the importing file's path
-            // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            // If we already know the package name, no need to go further
+            if (packageName !== undefined) {
+                var typelessPackageName = ts.getPackageNameFromTypesPackageName(packageName);
+                return typelessPackageName + moduleSpecifier.substring(parts.packageRootIndex);
+            }
+            ts.Debug.assertIsDefined(parts.topLevelNodeModulesIndex);
+            ts.Debug.assertIsDefined(parts.topLevelPackageNameIndex);
+            // If PnP is enabled the node_modules entries we'll get will always be relevant even if they
+            // are located in a weird path apparently outside of the source directory
+            if (!isPnpAvailable()) {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                // Get a path that's relative to node_modules or the importing file's path
+                // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
             // If the module was found in @types, get the actual Node package name
             var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
             // For classic resolution, only allow importing from node_modules/@types, not other node_modules
-            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var packageRootPath = moduleFileName.substring(0, packageRootIndex);
                 var packageJsonPath = ts.combinePaths(packageRootPath, "package.json");
@@ -130217,11 +130349,28 @@ var ts;
                     isImportablePath(from.fileName, toPath, getCanonicalFileName, globalTypingsCache);
             });
         }
+        /**
+         * We only allow PnP to be used as a resolution strategy if TypeScript
+         * itself is executed under a PnP runtime (and we only allow it to access
+         * the current PnP runtime, not any on the disk). This ensures that we
+         * don't execute potentially malicious code that didn't already have a
+         * chance to be executed (if we're running within the runtime, it means
+         * that the runtime has already been executed).
+         * @internal
+         */
+        function isPnpAvailable() {
+            // @ts-ignore
+            return process.versions.pnp;
+        }
+        function getPnpApi() {
+            // @ts-ignore
+            return require("pnpapi");
+        }
         /**
          * Don't include something from a `node_modules` that isn't actually reachable by a global import.
          * A relative import to node_modules is usually a bad idea.
          */
-        function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+        function isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath) {
             // If it's in a `node_modules` but is not reachable from here via a global import, don't bother.
             var toNodeModules = ts.forEachAncestorDirectory(toPath, function (ancestor) { return ts.getBaseFileName(ancestor) === "node_modules" ? ancestor : undefined; });
             var toNodeModulesParent = toNodeModules && ts.getDirectoryPath(getCanonicalFileName(toNodeModules));
@@ -130229,6 +130378,26 @@ var ts;
                 || ts.startsWith(getCanonicalFileName(fromPath), toNodeModulesParent)
                 || (!!globalCachePath && ts.startsWith(getCanonicalFileName(globalCachePath), toNodeModulesParent));
         }
+        function isImportablePathPnp(fromPath, toPath) {
+            var pnpApi = getPnpApi();
+            var fromLocator = pnpApi.findPackageLocator(fromPath);
+            var toLocator = pnpApi.findPackageLocator(toPath);
+            // eslint-disable-next-line no-null/no-null
+            if (toLocator === null) {
+                return false;
+            }
+            var fromInfo = pnpApi.getPackageInformation(fromLocator);
+            var toReference = fromInfo.packageDependencies.get(toLocator.name);
+            return toReference === toLocator.reference;
+        }
+        function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+            if (isPnpAvailable()) {
+                return isImportablePathPnp(fromPath, toPath);
+            }
+            else {
+                return isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath);
+            }
+        }
         function moduleSymbolToValidIdentifier(moduleSymbol, target) {
             return moduleSpecifierToValidIdentifier(ts.removeFileExtension(ts.stripQuotes(moduleSymbol.name)), target);
         }
diff --git a/lib/tsserverlibrary.js b/lib/tsserverlibrary.js
index 60e8447a1..3a7bcfa00 100644
semver exclusivity >=3.9 <4.0
--- a/lib/tsserverlibrary.js
+++ b/lib/tsserverlibrary.js
@@ -5802,6 +5802,11 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                // The PnP runtime is always case-sensitive
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    return true;
+                }
                 // win32\win64 are case insensitive platforms
                 if (platform === "win32" || platform === "win64") {
                     return false;
@@ -29552,24 +29557,55 @@ var ts;
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
     /**
      * Returns the path to every node_modules/@types directory from some ancestor directory.
-     * Returns undefined if there are none.
      */
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
             // And if it doesn't exist, tough.
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
         return typeRoots;
     }
     var nodeModulesAtTypes = ts.combinePaths("node_modules", "@types");
+    function getPnpTypeRoots(currentDirectory) {
+        if (!isPnpAvailable()) {
+            return [];
+        }
+        // Some TS consumers pass relative paths that aren't normalized
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var pnpapi = getPnpApi();
+        var currentPackage = pnpapi.findPackageLocator(currentDirectory + "/");
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            // eslint-disable-next-line no-null/no-null
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArrays(nmTypes, pnpTypes);
+        }
+    }
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
@@ -29656,7 +29692,9 @@ var ts;
                 }
                 var result = void 0;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
+                    var searchResult = isPnpAvailable()
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
                     result = searchResult && searchResult.value;
                 }
                 else {
@@ -30137,9 +30175,12 @@ var ts;
                 if (traceEnabled) {
                     trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                 }
-                var resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
-                if (!resolved_1)
+                var resolved_1 = isPnpAvailable()
+                    ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state)
+                    : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                if (!resolved_1) {
                     return undefined;
+                }
                 var resolvedValue = resolved_1.value;
                 if (!compilerOptions.preserveSymlinks && resolvedValue && !resolvedValue.originalPath) {
                     var path = realPath(resolvedValue.path, host, traceEnabled);
@@ -30634,6 +30675,58 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    /**
+     * We only allow PnP to be used as a resolution strategy if TypeScript
+     * itself is executed under a PnP runtime (and we only allow it to access
+     * the current PnP runtime, not any on the disk). This ensures that we
+     * don't execute potentially malicious code that didn't already have a
+     * chance to be executed (if we're running within the runtime, it means
+     * that the runtime has already been executed).
+     * @internal
+     */
+    function isPnpAvailable() {
+        // @ts-ignore
+        return process.versions.pnp;
+    }
+    function getPnpApi() {
+        return require("pnpapi");
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi().resolveToUnqualified(packageName, containingDirectory + "/", { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution);
+        }
+        catch (_a) {
+            // Nothing to do
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    /* @internal */
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? nodeLoadModuleByRelativeName(extensions, ts.combinePaths(packageResolution, rest), /*onlyRecordFailures*/ false, state, /*considerPackageJson*/ true)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? nodeLoadModuleByRelativeName(Extensions.DtsOnly, ts.combinePaths(typePackageResolution, rest), /*onlyRecordFailures*/ false, state, /*considerPackageJson*/ true)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 /* @internal */
 var ts;
@@ -104956,12 +105049,40 @@ var ts;
                 ? removeExtensionAndIndexPostFix(relativePath, ending, compilerOptions)
                 : ts.removeFileExtension(relativePath);
         }
+        function isPnpAvailable() {
+            // @ts-ignore
+            return process.versions.pnp;
+        }
         function tryGetModuleNameAsNodeModule(moduleFileName, _a, host, options, packageNameOnly) {
             var getCanonicalFileName = _a.getCanonicalFileName, sourceDirectory = _a.sourceDirectory;
             if (!host.fileExists || !host.readFile) {
                 return undefined;
             }
             var parts = getNodeModulePathParts(moduleFileName);
+            var packageName;
+            // Even if there is no node_modules component in the path, we still may
+            // be inside a package (Yarn workspaces). Query the PnP API directly.
+            if (!parts && isPnpAvailable()) {
+                var pnpApi = require("pnpapi");
+                var locator = pnpApi.findPackageLocator(moduleFileName);
+                // eslint-disable-next-line no-null/no-null
+                if (locator !== null) {
+                    var sourceLocator = pnpApi.findPackageLocator(sourceDirectory + "/");
+                    // Don't use the package name when the imported file is inside
+                    // the source directory (prefer a relative path instead)
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        packageRootIndex: information.packageLocation.length,
+                        fileNameIndex: moduleFileName.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -104987,18 +105108,29 @@ var ts;
                     }
                 }
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            // Get a path that's relative to node_modules or the importing file's path
-            // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            // If we already know the package name, no need to go further
+            if (packageName !== undefined) {
+                var typelessPackageName = ts.getPackageNameFromTypesPackageName(packageName);
+                return typelessPackageName + moduleSpecifier.substring(parts.packageRootIndex);
+            }
+            ts.Debug.assertIsDefined(parts.topLevelNodeModulesIndex);
+            ts.Debug.assertIsDefined(parts.topLevelPackageNameIndex);
+            // If PnP is enabled the node_modules entries we'll get will always be relevant even if they
+            // are located in a weird path apparently outside of the source directory
+            if (!isPnpAvailable()) {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                // Get a path that's relative to node_modules or the importing file's path
+                // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
             // If the module was found in @types, get the actual Node package name
             var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
             // For classic resolution, only allow importing from node_modules/@types, not other node_modules
-            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var packageRootPath = moduleFileName.substring(0, packageRootIndex);
                 var packageJsonPath = ts.combinePaths(packageRootPath, "package.json");
@@ -130740,11 +130872,28 @@ var ts;
                     isImportablePath(from.fileName, toPath, getCanonicalFileName, globalTypingsCache);
             });
         }
+        /**
+         * We only allow PnP to be used as a resolution strategy if TypeScript
+         * itself is executed under a PnP runtime (and we only allow it to access
+         * the current PnP runtime, not any on the disk). This ensures that we
+         * don't execute potentially malicious code that didn't already have a
+         * chance to be executed (if we're running within the runtime, it means
+         * that the runtime has already been executed).
+         * @internal
+         */
+        function isPnpAvailable() {
+            // @ts-ignore
+            return process.versions.pnp;
+        }
+        function getPnpApi() {
+            // @ts-ignore
+            return require("pnpapi");
+        }
         /**
          * Don't include something from a `node_modules` that isn't actually reachable by a global import.
          * A relative import to node_modules is usually a bad idea.
          */
-        function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+        function isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath) {
             // If it's in a `node_modules` but is not reachable from here via a global import, don't bother.
             var toNodeModules = ts.forEachAncestorDirectory(toPath, function (ancestor) { return ts.getBaseFileName(ancestor) === "node_modules" ? ancestor : undefined; });
             var toNodeModulesParent = toNodeModules && ts.getDirectoryPath(getCanonicalFileName(toNodeModules));
@@ -130752,6 +130901,26 @@ var ts;
                 || ts.startsWith(getCanonicalFileName(fromPath), toNodeModulesParent)
                 || (!!globalCachePath && ts.startsWith(getCanonicalFileName(globalCachePath), toNodeModulesParent));
         }
+        function isImportablePathPnp(fromPath, toPath) {
+            var pnpApi = getPnpApi();
+            var fromLocator = pnpApi.findPackageLocator(fromPath);
+            var toLocator = pnpApi.findPackageLocator(toPath);
+            // eslint-disable-next-line no-null/no-null
+            if (toLocator === null) {
+                return false;
+            }
+            var fromInfo = pnpApi.getPackageInformation(fromLocator);
+            var toReference = fromInfo.packageDependencies.get(toLocator.name);
+            return toReference === toLocator.reference;
+        }
+        function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+            if (isPnpAvailable()) {
+                return isImportablePathPnp(fromPath, toPath);
+            }
+            else {
+                return isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath);
+            }
+        }
         function moduleSymbolToValidIdentifier(moduleSymbol, target) {
             return moduleSpecifierToValidIdentifier(ts.removeFileExtension(ts.stripQuotes(moduleSymbol.name)), target);
         }
diff --git a/lib/typescript.js b/lib/typescript.js
index 90202c1c5..081b7b5cc 100644
semver exclusivity >=3.9 <4.0
--- a/lib/typescript.js
+++ b/lib/typescript.js
@@ -5802,6 +5802,11 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                // The PnP runtime is always case-sensitive
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    return true;
+                }
                 // win32\win64 are case insensitive platforms
                 if (platform === "win32" || platform === "win64") {
                     return false;
@@ -29552,24 +29557,55 @@ var ts;
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
     /**
      * Returns the path to every node_modules/@types directory from some ancestor directory.
-     * Returns undefined if there are none.
      */
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
             // And if it doesn't exist, tough.
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
         return typeRoots;
     }
     var nodeModulesAtTypes = ts.combinePaths("node_modules", "@types");
+    function getPnpTypeRoots(currentDirectory) {
+        if (!isPnpAvailable()) {
+            return [];
+        }
+        // Some TS consumers pass relative paths that aren't normalized
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var pnpapi = getPnpApi();
+        var currentPackage = pnpapi.findPackageLocator(currentDirectory + "/");
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            // eslint-disable-next-line no-null/no-null
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArrays(nmTypes, pnpTypes);
+        }
+    }
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
@@ -29656,7 +29692,9 @@ var ts;
                 }
                 var result = void 0;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
+                    var searchResult = isPnpAvailable()
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
                     result = searchResult && searchResult.value;
                 }
                 else {
@@ -30137,9 +30175,12 @@ var ts;
                 if (traceEnabled) {
                     trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                 }
-                var resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
-                if (!resolved_1)
+                var resolved_1 = isPnpAvailable()
+                    ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state)
+                    : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                if (!resolved_1) {
                     return undefined;
+                }
                 var resolvedValue = resolved_1.value;
                 if (!compilerOptions.preserveSymlinks && resolvedValue && !resolvedValue.originalPath) {
                     var path = realPath(resolvedValue.path, host, traceEnabled);
@@ -30634,6 +30675,58 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    /**
+     * We only allow PnP to be used as a resolution strategy if TypeScript
+     * itself is executed under a PnP runtime (and we only allow it to access
+     * the current PnP runtime, not any on the disk). This ensures that we
+     * don't execute potentially malicious code that didn't already have a
+     * chance to be executed (if we're running within the runtime, it means
+     * that the runtime has already been executed).
+     * @internal
+     */
+    function isPnpAvailable() {
+        // @ts-ignore
+        return process.versions.pnp;
+    }
+    function getPnpApi() {
+        return require("pnpapi");
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi().resolveToUnqualified(packageName, containingDirectory + "/", { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution);
+        }
+        catch (_a) {
+            // Nothing to do
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    /* @internal */
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? nodeLoadModuleByRelativeName(extensions, ts.combinePaths(packageResolution, rest), /*onlyRecordFailures*/ false, state, /*considerPackageJson*/ true)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? nodeLoadModuleByRelativeName(Extensions.DtsOnly, ts.combinePaths(typePackageResolution, rest), /*onlyRecordFailures*/ false, state, /*considerPackageJson*/ true)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 /* @internal */
 var ts;
@@ -104956,12 +105049,40 @@ var ts;
                 ? removeExtensionAndIndexPostFix(relativePath, ending, compilerOptions)
                 : ts.removeFileExtension(relativePath);
         }
+        function isPnpAvailable() {
+            // @ts-ignore
+            return process.versions.pnp;
+        }
         function tryGetModuleNameAsNodeModule(moduleFileName, _a, host, options, packageNameOnly) {
             var getCanonicalFileName = _a.getCanonicalFileName, sourceDirectory = _a.sourceDirectory;
             if (!host.fileExists || !host.readFile) {
                 return undefined;
             }
             var parts = getNodeModulePathParts(moduleFileName);
+            var packageName;
+            // Even if there is no node_modules component in the path, we still may
+            // be inside a package (Yarn workspaces). Query the PnP API directly.
+            if (!parts && isPnpAvailable()) {
+                var pnpApi = require("pnpapi");
+                var locator = pnpApi.findPackageLocator(moduleFileName);
+                // eslint-disable-next-line no-null/no-null
+                if (locator !== null) {
+                    var sourceLocator = pnpApi.findPackageLocator(sourceDirectory + "/");
+                    // Don't use the package name when the imported file is inside
+                    // the source directory (prefer a relative path instead)
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        packageRootIndex: information.packageLocation.length,
+                        fileNameIndex: moduleFileName.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -104987,18 +105108,29 @@ var ts;
                     }
                 }
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            // Get a path that's relative to node_modules or the importing file's path
-            // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            // If we already know the package name, no need to go further
+            if (packageName !== undefined) {
+                var typelessPackageName = ts.getPackageNameFromTypesPackageName(packageName);
+                return typelessPackageName + moduleSpecifier.substring(parts.packageRootIndex);
+            }
+            ts.Debug.assertIsDefined(parts.topLevelNodeModulesIndex);
+            ts.Debug.assertIsDefined(parts.topLevelPackageNameIndex);
+            // If PnP is enabled the node_modules entries we'll get will always be relevant even if they
+            // are located in a weird path apparently outside of the source directory
+            if (!isPnpAvailable()) {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                // Get a path that's relative to node_modules or the importing file's path
+                // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
             // If the module was found in @types, get the actual Node package name
             var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
             // For classic resolution, only allow importing from node_modules/@types, not other node_modules
-            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var packageRootPath = moduleFileName.substring(0, packageRootIndex);
                 var packageJsonPath = ts.combinePaths(packageRootPath, "package.json");
@@ -130740,11 +130872,28 @@ var ts;
                     isImportablePath(from.fileName, toPath, getCanonicalFileName, globalTypingsCache);
             });
         }
+        /**
+         * We only allow PnP to be used as a resolution strategy if TypeScript
+         * itself is executed under a PnP runtime (and we only allow it to access
+         * the current PnP runtime, not any on the disk). This ensures that we
+         * don't execute potentially malicious code that didn't already have a
+         * chance to be executed (if we're running within the runtime, it means
+         * that the runtime has already been executed).
+         * @internal
+         */
+        function isPnpAvailable() {
+            // @ts-ignore
+            return process.versions.pnp;
+        }
+        function getPnpApi() {
+            // @ts-ignore
+            return require("pnpapi");
+        }
         /**
          * Don't include something from a `node_modules` that isn't actually reachable by a global import.
          * A relative import to node_modules is usually a bad idea.
          */
-        function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+        function isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath) {
             // If it's in a `node_modules` but is not reachable from here via a global import, don't bother.
             var toNodeModules = ts.forEachAncestorDirectory(toPath, function (ancestor) { return ts.getBaseFileName(ancestor) === "node_modules" ? ancestor : undefined; });
             var toNodeModulesParent = toNodeModules && ts.getDirectoryPath(getCanonicalFileName(toNodeModules));
@@ -130752,6 +130901,26 @@ var ts;
                 || ts.startsWith(getCanonicalFileName(fromPath), toNodeModulesParent)
                 || (!!globalCachePath && ts.startsWith(getCanonicalFileName(globalCachePath), toNodeModulesParent));
         }
+        function isImportablePathPnp(fromPath, toPath) {
+            var pnpApi = getPnpApi();
+            var fromLocator = pnpApi.findPackageLocator(fromPath);
+            var toLocator = pnpApi.findPackageLocator(toPath);
+            // eslint-disable-next-line no-null/no-null
+            if (toLocator === null) {
+                return false;
+            }
+            var fromInfo = pnpApi.getPackageInformation(fromLocator);
+            var toReference = fromInfo.packageDependencies.get(toLocator.name);
+            return toReference === toLocator.reference;
+        }
+        function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+            if (isPnpAvailable()) {
+                return isImportablePathPnp(fromPath, toPath);
+            }
+            else {
+                return isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath);
+            }
+        }
         function moduleSymbolToValidIdentifier(moduleSymbol, target) {
             return moduleSpecifierToValidIdentifier(ts.removeFileExtension(ts.stripQuotes(moduleSymbol.name)), target);
         }
diff --git a/lib/typescriptServices.js b/lib/typescriptServices.js
index d78fb9eda..124497dd8 100644
semver exclusivity >=3.9 <4.0
--- a/lib/typescriptServices.js
+++ b/lib/typescriptServices.js
@@ -5802,6 +5802,11 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                // The PnP runtime is always case-sensitive
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    return true;
+                }
                 // win32\win64 are case insensitive platforms
                 if (platform === "win32" || platform === "win64") {
                     return false;
@@ -29552,24 +29557,55 @@ var ts;
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
     /**
      * Returns the path to every node_modules/@types directory from some ancestor directory.
-     * Returns undefined if there are none.
      */
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
             // And if it doesn't exist, tough.
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
         return typeRoots;
     }
     var nodeModulesAtTypes = ts.combinePaths("node_modules", "@types");
+    function getPnpTypeRoots(currentDirectory) {
+        if (!isPnpAvailable()) {
+            return [];
+        }
+        // Some TS consumers pass relative paths that aren't normalized
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var pnpapi = getPnpApi();
+        var currentPackage = pnpapi.findPackageLocator(currentDirectory + "/");
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            // eslint-disable-next-line no-null/no-null
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArrays(nmTypes, pnpTypes);
+        }
+    }
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
@@ -29656,7 +29692,9 @@ var ts;
                 }
                 var result = void 0;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
+                    var searchResult = isPnpAvailable()
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
                     result = searchResult && searchResult.value;
                 }
                 else {
@@ -30137,9 +30175,12 @@ var ts;
                 if (traceEnabled) {
                     trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                 }
-                var resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
-                if (!resolved_1)
+                var resolved_1 = isPnpAvailable()
+                    ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state)
+                    : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                if (!resolved_1) {
                     return undefined;
+                }
                 var resolvedValue = resolved_1.value;
                 if (!compilerOptions.preserveSymlinks && resolvedValue && !resolvedValue.originalPath) {
                     var path = realPath(resolvedValue.path, host, traceEnabled);
@@ -30634,6 +30675,58 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    /**
+     * We only allow PnP to be used as a resolution strategy if TypeScript
+     * itself is executed under a PnP runtime (and we only allow it to access
+     * the current PnP runtime, not any on the disk). This ensures that we
+     * don't execute potentially malicious code that didn't already have a
+     * chance to be executed (if we're running within the runtime, it means
+     * that the runtime has already been executed).
+     * @internal
+     */
+    function isPnpAvailable() {
+        // @ts-ignore
+        return process.versions.pnp;
+    }
+    function getPnpApi() {
+        return require("pnpapi");
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi().resolveToUnqualified(packageName, containingDirectory + "/", { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution);
+        }
+        catch (_a) {
+            // Nothing to do
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    /* @internal */
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? nodeLoadModuleByRelativeName(extensions, ts.combinePaths(packageResolution, rest), /*onlyRecordFailures*/ false, state, /*considerPackageJson*/ true)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? nodeLoadModuleByRelativeName(Extensions.DtsOnly, ts.combinePaths(typePackageResolution, rest), /*onlyRecordFailures*/ false, state, /*considerPackageJson*/ true)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 /* @internal */
 var ts;
@@ -104956,12 +105049,40 @@ var ts;
                 ? removeExtensionAndIndexPostFix(relativePath, ending, compilerOptions)
                 : ts.removeFileExtension(relativePath);
         }
+        function isPnpAvailable() {
+            // @ts-ignore
+            return process.versions.pnp;
+        }
         function tryGetModuleNameAsNodeModule(moduleFileName, _a, host, options, packageNameOnly) {
             var getCanonicalFileName = _a.getCanonicalFileName, sourceDirectory = _a.sourceDirectory;
             if (!host.fileExists || !host.readFile) {
                 return undefined;
             }
             var parts = getNodeModulePathParts(moduleFileName);
+            var packageName;
+            // Even if there is no node_modules component in the path, we still may
+            // be inside a package (Yarn workspaces). Query the PnP API directly.
+            if (!parts && isPnpAvailable()) {
+                var pnpApi = require("pnpapi");
+                var locator = pnpApi.findPackageLocator(moduleFileName);
+                // eslint-disable-next-line no-null/no-null
+                if (locator !== null) {
+                    var sourceLocator = pnpApi.findPackageLocator(sourceDirectory + "/");
+                    // Don't use the package name when the imported file is inside
+                    // the source directory (prefer a relative path instead)
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        packageRootIndex: information.packageLocation.length,
+                        fileNameIndex: moduleFileName.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -104987,18 +105108,29 @@ var ts;
                     }
                 }
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            // Get a path that's relative to node_modules or the importing file's path
-            // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            // If we already know the package name, no need to go further
+            if (packageName !== undefined) {
+                var typelessPackageName = ts.getPackageNameFromTypesPackageName(packageName);
+                return typelessPackageName + moduleSpecifier.substring(parts.packageRootIndex);
+            }
+            ts.Debug.assertIsDefined(parts.topLevelNodeModulesIndex);
+            ts.Debug.assertIsDefined(parts.topLevelPackageNameIndex);
+            // If PnP is enabled the node_modules entries we'll get will always be relevant even if they
+            // are located in a weird path apparently outside of the source directory
+            if (!isPnpAvailable()) {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                // Get a path that's relative to node_modules or the importing file's path
+                // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
             // If the module was found in @types, get the actual Node package name
             var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
             // For classic resolution, only allow importing from node_modules/@types, not other node_modules
-            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var packageRootPath = moduleFileName.substring(0, packageRootIndex);
                 var packageJsonPath = ts.combinePaths(packageRootPath, "package.json");
@@ -130740,11 +130872,28 @@ var ts;
                     isImportablePath(from.fileName, toPath, getCanonicalFileName, globalTypingsCache);
             });
         }
+        /**
+         * We only allow PnP to be used as a resolution strategy if TypeScript
+         * itself is executed under a PnP runtime (and we only allow it to access
+         * the current PnP runtime, not any on the disk). This ensures that we
+         * don't execute potentially malicious code that didn't already have a
+         * chance to be executed (if we're running within the runtime, it means
+         * that the runtime has already been executed).
+         * @internal
+         */
+        function isPnpAvailable() {
+            // @ts-ignore
+            return process.versions.pnp;
+        }
+        function getPnpApi() {
+            // @ts-ignore
+            return require("pnpapi");
+        }
         /**
          * Don't include something from a `node_modules` that isn't actually reachable by a global import.
          * A relative import to node_modules is usually a bad idea.
          */
-        function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+        function isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath) {
             // If it's in a `node_modules` but is not reachable from here via a global import, don't bother.
             var toNodeModules = ts.forEachAncestorDirectory(toPath, function (ancestor) { return ts.getBaseFileName(ancestor) === "node_modules" ? ancestor : undefined; });
             var toNodeModulesParent = toNodeModules && ts.getDirectoryPath(getCanonicalFileName(toNodeModules));
@@ -130752,6 +130901,26 @@ var ts;
                 || ts.startsWith(getCanonicalFileName(fromPath), toNodeModulesParent)
                 || (!!globalCachePath && ts.startsWith(getCanonicalFileName(globalCachePath), toNodeModulesParent));
         }
+        function isImportablePathPnp(fromPath, toPath) {
+            var pnpApi = getPnpApi();
+            var fromLocator = pnpApi.findPackageLocator(fromPath);
+            var toLocator = pnpApi.findPackageLocator(toPath);
+            // eslint-disable-next-line no-null/no-null
+            if (toLocator === null) {
+                return false;
+            }
+            var fromInfo = pnpApi.getPackageInformation(fromLocator);
+            var toReference = fromInfo.packageDependencies.get(toLocator.name);
+            return toReference === toLocator.reference;
+        }
+        function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+            if (isPnpAvailable()) {
+                return isImportablePathPnp(fromPath, toPath);
+            }
+            else {
+                return isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath);
+            }
+        }
         function moduleSymbolToValidIdentifier(moduleSymbol, target) {
             return moduleSpecifierToValidIdentifier(ts.removeFileExtension(ts.stripQuotes(moduleSymbol.name)), target);
         }
diff --git a/lib/typingsInstaller.js b/lib/typingsInstaller.js
index 967aad4ef..9c4eca225 100644
semver exclusivity >=3.9 <4.0
--- a/lib/typingsInstaller.js
+++ b/lib/typingsInstaller.js
@@ -5641,6 +5641,11 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                // The PnP runtime is always case-sensitive
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    return true;
+                }
                 // win32\win64 are case insensitive platforms
                 if (platform === "win32" || platform === "win64") {
                     return false;
@@ -29391,24 +29396,55 @@ var ts;
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
     /**
      * Returns the path to every node_modules/@types directory from some ancestor directory.
-     * Returns undefined if there are none.
      */
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
             // And if it doesn't exist, tough.
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
         return typeRoots;
     }
     var nodeModulesAtTypes = ts.combinePaths("node_modules", "@types");
+    function getPnpTypeRoots(currentDirectory) {
+        if (!isPnpAvailable()) {
+            return [];
+        }
+        // Some TS consumers pass relative paths that aren't normalized
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var pnpapi = getPnpApi();
+        var currentPackage = pnpapi.findPackageLocator(currentDirectory + "/");
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            // eslint-disable-next-line no-null/no-null
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArrays(nmTypes, pnpTypes);
+        }
+    }
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
@@ -29495,7 +29531,9 @@ var ts;
                 }
                 var result = void 0;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
+                    var searchResult = isPnpAvailable()
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
                     result = searchResult && searchResult.value;
                 }
                 else {
@@ -29976,9 +30014,12 @@ var ts;
                 if (traceEnabled) {
                     trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                 }
-                var resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
-                if (!resolved_1)
+                var resolved_1 = isPnpAvailable()
+                    ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state)
+                    : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                if (!resolved_1) {
                     return undefined;
+                }
                 var resolvedValue = resolved_1.value;
                 if (!compilerOptions.preserveSymlinks && resolvedValue && !resolvedValue.originalPath) {
                     var path = realPath(resolvedValue.path, host, traceEnabled);
@@ -30473,6 +30514,58 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    /**
+     * We only allow PnP to be used as a resolution strategy if TypeScript
+     * itself is executed under a PnP runtime (and we only allow it to access
+     * the current PnP runtime, not any on the disk). This ensures that we
+     * don't execute potentially malicious code that didn't already have a
+     * chance to be executed (if we're running within the runtime, it means
+     * that the runtime has already been executed).
+     * @internal
+     */
+    function isPnpAvailable() {
+        // @ts-ignore
+        return process.versions.pnp;
+    }
+    function getPnpApi() {
+        return require("pnpapi");
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi().resolveToUnqualified(packageName, containingDirectory + "/", { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution);
+        }
+        catch (_a) {
+            // Nothing to do
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    /* @internal */
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? nodeLoadModuleByRelativeName(extensions, ts.combinePaths(packageResolution, rest), /*onlyRecordFailures*/ false, state, /*considerPackageJson*/ true)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? nodeLoadModuleByRelativeName(Extensions.DtsOnly, ts.combinePaths(typePackageResolution, rest), /*onlyRecordFailures*/ false, state, /*considerPackageJson*/ true)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 /* @internal */
 var ts;
@@ -104795,12 +104888,40 @@ var ts;
                 ? removeExtensionAndIndexPostFix(relativePath, ending, compilerOptions)
                 : ts.removeFileExtension(relativePath);
         }
+        function isPnpAvailable() {
+            // @ts-ignore
+            return process.versions.pnp;
+        }
         function tryGetModuleNameAsNodeModule(moduleFileName, _a, host, options, packageNameOnly) {
             var getCanonicalFileName = _a.getCanonicalFileName, sourceDirectory = _a.sourceDirectory;
             if (!host.fileExists || !host.readFile) {
                 return undefined;
             }
             var parts = getNodeModulePathParts(moduleFileName);
+            var packageName;
+            // Even if there is no node_modules component in the path, we still may
+            // be inside a package (Yarn workspaces). Query the PnP API directly.
+            if (!parts && isPnpAvailable()) {
+                var pnpApi = require("pnpapi");
+                var locator = pnpApi.findPackageLocator(moduleFileName);
+                // eslint-disable-next-line no-null/no-null
+                if (locator !== null) {
+                    var sourceLocator = pnpApi.findPackageLocator(sourceDirectory + "/");
+                    // Don't use the package name when the imported file is inside
+                    // the source directory (prefer a relative path instead)
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        packageRootIndex: information.packageLocation.length,
+                        fileNameIndex: moduleFileName.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -104826,18 +104947,29 @@ var ts;
                     }
                 }
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            // Get a path that's relative to node_modules or the importing file's path
-            // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            // If we already know the package name, no need to go further
+            if (packageName !== undefined) {
+                var typelessPackageName = ts.getPackageNameFromTypesPackageName(packageName);
+                return typelessPackageName + moduleSpecifier.substring(parts.packageRootIndex);
+            }
+            ts.Debug.assertIsDefined(parts.topLevelNodeModulesIndex);
+            ts.Debug.assertIsDefined(parts.topLevelPackageNameIndex);
+            // If PnP is enabled the node_modules entries we'll get will always be relevant even if they
+            // are located in a weird path apparently outside of the source directory
+            if (!isPnpAvailable()) {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                // Get a path that's relative to node_modules or the importing file's path
+                // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
             // If the module was found in @types, get the actual Node package name
             var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
             // For classic resolution, only allow importing from node_modules/@types, not other node_modules
-            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var packageRootPath = moduleFileName.substring(0, packageRootIndex);
                 var packageJsonPath = ts.combinePaths(packageRootPath, "package.json");
