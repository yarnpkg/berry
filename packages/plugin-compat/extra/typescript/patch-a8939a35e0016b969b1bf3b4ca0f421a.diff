diff --git a/lib/tsc.js b/lib/tsc.js
index ddac1f06e..3e8ea9ec0 100644
semver exclusivity >=4.8.0-beta <4.8.1-rc
--- a/lib/tsc.js
+++ b/lib/tsc.js
@@ -4550,6 +4550,9 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                if (process.versions.pnp) {
+                    return true;
+                }
                 if (platform === "win32" || platform === "win64") {
                     return false;
                 }
@@ -34968,15 +34971,15 @@ var ts;
         }
     }
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
@@ -34987,6 +34990,37 @@ var ts;
         var useCaseSensitiveFileNames = typeof host.useCaseSensitiveFileNames === "function" ? host.useCaseSensitiveFileNames() : host.useCaseSensitiveFileNames;
         return ts.comparePaths(path1, path2, !useCaseSensitiveFileNames) === 0;
     }
+    function getPnpTypeRoots(currentDirectory) {
+        var pnpapi = getPnpApi(currentDirectory);
+        if (!pnpapi) {
+            return [];
+        }
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var currentPackage = pnpapi.findPackageLocator("".concat(currentDirectory, "/"));
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    ts.getPnpTypeRoots = getPnpTypeRoots;
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArray(__spreadArray([], nmTypes, true), pnpTypes, true);
+        }
+    }
     function resolveTypeReferenceDirective(typeReferenceDirectiveName, containingFile, options, host, redirectedReference, cache, resolutionMode) {
         ts.Debug.assert(typeof typeReferenceDirectiveName === "string", "Non-string value passed to `ts.resolveTypeReferenceDirective`, likely by a wrapping package working with an outdated `resolveTypeReferenceDirectives` signature. This is probably not a problem in TS itself.");
         var traceEnabled = isTraceEnabled(options, host);
@@ -35112,7 +35146,9 @@ var ts;
                 }
                 var result_4;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, undefined, undefined);
+                    var searchResult = getPnpApi(initialLocationForSecondaryLookup)
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, undefined, undefined)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, undefined, undefined);
                     result_4 = searchResult && searchResult.value;
                 }
                 else {
@@ -35712,7 +35748,9 @@ var ts;
                     if (traceEnabled) {
                         trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                     }
-                    resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                    resolved_1 = getPnpApi(containingDirectory)
+                        ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference)
+                        : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
                 }
                 if (!resolved_1)
                     return undefined;
@@ -36557,6 +36595,14 @@ var ts;
     }
     function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference) {
         var candidate = ts.normalizePath(ts.combinePaths(nodeModulesDirectory, moduleName));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, undefined, undefined);
+    }
+    function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state, cache, redirectedReference) {
+        var candidate = ts.normalizePath(ts.combinePaths(packageDirectory, rest));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, undefined, undefined, true, state, cache, redirectedReference, candidate, rest, packageDirectory);
+    }
+    function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory) {
+        var _a;
         var packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
         if (!(state.features & NodeResolutionFeatures.Exports)) {
             if (packageInfo) {
@@ -36568,7 +36614,9 @@ var ts;
                 return withPackageId(packageInfo, fromDirectory);
             }
         }
-        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageName;
+        if (rest === undefined)
+            (_a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest);
         var loader = function (extensions, candidate, onlyRecordFailures, state) {
             var _a;
             if (packageInfo && packageInfo.packageJsonContent.exports && state.features & NodeResolutionFeatures.Exports) {
@@ -36584,7 +36632,8 @@ var ts;
             return withPackageId(packageInfo, pathAndExtension);
         };
         if (rest !== "") {
-            var packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
+            if (packageDirectory === undefined)
+                packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
             packageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state);
             if (packageInfo && packageInfo.versionPaths) {
                 if (state.traceEnabled) {
@@ -36748,6 +36797,47 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi("".concat(path, "/"));
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, "".concat(containingDirectory, "/"), { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution).replace(/\/$/, "");
+        }
+        catch (_a) {
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state, cache, redirectedReference)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? loadModuleFromPnpResolution(Extensions.DtsOnly, typePackageResolution, rest, state, cache, redirectedReference)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 var ts;
 (function (ts) {
@@ -96126,6 +96216,7 @@ var ts;
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["None"] = 0] = "None";
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Partial"] = 1] = "Partial";
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Full"] = 2] = "Full";
+        ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Resolutions"] = 3] = "Resolutions";
     })(ConfigFileProgramReloadLevel = ts.ConfigFileProgramReloadLevel || (ts.ConfigFileProgramReloadLevel = {}));
     function updateSharedExtendedConfigFileWatcher(projectPath, options, extendedConfigFilesMap, createExtendedConfigFileWatch, toPath) {
         var _a;
@@ -102355,6 +102446,26 @@ var ts;
                 return undefined;
             }
             var parts = ts.getNodeModulePathParts(path);
+            var packageName;
+            if (!parts && typeof process.versions.pnp !== "undefined") {
+                var findPnpApi = require("module").findPnpApi;
+                var pnpApi = findPnpApi(path);
+                var locator = pnpApi === null || pnpApi === void 0 ? void 0 : pnpApi.findPackageLocator(path);
+                if (locator !== null && locator !== undefined) {
+                    var sourceLocator = pnpApi.findPackageLocator("".concat(sourceDirectory, "/"));
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        packageRootIndex: information.packageLocation.length - 1,
+                        fileNameIndex: path.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -102391,14 +102502,18 @@ var ts;
             if (isRedirect && !isPackageRootPath) {
                 return undefined;
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            if (typeof process.versions.pnp === "undefined") {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
-            var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
-            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            var nodeModulesDirectoryName = typeof packageName !== "undefined"
+                ? packageName + moduleSpecifier.substring(parts.packageRootIndex)
+                : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var _a, _b;
                 var packageRootPath = path.substring(0, packageRootIndex);
@@ -103204,6 +103319,10 @@ var ts;
         if (configFileName) {
             configFileWatcher = watchFile(configFileName, scheduleProgramReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
         }
+        var pnpFileWatcher;
+        if (typeof process.versions.pnp !== "undefined") {
+            pnpFileWatcher = watchFile(require.resolve("pnpapi"), scheduleResolutionReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
+        }
         var compilerHost = ts.createCompilerHostFromProgramHost(host, function () { return compilerOptions; }, directoryStructureHost);
         ts.setGetSourceFileAsHashVersioned(compilerHost, host);
         var getNewSourceFile = compilerHost.getSourceFile;
@@ -103276,6 +103395,10 @@ var ts;
                 configFileWatcher.close();
                 configFileWatcher = undefined;
             }
+            if (pnpFileWatcher) {
+                pnpFileWatcher.close();
+                pnpFileWatcher = undefined;
+            }
             extendedConfigCache === null || extendedConfigCache === void 0 ? void 0 : extendedConfigCache.clear();
             extendedConfigCache = undefined;
             if (sharedExtendedConfigFileWatchers) {
@@ -103308,7 +103431,8 @@ var ts;
         function getCurrentProgram() {
             return builderProgram && builderProgram.getProgramOrUndefined();
         }
-        function synchronizeProgram() {
+        function synchronizeProgram(forceAllFilesAsInvalidated) {
+            if (forceAllFilesAsInvalidated === void 0) { forceAllFilesAsInvalidated = false; }
             writeLog("Synchronizing program");
             clearInvalidateResolutionsOfFailedLookupLocations();
             var program = getCurrentBuilderProgram();
@@ -103318,7 +103442,7 @@ var ts;
                     resolutionCache.clear();
                 }
             }
-            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution);
+            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution || forceAllFilesAsInvalidated);
             if (ts.isProgramUptoDate(getCurrentProgram(), rootFileNames, compilerOptions, getSourceVersion, fileExists, hasInvalidatedResolution, hasChangedAutomaticTypeDirectiveNames, getParsedCommandLine, projectReferences)) {
                 if (hasChangedConfigFileParsingErrors) {
                     if (reportFileChangeDetectedOnCreateProgram) {
@@ -103507,6 +103631,12 @@ var ts;
             reloadLevel = ts.ConfigFileProgramReloadLevel.Full;
             scheduleProgramUpdate();
         }
+        function scheduleResolutionReload() {
+            writeLog("Clearing resolutions");
+            resolutionCache.clear();
+            reloadLevel = ts.ConfigFileProgramReloadLevel.Resolutions;
+            scheduleProgramUpdate();
+        }
         function updateProgramWithWatchStatus() {
             timerToUpdateProgram = undefined;
             reportFileChangeDetectedOnCreateProgram = true;
@@ -103522,6 +103652,10 @@ var ts;
                     ts.perfLogger.logStartUpdateProgram("FullConfigReload");
                     reloadConfigFile();
                     break;
+                case ts.ConfigFileProgramReloadLevel.Resolutions:
+                    ts.perfLogger.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+                    synchronizeProgram(true);
+                    break;
                 default:
                     ts.perfLogger.logStartUpdateProgram("SynchronizeProgram");
                     synchronizeProgram();
diff --git a/lib/tsserver.js b/lib/tsserver.js
index 3ab7d98ba..4b6dbe734 100644
semver exclusivity >=4.8.0-beta <4.8.1-rc
--- a/lib/tsserver.js
+++ b/lib/tsserver.js
@@ -7148,6 +7148,11 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                // The PnP runtime is always case-sensitive
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    return true;
+                }
                 // win32\win64 are case insensitive platforms
                 if (platform === "win32" || platform === "win64") {
                     return false;
@@ -42838,18 +42843,17 @@ var ts;
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
     /**
      * Returns the path to every node_modules/@types directory from some ancestor directory.
-     * Returns undefined if there are none.
      */
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
             // And if it doesn't exist, tough.
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
@@ -42860,6 +42864,42 @@ var ts;
         var useCaseSensitiveFileNames = typeof host.useCaseSensitiveFileNames === "function" ? host.useCaseSensitiveFileNames() : host.useCaseSensitiveFileNames;
         return ts.comparePaths(path1, path2, !useCaseSensitiveFileNames) === 0 /* Comparison.EqualTo */;
     }
+    /**
+     * @internal
+     */
+    function getPnpTypeRoots(currentDirectory) {
+        var pnpapi = getPnpApi(currentDirectory);
+        if (!pnpapi) {
+            return [];
+        }
+        // Some TS consumers pass relative paths that aren't normalized
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var currentPackage = pnpapi.findPackageLocator("".concat(currentDirectory, "/"));
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            // eslint-disable-next-line no-null/no-null
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    ts.getPnpTypeRoots = getPnpTypeRoots;
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArray(__spreadArray([], nmTypes, true), pnpTypes, true);
+        }
+    }
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
@@ -42999,7 +43039,9 @@ var ts;
                 }
                 var result_4;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
+                    var searchResult = getPnpApi(initialLocationForSecondaryLookup)
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
                     result_4 = searchResult && searchResult.value;
                 }
                 else {
@@ -43726,7 +43768,9 @@ var ts;
                     if (traceEnabled) {
                         trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                     }
-                    resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                    resolved_1 = getPnpApi(containingDirectory)
+                        ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference)
+                        : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
                 }
                 if (!resolved_1)
                     return undefined;
@@ -44674,6 +44718,14 @@ var ts;
     }
     function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference) {
         var candidate = ts.normalizePath(ts.combinePaths(nodeModulesDirectory, moduleName));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, /* rest */ undefined, /* packageDirectory */ undefined);
+    }
+    function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state, cache, redirectedReference) {
+        var candidate = ts.normalizePath(ts.combinePaths(packageDirectory, rest));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, /*moduleName*/ undefined, /*nodeModulesDirectory*/ undefined, /*nodeModulesDirectoryExists*/ true, state, cache, redirectedReference, candidate, rest, packageDirectory);
+    }
+    function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory) {
+        var _a;
         // First look for a nested package.json, as in `node_modules/foo/bar/package.json`.
         var packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
         // But only if we're not respecting export maps (if we are, we might redirect around this location)
@@ -44687,7 +44739,9 @@ var ts;
                 return withPackageId(packageInfo, fromDirectory);
             }
         }
-        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageName;
+        if (rest === undefined)
+            (_a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest);
         var loader = function (extensions, candidate, onlyRecordFailures, state) {
             var _a;
             // package exports are higher priority than file/directory lookups (and, if there's exports present, blocks them)
@@ -44707,7 +44761,8 @@ var ts;
             return withPackageId(packageInfo, pathAndExtension);
         };
         if (rest !== "") { // If "rest" is empty, we just did this search above.
-            var packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
+            if (packageDirectory === undefined)
+                packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
             // Don't use a "types" or "main" from here because we're not loading the root, but a subdirectory -- just here for the packageId and path mappings.
             packageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state);
             if (packageInfo && packageInfo.versionPaths) {
@@ -44894,6 +44949,58 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    /**
+     * We only allow PnP to be used as a resolution strategy if TypeScript
+     * itself is executed under a PnP runtime (and we only allow it to access
+     * the current PnP runtime, not any on the disk). This ensures that we
+     * don't execute potentially malicious code that didn't already have a
+     * chance to be executed (if we're running within the runtime, it means
+     * that the runtime has already been executed).
+     * @internal
+     */
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi("".concat(path, "/"));
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, "".concat(containingDirectory, "/"), { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution).replace(/\/$/, "");
+        }
+        catch (_a) {
+            // Nothing to do
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    /* @internal */
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state, cache, redirectedReference)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? loadModuleFromPnpResolution(Extensions.DtsOnly, typePackageResolution, rest, state, cache, redirectedReference)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 /* @internal */
 var ts;
@@ -116357,6 +116464,8 @@ var ts;
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Partial"] = 1] = "Partial";
         /** Reload completely by re-reading contents of config file from disk and updating program */
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Full"] = 2] = "Full";
+        /** Reload the resolutions */
+        ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Resolutions"] = 3] = "Resolutions";
     })(ConfigFileProgramReloadLevel = ts.ConfigFileProgramReloadLevel || (ts.ConfigFileProgramReloadLevel = {}));
     /**
      * Updates the map of shared extended config file watches with a new set of extended config files from a base config file of the project
@@ -123546,6 +123655,30 @@ var ts;
                 return undefined;
             }
             var parts = ts.getNodeModulePathParts(path);
+            var packageName;
+            if (!parts && typeof process.versions.pnp !== "undefined") {
+                var findPnpApi = require("module").findPnpApi;
+                var pnpApi = findPnpApi(path);
+                var locator = pnpApi === null || pnpApi === void 0 ? void 0 : pnpApi.findPackageLocator(path);
+                // eslint-disable-next-line no-null/no-null
+                if (locator !== null && locator !== undefined) {
+                    var sourceLocator = pnpApi.findPackageLocator("".concat(sourceDirectory, "/"));
+                    // Don't use the package name when the imported file is inside
+                    // the source directory (prefer a relative path instead)
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        // The last character from packageLocation is the trailing "/", we want to point to it
+                        packageRootIndex: information.packageLocation.length - 1,
+                        fileNameIndex: path.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -123585,18 +123718,24 @@ var ts;
             if (isRedirect && !isPackageRootPath) {
                 return undefined;
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            // Get a path that's relative to node_modules or the importing file's path
-            // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            // If PnP is enabled the node_modules entries we'll get will always be relevant even if they
+            // are located in a weird path apparently outside of the source directory
+            if (typeof process.versions.pnp === "undefined") {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                // Get a path that's relative to node_modules or the importing file's path
+                // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
             // If the module was found in @types, get the actual Node package name
-            var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            var nodeModulesDirectoryName = typeof packageName !== "undefined"
+                ? packageName + moduleSpecifier.substring(parts.packageRootIndex)
+                : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
             // For classic resolution, only allow importing from node_modules/@types, not other node_modules
-            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var _a, _b;
                 var packageRootPath = path.substring(0, packageRootIndex);
@@ -124464,6 +124603,10 @@ var ts;
         if (configFileName) {
             configFileWatcher = watchFile(configFileName, scheduleProgramReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
         }
+        var pnpFileWatcher;
+        if (typeof process.versions.pnp !== "undefined") {
+            pnpFileWatcher = watchFile(require.resolve("pnpapi"), scheduleResolutionReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
+        }
         var compilerHost = ts.createCompilerHostFromProgramHost(host, function () { return compilerOptions; }, directoryStructureHost);
         ts.setGetSourceFileAsHashVersioned(compilerHost, host);
         // Members for CompilerHost
@@ -124543,6 +124686,10 @@ var ts;
                 configFileWatcher.close();
                 configFileWatcher = undefined;
             }
+            if (pnpFileWatcher) {
+                pnpFileWatcher.close();
+                pnpFileWatcher = undefined;
+            }
             extendedConfigCache === null || extendedConfigCache === void 0 ? void 0 : extendedConfigCache.clear();
             extendedConfigCache = undefined;
             if (sharedExtendedConfigFileWatchers) {
@@ -124575,7 +124722,8 @@ var ts;
         function getCurrentProgram() {
             return builderProgram && builderProgram.getProgramOrUndefined();
         }
-        function synchronizeProgram() {
+        function synchronizeProgram(forceAllFilesAsInvalidated) {
+            if (forceAllFilesAsInvalidated === void 0) { forceAllFilesAsInvalidated = false; }
             writeLog("Synchronizing program");
             clearInvalidateResolutionsOfFailedLookupLocations();
             var program = getCurrentBuilderProgram();
@@ -124586,7 +124734,7 @@ var ts;
                 }
             }
             // All resolutions are invalid if user provided resolutions
-            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution);
+            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution || forceAllFilesAsInvalidated);
             if (ts.isProgramUptoDate(getCurrentProgram(), rootFileNames, compilerOptions, getSourceVersion, fileExists, hasInvalidatedResolution, hasChangedAutomaticTypeDirectiveNames, getParsedCommandLine, projectReferences)) {
                 if (hasChangedConfigFileParsingErrors) {
                     if (reportFileChangeDetectedOnCreateProgram) {
@@ -124797,6 +124945,12 @@ var ts;
             reloadLevel = ts.ConfigFileProgramReloadLevel.Full;
             scheduleProgramUpdate();
         }
+        function scheduleResolutionReload() {
+            writeLog("Clearing resolutions");
+            resolutionCache.clear();
+            reloadLevel = ts.ConfigFileProgramReloadLevel.Resolutions;
+            scheduleProgramUpdate();
+        }
         function updateProgramWithWatchStatus() {
             timerToUpdateProgram = undefined;
             reportFileChangeDetectedOnCreateProgram = true;
@@ -124812,6 +124966,10 @@ var ts;
                     ts.perfLogger.logStartUpdateProgram("FullConfigReload");
                     reloadConfigFile();
                     break;
+                case ts.ConfigFileProgramReloadLevel.Resolutions:
+                    ts.perfLogger.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+                    synchronizeProgram(/*forceAllFilesAsInvalidated*/ true);
+                    break;
                 default:
                     ts.perfLogger.logStartUpdateProgram("SynchronizeProgram");
                     synchronizeProgram();
@@ -130729,7 +130887,7 @@ var ts;
      * Don't include something from a `node_modules` that isn't actually reachable by a global import.
      * A relative import to node_modules is usually a bad idea.
      */
-    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+    function isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath) {
         // If it's in a `node_modules` but is not reachable from here via a global import, don't bother.
         var toNodeModules = ts.forEachAncestorDirectory(toPath, function (ancestor) { return ts.getBaseFileName(ancestor) === "node_modules" ? ancestor : undefined; });
         var toNodeModulesParent = toNodeModules && ts.getDirectoryPath(getCanonicalFileName(toNodeModules));
@@ -130737,6 +130895,33 @@ var ts;
             || ts.startsWith(getCanonicalFileName(fromPath), toNodeModulesParent)
             || (!!globalCachePath && ts.startsWith(getCanonicalFileName(globalCachePath), toNodeModulesParent));
     }
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi("".concat(path, "/"));
+    }
+    function isImportablePathPnp(fromPath, toPath) {
+        var pnpApi = getPnpApi(fromPath);
+        var fromLocator = pnpApi.findPackageLocator(fromPath);
+        var toLocator = pnpApi.findPackageLocator(toPath);
+        // eslint-disable-next-line no-null/no-null
+        if (toLocator === null) {
+            return false;
+        }
+        var fromInfo = pnpApi.getPackageInformation(fromLocator);
+        var toReference = fromInfo.packageDependencies.get(toLocator.name);
+        return toReference === toLocator.reference;
+    }
+    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+        if (getPnpApi(fromPath)) {
+            return isImportablePathPnp(fromPath, toPath);
+        }
+        else {
+            return isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath);
+        }
+    }
     function forEachExternalModuleToImportFrom(program, host, preferences, useAutoImportProvider, cb) {
         var _a, _b;
         var useCaseSensitiveFileNames = ts.hostUsesCaseSensitiveFileNames(host);
@@ -132625,6 +132810,7 @@ var ts;
              *          This includes all files that are found in node_modules/moduleName/ with acceptable file extensions
              */
             function getCompletionEntriesForNonRelativeModules(fragment, scriptPath, compilerOptions, host, typeChecker) {
+                var _a, _b;
                 var baseUrl = compilerOptions.baseUrl, paths = compilerOptions.paths;
                 var result = [];
                 var extensionOptions = getExtensionOptions(compilerOptions);
@@ -132637,8 +132823,8 @@ var ts;
                     }
                 }
                 var fragmentDirectory = getFragmentDirectory(fragment);
-                for (var _i = 0, _a = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _a.length; _i++) {
-                    var ambientName = _a[_i];
+                for (var _i = 0, _c = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _c.length; _i++) {
+                    var ambientName = _c[_i];
                     result.push(nameAndKind(ambientName, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined));
                 }
                 getCompletionEntriesFromTypings(host, compilerOptions, scriptPath, fragmentDirectory, extensionOptions, result);
@@ -132653,8 +132839,8 @@ var ts;
                                 result.push(nameAndKind(moduleName, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined));
                             }
                         };
-                        for (var _b = 0, _c = enumerateNodeModulesVisibleToScript(host, scriptPath); _b < _c.length; _b++) {
-                            var moduleName = _c[_b];
+                        for (var _d = 0, _e = enumerateNodeModulesVisibleToScript(host, scriptPath); _d < _e.length; _d++) {
+                            var moduleName = _e[_d];
                             _loop_3(moduleName);
                         }
                     }
@@ -132665,7 +132851,43 @@ var ts;
                                 getCompletionEntriesForDirectoryFragment(fragment, nodeModules, extensionOptions, host, /*exclude*/ undefined, result);
                             }
                         };
-                        if (fragmentDirectory && isEmitModuleResolutionRespectingExportMaps(compilerOptions)) {
+                        var checkExports_1 = function (packageFile, fragmentSubpath) {
+                            var packageJson = ts.readJson(packageFile, host);
+                            var exports = packageJson.exports;
+                            if (exports) {
+                                if (typeof exports !== "object" || exports === null) { // eslint-disable-line no-null/no-null
+                                    return true; // null exports or entrypoint only, no sub-modules available
+                                }
+                                var keys = ts.getOwnKeys(exports);
+                                var processedKeys = ts.mapDefined(keys, function (k) {
+                                    if (k === ".")
+                                        return undefined;
+                                    if (!ts.startsWith(k, "./"))
+                                        return undefined;
+                                    var subpath = k.substring(2);
+                                    if (!ts.startsWith(subpath, fragmentSubpath))
+                                        return undefined;
+                                    // subpath is a valid export (barring conditions, which we don't currently check here)
+                                    if (!ts.stringContains(subpath, "*")) {
+                                        return subpath;
+                                    }
+                                    // pattern export - only return everything up to the `*`, so the user can autocomplete, then
+                                    // keep filling in the pattern (we could speculatively return a list of options by hitting disk,
+                                    // but conditions will make that somewhat awkward, as each condition may have a different set of possible
+                                    // options for the `*`.
+                                    return subpath.slice(0, subpath.indexOf("*"));
+                                });
+                                ts.forEach(processedKeys, function (k) {
+                                    if (k) {
+                                        result.push(nameAndKind(k, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined));
+                                    }
+                                });
+                                return true;
+                            }
+                            return false;
+                        };
+                        var shouldCheckExports = fragmentDirectory && isEmitModuleResolutionRespectingExportMaps(compilerOptions);
+                        if (shouldCheckExports) {
                             var nodeModulesDirectoryLookup_1 = ancestorLookup;
                             ancestorLookup = function (ancestor) {
                                 var components = ts.getPathComponents(fragment);
@@ -132683,44 +132905,45 @@ var ts;
                                 }
                                 var packageFile = ts.combinePaths(ancestor, "node_modules", packagePath, "package.json");
                                 if (ts.tryFileExists(host, packageFile)) {
-                                    var packageJson = ts.readJson(packageFile, host);
-                                    var exports = packageJson.exports;
-                                    if (exports) {
-                                        if (typeof exports !== "object" || exports === null) { // eslint-disable-line no-null/no-null
-                                            return; // null exports or entrypoint only, no sub-modules available
-                                        }
-                                        var keys = ts.getOwnKeys(exports);
-                                        var fragmentSubpath_1 = components.join("/");
-                                        var processedKeys = ts.mapDefined(keys, function (k) {
-                                            if (k === ".")
-                                                return undefined;
-                                            if (!ts.startsWith(k, "./"))
-                                                return undefined;
-                                            var subpath = k.substring(2);
-                                            if (!ts.startsWith(subpath, fragmentSubpath_1))
-                                                return undefined;
-                                            // subpath is a valid export (barring conditions, which we don't currently check here)
-                                            if (!ts.stringContains(subpath, "*")) {
-                                                return subpath;
-                                            }
-                                            // pattern export - only return everything up to the `*`, so the user can autocomplete, then
-                                            // keep filling in the pattern (we could speculatively return a list of options by hitting disk,
-                                            // but conditions will make that somewhat awkward, as each condition may have a different set of possible
-                                            // options for the `*`.
-                                            return subpath.slice(0, subpath.indexOf("*"));
-                                        });
-                                        ts.forEach(processedKeys, function (k) {
-                                            if (k) {
-                                                result.push(nameAndKind(k, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined));
-                                            }
-                                        });
+                                    if (checkExports_1(packageFile, components.join("/"))) {
                                         return;
                                     }
                                 }
                                 return nodeModulesDirectoryLookup_1(ancestor);
                             };
                         }
-                        ts.forEachAncestorDirectory(scriptPath, ancestorLookup);
+                        var pnpapi = (_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath);
+                        if (pnpapi) {
+                            // Splits a require request into its components, or return null if the request is a file path
+                            var pathRegExp = /^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:@[^/]+\/)?[^/]+)\/*(.*|)$/;
+                            var dependencyNameMatch = fragment.match(pathRegExp);
+                            if (dependencyNameMatch) {
+                                var dependencyName = dependencyNameMatch[1], subPath = dependencyNameMatch[2];
+                                var unqualified = void 0;
+                                try {
+                                    unqualified = pnpapi.resolveToUnqualified(dependencyName, scriptPath, { considerBuiltins: false });
+                                }
+                                catch (_f) {
+                                    // It's fine if the resolution fails
+                                }
+                                if (unqualified) {
+                                    var normalizedPath = ts.normalizePath(unqualified);
+                                    var shouldGetCompletions = true;
+                                    if (shouldCheckExports) {
+                                        var packageFile = ts.combinePaths(normalizedPath, "package.json");
+                                        if (ts.tryFileExists(host, packageFile) && checkExports_1(packageFile, subPath)) {
+                                            shouldGetCompletions = false;
+                                        }
+                                    }
+                                    if (shouldGetCompletions) {
+                                        getCompletionEntriesForDirectoryFragment(subPath, normalizedPath, extensionOptions, host, /*exclude*/ undefined, result);
+                                    }
+                                }
+                            }
+                        }
+                        else {
+                            ts.forEachAncestorDirectory(scriptPath, ancestorLookup);
+                        }
                     }
                 }
                 return result;
@@ -132826,6 +133049,7 @@ var ts;
                 return addReplacementSpans(toComplete, range.pos + prefix.length, names);
             }
             function getCompletionEntriesFromTypings(host, options, scriptPath, fragmentDirectory, extensionOptions, result) {
+                var _a, _b;
                 if (result === void 0) { result = []; }
                 // Check for typings specified in compiler options
                 var seen = new ts.Map();
@@ -132834,11 +133058,19 @@ var ts;
                     var root = typeRoots_1[_i];
                     getCompletionEntriesFromDirectories(root);
                 }
-                // Also get all @types typings installed in visible node_modules directories
-                for (var _a = 0, _b = ts.findPackageJsons(scriptPath, host); _a < _b.length; _a++) {
-                    var packageJson = _b[_a];
-                    var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
-                    getCompletionEntriesFromDirectories(typesDir);
+                if ((_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath)) {
+                    for (var _c = 0, _d = ts.getPnpTypeRoots(scriptPath); _c < _d.length; _c++) {
+                        var root = _d[_c];
+                        getCompletionEntriesFromDirectories(root);
+                    }
+                }
+                else {
+                    // Also get all @types typings installed in visible node_modules directories
+                    for (var _e = 0, _f = ts.findPackageJsons(scriptPath, host); _e < _f.length; _e++) {
+                        var packageJson = _f[_e];
+                        var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
+                        getCompletionEntriesFromDirectories(typesDir);
+                    }
                 }
                 return result;
                 function getCompletionEntriesFromDirectories(directory) {
@@ -163388,9 +163620,9 @@ var ts;
                 if (isTopLevelDeclarationStatement(statement) &&
                     !isExported(sourceFile, statement, useEs6Exports) &&
                     forEachTopLevelDeclaration(statement, function (d) { return needExport.has(ts.Debug.checkDefined(d.symbol)); })) {
-                    var exports = addExport(statement, useEs6Exports);
-                    if (exports)
-                        return exports;
+                    var exports_1 = addExport(statement, useEs6Exports);
+                    if (exports_1)
+                        return exports_1;
                 }
                 return statement;
             });
@@ -172536,6 +172768,40 @@ var ts;
                 return this.projectReferences;
             };
             ConfiguredProject.prototype.updateReferences = function (refs) {
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    // With Plug'n'Play, dependencies that list peer dependencies
+                    // are "virtualized": they are resolved to a unique (virtual)
+                    // path that the underlying filesystem layer then resolve back
+                    // to the original location.
+                    //
+                    // When a workspace depends on another workspace with peer
+                    // dependencies, this other workspace will thus be resolved to
+                    // a unique path that won't match what the initial project has
+                    // listed in its `references` field, and TS thus won't leverage
+                    // the reference at all.
+                    //
+                    // To avoid that, we compute here the virtualized paths for the
+                    // user-provided references in our references by directly querying
+                    // the PnP API. This way users don't have to know the virtual paths,
+                    // but we still support them just fine even through references.
+                    var basePath_1 = this.getCurrentDirectory();
+                    var findPnpApi_1 = require("module").findPnpApi;
+                    var getPnpPath_1 = function (path) {
+                        try {
+                            var pnpApi = findPnpApi_1("".concat(path, "/"));
+                            var targetLocator = pnpApi.findPackageLocator("".concat(path, "/"));
+                            var packageLocation = pnpApi.getPackageInformation(targetLocator).packageLocation;
+                            var request = ts.combinePaths(targetLocator.name, ts.getRelativePathFromDirectory(packageLocation, path, /*ignoreCase*/ false));
+                            return pnpApi.resolveToUnqualified(request, "".concat(basePath_1, "/"));
+                        }
+                        catch (_a) {
+                            // something went wrong with the resolution, try not to fail
+                            return path;
+                        }
+                    };
+                    refs = refs === null || refs === void 0 ? void 0 : refs.map(function (r) { return (__assign(__assign({}, r), { path: getPnpPath_1(r.path) })); });
+                }
                 this.projectReferences = refs;
                 this.potentialProjectReferences = undefined;
             };
@@ -173154,6 +173420,7 @@ var ts;
                         watchDirectory: ts.returnNoopFileWatcher,
                     } :
                     ts.getWatchFactory(this.host, watchLogLevel, log, getDetailWatchInfo);
+                this.pnpWatcher = this.watchPnpFile();
             }
             ProjectService.prototype.toPath = function (fileName) {
                 return ts.toPath(fileName, this.currentDirectory, this.toCanonicalFileName);
@@ -175011,7 +175278,7 @@ var ts;
             };
             ProjectService.prototype.setHostConfiguration = function (args) {
                 var _this = this;
-                var _a;
+                var _a, _b;
                 if (args.file) {
                     var info = this.getScriptInfoForNormalizedPath(server.toNormalizedPath(args.file));
                     if (info) {
@@ -175029,7 +175296,7 @@ var ts;
                         this.logger.info("Format host information updated");
                     }
                     if (args.preferences) {
-                        var _b = this.hostConfiguration.preferences, lazyConfiguredProjectsFromExternalProject = _b.lazyConfiguredProjectsFromExternalProject, includePackageJsonAutoImports = _b.includePackageJsonAutoImports;
+                        var _c = this.hostConfiguration.preferences, lazyConfiguredProjectsFromExternalProject = _c.lazyConfiguredProjectsFromExternalProject, includePackageJsonAutoImports = _c.includePackageJsonAutoImports;
                         this.hostConfiguration.preferences = __assign(__assign({}, this.hostConfiguration.preferences), args.preferences);
                         if (lazyConfiguredProjectsFromExternalProject && !this.hostConfiguration.preferences.lazyConfiguredProjectsFromExternalProject) {
                             // Load configured projects for external projects that are pending reload
@@ -175055,6 +175322,8 @@ var ts;
                     if (args.watchOptions) {
                         this.hostConfiguration.watchOptions = (_a = convertWatchOptions(args.watchOptions)) === null || _a === void 0 ? void 0 : _a.watchOptions;
                         this.logger.info("Host watch options changed to ".concat(JSON.stringify(this.hostConfiguration.watchOptions), ", it will be take effect for next watches."));
+                        (_b = this.pnpWatcher) === null || _b === void 0 ? void 0 : _b.close();
+                        this.watchPnpFile();
                     }
                 }
             };
@@ -176190,6 +176459,27 @@ var ts;
                 });
             };
             /*@internal*/
+            ProjectService.prototype.watchPnpFile = function () {
+                var _this = this;
+                if (typeof process.versions.pnp === "undefined") {
+                    return;
+                }
+                var findPnpApi = require("module").findPnpApi;
+                // eslint-disable-next-line no-null/no-null
+                var pnpFileName = findPnpApi(__filename).resolveRequest("pnpapi", /*issuer*/ null);
+                return this.watchFactory.watchFile(pnpFileName, function () {
+                    _this.forEachProject(function (project) {
+                        for (var _i = 0, _a = project.getScriptInfos(); _i < _a.length; _i++) {
+                            var info = _a[_i];
+                            project.resolutionCache.invalidateResolutionOfFile(info.path);
+                        }
+                        project.markAsDirty();
+                        updateProjectIfDirty(project);
+                    });
+                    _this.delayEnsureProjectForOpenFiles();
+                }, ts.PollingInterval.Low, this.hostConfiguration.watchOptions, ts.WatchType.ConfigFile);
+            };
+            /*@internal*/
             ProjectService.prototype.watchPackageJsonFile = function (path) {
                 var _this = this;
                 var watchers = this.packageJsonFilesMap || (this.packageJsonFilesMap = new ts.Map());
@@ -182936,6 +183226,11 @@ var ts;
                         }
                         try {
                             var args = [ts.combinePaths(__dirname, "watchGuard.js"), path];
+                            if (typeof process.versions.pnp !== "undefined") {
+                                var findPnpApi = require("module").findPnpApi;
+                                // eslint-disable-next-line no-null/no-null
+                                args.unshift("-r", findPnpApi(__filename).resolveRequest("pnpapi", /* issuer */ null));
+                            }
                             if (logger.hasLevel(server.LogLevel.verbose)) {
                                 logger.info("Starting ".concat(process.execPath, " with args:").concat(server.stringifyIndented(args)));
                             }
@@ -183196,6 +183491,11 @@ var ts;
                             break;
                         }
                     }
+                    if (typeof process.versions.pnp !== "undefined") {
+                        var findPnpApi = require("module").findPnpApi;
+                        // eslint-disable-next-line no-null/no-null
+                        execArgv.unshift("-r", findPnpApi(__filename).resolveRequest("pnpapi", /* issuer */ null));
+                    }
                     this.installer = childProcess.fork(ts.combinePaths(__dirname, "typingsInstaller.js"), args, { execArgv: execArgv });
                     this.installer.on("message", function (m) { return _this.handleMessage(m); });
                     // We have to schedule this event to the next tick
diff --git a/lib/tsserverlibrary.js b/lib/tsserverlibrary.js
index 5ba14d9ce..bd17c80a6 100644
semver exclusivity >=4.8.0-beta <4.8.1-rc
--- a/lib/tsserverlibrary.js
+++ b/lib/tsserverlibrary.js
@@ -7342,6 +7342,11 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                // The PnP runtime is always case-sensitive
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    return true;
+                }
                 // win32\win64 are case insensitive platforms
                 if (platform === "win32" || platform === "win64") {
                     return false;
@@ -43032,18 +43037,17 @@ var ts;
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
     /**
      * Returns the path to every node_modules/@types directory from some ancestor directory.
-     * Returns undefined if there are none.
      */
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
             // And if it doesn't exist, tough.
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
@@ -43054,6 +43058,42 @@ var ts;
         var useCaseSensitiveFileNames = typeof host.useCaseSensitiveFileNames === "function" ? host.useCaseSensitiveFileNames() : host.useCaseSensitiveFileNames;
         return ts.comparePaths(path1, path2, !useCaseSensitiveFileNames) === 0 /* Comparison.EqualTo */;
     }
+    /**
+     * @internal
+     */
+    function getPnpTypeRoots(currentDirectory) {
+        var pnpapi = getPnpApi(currentDirectory);
+        if (!pnpapi) {
+            return [];
+        }
+        // Some TS consumers pass relative paths that aren't normalized
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var currentPackage = pnpapi.findPackageLocator("".concat(currentDirectory, "/"));
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            // eslint-disable-next-line no-null/no-null
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    ts.getPnpTypeRoots = getPnpTypeRoots;
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArray(__spreadArray([], nmTypes, true), pnpTypes, true);
+        }
+    }
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
@@ -43193,7 +43233,9 @@ var ts;
                 }
                 var result_4;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
+                    var searchResult = getPnpApi(initialLocationForSecondaryLookup)
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
                     result_4 = searchResult && searchResult.value;
                 }
                 else {
@@ -43920,7 +43962,9 @@ var ts;
                     if (traceEnabled) {
                         trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                     }
-                    resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                    resolved_1 = getPnpApi(containingDirectory)
+                        ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference)
+                        : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
                 }
                 if (!resolved_1)
                     return undefined;
@@ -44868,6 +44912,14 @@ var ts;
     }
     function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference) {
         var candidate = ts.normalizePath(ts.combinePaths(nodeModulesDirectory, moduleName));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, /* rest */ undefined, /* packageDirectory */ undefined);
+    }
+    function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state, cache, redirectedReference) {
+        var candidate = ts.normalizePath(ts.combinePaths(packageDirectory, rest));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, /*moduleName*/ undefined, /*nodeModulesDirectory*/ undefined, /*nodeModulesDirectoryExists*/ true, state, cache, redirectedReference, candidate, rest, packageDirectory);
+    }
+    function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory) {
+        var _a;
         // First look for a nested package.json, as in `node_modules/foo/bar/package.json`.
         var packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
         // But only if we're not respecting export maps (if we are, we might redirect around this location)
@@ -44881,7 +44933,9 @@ var ts;
                 return withPackageId(packageInfo, fromDirectory);
             }
         }
-        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageName;
+        if (rest === undefined)
+            (_a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest);
         var loader = function (extensions, candidate, onlyRecordFailures, state) {
             var _a;
             // package exports are higher priority than file/directory lookups (and, if there's exports present, blocks them)
@@ -44901,7 +44955,8 @@ var ts;
             return withPackageId(packageInfo, pathAndExtension);
         };
         if (rest !== "") { // If "rest" is empty, we just did this search above.
-            var packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
+            if (packageDirectory === undefined)
+                packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
             // Don't use a "types" or "main" from here because we're not loading the root, but a subdirectory -- just here for the packageId and path mappings.
             packageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state);
             if (packageInfo && packageInfo.versionPaths) {
@@ -45088,6 +45143,58 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    /**
+     * We only allow PnP to be used as a resolution strategy if TypeScript
+     * itself is executed under a PnP runtime (and we only allow it to access
+     * the current PnP runtime, not any on the disk). This ensures that we
+     * don't execute potentially malicious code that didn't already have a
+     * chance to be executed (if we're running within the runtime, it means
+     * that the runtime has already been executed).
+     * @internal
+     */
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi("".concat(path, "/"));
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, "".concat(containingDirectory, "/"), { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution).replace(/\/$/, "");
+        }
+        catch (_a) {
+            // Nothing to do
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    /* @internal */
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state, cache, redirectedReference)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? loadModuleFromPnpResolution(Extensions.DtsOnly, typePackageResolution, rest, state, cache, redirectedReference)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 /* @internal */
 var ts;
@@ -116551,6 +116658,8 @@ var ts;
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Partial"] = 1] = "Partial";
         /** Reload completely by re-reading contents of config file from disk and updating program */
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Full"] = 2] = "Full";
+        /** Reload the resolutions */
+        ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Resolutions"] = 3] = "Resolutions";
     })(ConfigFileProgramReloadLevel = ts.ConfigFileProgramReloadLevel || (ts.ConfigFileProgramReloadLevel = {}));
     /**
      * Updates the map of shared extended config file watches with a new set of extended config files from a base config file of the project
@@ -123740,6 +123849,30 @@ var ts;
                 return undefined;
             }
             var parts = ts.getNodeModulePathParts(path);
+            var packageName;
+            if (!parts && typeof process.versions.pnp !== "undefined") {
+                var findPnpApi = require("module").findPnpApi;
+                var pnpApi = findPnpApi(path);
+                var locator = pnpApi === null || pnpApi === void 0 ? void 0 : pnpApi.findPackageLocator(path);
+                // eslint-disable-next-line no-null/no-null
+                if (locator !== null && locator !== undefined) {
+                    var sourceLocator = pnpApi.findPackageLocator("".concat(sourceDirectory, "/"));
+                    // Don't use the package name when the imported file is inside
+                    // the source directory (prefer a relative path instead)
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        // The last character from packageLocation is the trailing "/", we want to point to it
+                        packageRootIndex: information.packageLocation.length - 1,
+                        fileNameIndex: path.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -123779,18 +123912,24 @@ var ts;
             if (isRedirect && !isPackageRootPath) {
                 return undefined;
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            // Get a path that's relative to node_modules or the importing file's path
-            // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            // If PnP is enabled the node_modules entries we'll get will always be relevant even if they
+            // are located in a weird path apparently outside of the source directory
+            if (typeof process.versions.pnp === "undefined") {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                // Get a path that's relative to node_modules or the importing file's path
+                // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
             // If the module was found in @types, get the actual Node package name
-            var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            var nodeModulesDirectoryName = typeof packageName !== "undefined"
+                ? packageName + moduleSpecifier.substring(parts.packageRootIndex)
+                : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
             // For classic resolution, only allow importing from node_modules/@types, not other node_modules
-            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var _a, _b;
                 var packageRootPath = path.substring(0, packageRootIndex);
@@ -124658,6 +124797,10 @@ var ts;
         if (configFileName) {
             configFileWatcher = watchFile(configFileName, scheduleProgramReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
         }
+        var pnpFileWatcher;
+        if (typeof process.versions.pnp !== "undefined") {
+            pnpFileWatcher = watchFile(require.resolve("pnpapi"), scheduleResolutionReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
+        }
         var compilerHost = ts.createCompilerHostFromProgramHost(host, function () { return compilerOptions; }, directoryStructureHost);
         ts.setGetSourceFileAsHashVersioned(compilerHost, host);
         // Members for CompilerHost
@@ -124737,6 +124880,10 @@ var ts;
                 configFileWatcher.close();
                 configFileWatcher = undefined;
             }
+            if (pnpFileWatcher) {
+                pnpFileWatcher.close();
+                pnpFileWatcher = undefined;
+            }
             extendedConfigCache === null || extendedConfigCache === void 0 ? void 0 : extendedConfigCache.clear();
             extendedConfigCache = undefined;
             if (sharedExtendedConfigFileWatchers) {
@@ -124769,7 +124916,8 @@ var ts;
         function getCurrentProgram() {
             return builderProgram && builderProgram.getProgramOrUndefined();
         }
-        function synchronizeProgram() {
+        function synchronizeProgram(forceAllFilesAsInvalidated) {
+            if (forceAllFilesAsInvalidated === void 0) { forceAllFilesAsInvalidated = false; }
             writeLog("Synchronizing program");
             clearInvalidateResolutionsOfFailedLookupLocations();
             var program = getCurrentBuilderProgram();
@@ -124780,7 +124928,7 @@ var ts;
                 }
             }
             // All resolutions are invalid if user provided resolutions
-            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution);
+            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution || forceAllFilesAsInvalidated);
             if (ts.isProgramUptoDate(getCurrentProgram(), rootFileNames, compilerOptions, getSourceVersion, fileExists, hasInvalidatedResolution, hasChangedAutomaticTypeDirectiveNames, getParsedCommandLine, projectReferences)) {
                 if (hasChangedConfigFileParsingErrors) {
                     if (reportFileChangeDetectedOnCreateProgram) {
@@ -124991,6 +125139,12 @@ var ts;
             reloadLevel = ts.ConfigFileProgramReloadLevel.Full;
             scheduleProgramUpdate();
         }
+        function scheduleResolutionReload() {
+            writeLog("Clearing resolutions");
+            resolutionCache.clear();
+            reloadLevel = ts.ConfigFileProgramReloadLevel.Resolutions;
+            scheduleProgramUpdate();
+        }
         function updateProgramWithWatchStatus() {
             timerToUpdateProgram = undefined;
             reportFileChangeDetectedOnCreateProgram = true;
@@ -125006,6 +125160,10 @@ var ts;
                     ts.perfLogger.logStartUpdateProgram("FullConfigReload");
                     reloadConfigFile();
                     break;
+                case ts.ConfigFileProgramReloadLevel.Resolutions:
+                    ts.perfLogger.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+                    synchronizeProgram(/*forceAllFilesAsInvalidated*/ true);
+                    break;
                 default:
                     ts.perfLogger.logStartUpdateProgram("SynchronizeProgram");
                     synchronizeProgram();
@@ -131342,7 +131500,7 @@ var ts;
      * Don't include something from a `node_modules` that isn't actually reachable by a global import.
      * A relative import to node_modules is usually a bad idea.
      */
-    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+    function isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath) {
         // If it's in a `node_modules` but is not reachable from here via a global import, don't bother.
         var toNodeModules = ts.forEachAncestorDirectory(toPath, function (ancestor) { return ts.getBaseFileName(ancestor) === "node_modules" ? ancestor : undefined; });
         var toNodeModulesParent = toNodeModules && ts.getDirectoryPath(getCanonicalFileName(toNodeModules));
@@ -131350,6 +131508,33 @@ var ts;
             || ts.startsWith(getCanonicalFileName(fromPath), toNodeModulesParent)
             || (!!globalCachePath && ts.startsWith(getCanonicalFileName(globalCachePath), toNodeModulesParent));
     }
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi("".concat(path, "/"));
+    }
+    function isImportablePathPnp(fromPath, toPath) {
+        var pnpApi = getPnpApi(fromPath);
+        var fromLocator = pnpApi.findPackageLocator(fromPath);
+        var toLocator = pnpApi.findPackageLocator(toPath);
+        // eslint-disable-next-line no-null/no-null
+        if (toLocator === null) {
+            return false;
+        }
+        var fromInfo = pnpApi.getPackageInformation(fromLocator);
+        var toReference = fromInfo.packageDependencies.get(toLocator.name);
+        return toReference === toLocator.reference;
+    }
+    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+        if (getPnpApi(fromPath)) {
+            return isImportablePathPnp(fromPath, toPath);
+        }
+        else {
+            return isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath);
+        }
+    }
     function forEachExternalModuleToImportFrom(program, host, preferences, useAutoImportProvider, cb) {
         var _a, _b;
         var useCaseSensitiveFileNames = ts.hostUsesCaseSensitiveFileNames(host);
@@ -133238,6 +133423,7 @@ var ts;
              *          This includes all files that are found in node_modules/moduleName/ with acceptable file extensions
              */
             function getCompletionEntriesForNonRelativeModules(fragment, scriptPath, compilerOptions, host, typeChecker) {
+                var _a, _b;
                 var baseUrl = compilerOptions.baseUrl, paths = compilerOptions.paths;
                 var result = [];
                 var extensionOptions = getExtensionOptions(compilerOptions);
@@ -133250,8 +133436,8 @@ var ts;
                     }
                 }
                 var fragmentDirectory = getFragmentDirectory(fragment);
-                for (var _i = 0, _a = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _a.length; _i++) {
-                    var ambientName = _a[_i];
+                for (var _i = 0, _c = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _c.length; _i++) {
+                    var ambientName = _c[_i];
                     result.push(nameAndKind(ambientName, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined));
                 }
                 getCompletionEntriesFromTypings(host, compilerOptions, scriptPath, fragmentDirectory, extensionOptions, result);
@@ -133266,8 +133452,8 @@ var ts;
                                 result.push(nameAndKind(moduleName, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined));
                             }
                         };
-                        for (var _b = 0, _c = enumerateNodeModulesVisibleToScript(host, scriptPath); _b < _c.length; _b++) {
-                            var moduleName = _c[_b];
+                        for (var _d = 0, _e = enumerateNodeModulesVisibleToScript(host, scriptPath); _d < _e.length; _d++) {
+                            var moduleName = _e[_d];
                             _loop_3(moduleName);
                         }
                     }
@@ -133278,7 +133464,43 @@ var ts;
                                 getCompletionEntriesForDirectoryFragment(fragment, nodeModules, extensionOptions, host, /*exclude*/ undefined, result);
                             }
                         };
-                        if (fragmentDirectory && isEmitModuleResolutionRespectingExportMaps(compilerOptions)) {
+                        var checkExports_1 = function (packageFile, fragmentSubpath) {
+                            var packageJson = ts.readJson(packageFile, host);
+                            var exports = packageJson.exports;
+                            if (exports) {
+                                if (typeof exports !== "object" || exports === null) { // eslint-disable-line no-null/no-null
+                                    return true; // null exports or entrypoint only, no sub-modules available
+                                }
+                                var keys = ts.getOwnKeys(exports);
+                                var processedKeys = ts.mapDefined(keys, function (k) {
+                                    if (k === ".")
+                                        return undefined;
+                                    if (!ts.startsWith(k, "./"))
+                                        return undefined;
+                                    var subpath = k.substring(2);
+                                    if (!ts.startsWith(subpath, fragmentSubpath))
+                                        return undefined;
+                                    // subpath is a valid export (barring conditions, which we don't currently check here)
+                                    if (!ts.stringContains(subpath, "*")) {
+                                        return subpath;
+                                    }
+                                    // pattern export - only return everything up to the `*`, so the user can autocomplete, then
+                                    // keep filling in the pattern (we could speculatively return a list of options by hitting disk,
+                                    // but conditions will make that somewhat awkward, as each condition may have a different set of possible
+                                    // options for the `*`.
+                                    return subpath.slice(0, subpath.indexOf("*"));
+                                });
+                                ts.forEach(processedKeys, function (k) {
+                                    if (k) {
+                                        result.push(nameAndKind(k, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined));
+                                    }
+                                });
+                                return true;
+                            }
+                            return false;
+                        };
+                        var shouldCheckExports = fragmentDirectory && isEmitModuleResolutionRespectingExportMaps(compilerOptions);
+                        if (shouldCheckExports) {
                             var nodeModulesDirectoryLookup_1 = ancestorLookup;
                             ancestorLookup = function (ancestor) {
                                 var components = ts.getPathComponents(fragment);
@@ -133296,44 +133518,45 @@ var ts;
                                 }
                                 var packageFile = ts.combinePaths(ancestor, "node_modules", packagePath, "package.json");
                                 if (ts.tryFileExists(host, packageFile)) {
-                                    var packageJson = ts.readJson(packageFile, host);
-                                    var exports = packageJson.exports;
-                                    if (exports) {
-                                        if (typeof exports !== "object" || exports === null) { // eslint-disable-line no-null/no-null
-                                            return; // null exports or entrypoint only, no sub-modules available
-                                        }
-                                        var keys = ts.getOwnKeys(exports);
-                                        var fragmentSubpath_1 = components.join("/");
-                                        var processedKeys = ts.mapDefined(keys, function (k) {
-                                            if (k === ".")
-                                                return undefined;
-                                            if (!ts.startsWith(k, "./"))
-                                                return undefined;
-                                            var subpath = k.substring(2);
-                                            if (!ts.startsWith(subpath, fragmentSubpath_1))
-                                                return undefined;
-                                            // subpath is a valid export (barring conditions, which we don't currently check here)
-                                            if (!ts.stringContains(subpath, "*")) {
-                                                return subpath;
-                                            }
-                                            // pattern export - only return everything up to the `*`, so the user can autocomplete, then
-                                            // keep filling in the pattern (we could speculatively return a list of options by hitting disk,
-                                            // but conditions will make that somewhat awkward, as each condition may have a different set of possible
-                                            // options for the `*`.
-                                            return subpath.slice(0, subpath.indexOf("*"));
-                                        });
-                                        ts.forEach(processedKeys, function (k) {
-                                            if (k) {
-                                                result.push(nameAndKind(k, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined));
-                                            }
-                                        });
+                                    if (checkExports_1(packageFile, components.join("/"))) {
                                         return;
                                     }
                                 }
                                 return nodeModulesDirectoryLookup_1(ancestor);
                             };
                         }
-                        ts.forEachAncestorDirectory(scriptPath, ancestorLookup);
+                        var pnpapi = (_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath);
+                        if (pnpapi) {
+                            // Splits a require request into its components, or return null if the request is a file path
+                            var pathRegExp = /^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:@[^/]+\/)?[^/]+)\/*(.*|)$/;
+                            var dependencyNameMatch = fragment.match(pathRegExp);
+                            if (dependencyNameMatch) {
+                                var dependencyName = dependencyNameMatch[1], subPath = dependencyNameMatch[2];
+                                var unqualified = void 0;
+                                try {
+                                    unqualified = pnpapi.resolveToUnqualified(dependencyName, scriptPath, { considerBuiltins: false });
+                                }
+                                catch (_f) {
+                                    // It's fine if the resolution fails
+                                }
+                                if (unqualified) {
+                                    var normalizedPath = ts.normalizePath(unqualified);
+                                    var shouldGetCompletions = true;
+                                    if (shouldCheckExports) {
+                                        var packageFile = ts.combinePaths(normalizedPath, "package.json");
+                                        if (ts.tryFileExists(host, packageFile) && checkExports_1(packageFile, subPath)) {
+                                            shouldGetCompletions = false;
+                                        }
+                                    }
+                                    if (shouldGetCompletions) {
+                                        getCompletionEntriesForDirectoryFragment(subPath, normalizedPath, extensionOptions, host, /*exclude*/ undefined, result);
+                                    }
+                                }
+                            }
+                        }
+                        else {
+                            ts.forEachAncestorDirectory(scriptPath, ancestorLookup);
+                        }
                     }
                 }
                 return result;
@@ -133439,6 +133662,7 @@ var ts;
                 return addReplacementSpans(toComplete, range.pos + prefix.length, names);
             }
             function getCompletionEntriesFromTypings(host, options, scriptPath, fragmentDirectory, extensionOptions, result) {
+                var _a, _b;
                 if (result === void 0) { result = []; }
                 // Check for typings specified in compiler options
                 var seen = new ts.Map();
@@ -133447,11 +133671,19 @@ var ts;
                     var root = typeRoots_1[_i];
                     getCompletionEntriesFromDirectories(root);
                 }
-                // Also get all @types typings installed in visible node_modules directories
-                for (var _a = 0, _b = ts.findPackageJsons(scriptPath, host); _a < _b.length; _a++) {
-                    var packageJson = _b[_a];
-                    var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
-                    getCompletionEntriesFromDirectories(typesDir);
+                if ((_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath)) {
+                    for (var _c = 0, _d = ts.getPnpTypeRoots(scriptPath); _c < _d.length; _c++) {
+                        var root = _d[_c];
+                        getCompletionEntriesFromDirectories(root);
+                    }
+                }
+                else {
+                    // Also get all @types typings installed in visible node_modules directories
+                    for (var _e = 0, _f = ts.findPackageJsons(scriptPath, host); _e < _f.length; _e++) {
+                        var packageJson = _f[_e];
+                        var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
+                        getCompletionEntriesFromDirectories(typesDir);
+                    }
                 }
                 return result;
                 function getCompletionEntriesFromDirectories(directory) {
@@ -164001,9 +164233,9 @@ var ts;
                 if (isTopLevelDeclarationStatement(statement) &&
                     !isExported(sourceFile, statement, useEs6Exports) &&
                     forEachTopLevelDeclaration(statement, function (d) { return needExport.has(ts.Debug.checkDefined(d.symbol)); })) {
-                    var exports = addExport(statement, useEs6Exports);
-                    if (exports)
-                        return exports;
+                    var exports_1 = addExport(statement, useEs6Exports);
+                    if (exports_1)
+                        return exports_1;
                 }
                 return statement;
             });
@@ -172730,6 +172962,40 @@ var ts;
                 return this.projectReferences;
             };
             ConfiguredProject.prototype.updateReferences = function (refs) {
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    // With Plug'n'Play, dependencies that list peer dependencies
+                    // are "virtualized": they are resolved to a unique (virtual)
+                    // path that the underlying filesystem layer then resolve back
+                    // to the original location.
+                    //
+                    // When a workspace depends on another workspace with peer
+                    // dependencies, this other workspace will thus be resolved to
+                    // a unique path that won't match what the initial project has
+                    // listed in its `references` field, and TS thus won't leverage
+                    // the reference at all.
+                    //
+                    // To avoid that, we compute here the virtualized paths for the
+                    // user-provided references in our references by directly querying
+                    // the PnP API. This way users don't have to know the virtual paths,
+                    // but we still support them just fine even through references.
+                    var basePath_1 = this.getCurrentDirectory();
+                    var findPnpApi_1 = require("module").findPnpApi;
+                    var getPnpPath_1 = function (path) {
+                        try {
+                            var pnpApi = findPnpApi_1("".concat(path, "/"));
+                            var targetLocator = pnpApi.findPackageLocator("".concat(path, "/"));
+                            var packageLocation = pnpApi.getPackageInformation(targetLocator).packageLocation;
+                            var request = ts.combinePaths(targetLocator.name, ts.getRelativePathFromDirectory(packageLocation, path, /*ignoreCase*/ false));
+                            return pnpApi.resolveToUnqualified(request, "".concat(basePath_1, "/"));
+                        }
+                        catch (_a) {
+                            // something went wrong with the resolution, try not to fail
+                            return path;
+                        }
+                    };
+                    refs = refs === null || refs === void 0 ? void 0 : refs.map(function (r) { return (__assign(__assign({}, r), { path: getPnpPath_1(r.path) })); });
+                }
                 this.projectReferences = refs;
                 this.potentialProjectReferences = undefined;
             };
@@ -173348,6 +173614,7 @@ var ts;
                         watchDirectory: ts.returnNoopFileWatcher,
                     } :
                     ts.getWatchFactory(this.host, watchLogLevel, log, getDetailWatchInfo);
+                this.pnpWatcher = this.watchPnpFile();
             }
             ProjectService.prototype.toPath = function (fileName) {
                 return ts.toPath(fileName, this.currentDirectory, this.toCanonicalFileName);
@@ -175205,7 +175472,7 @@ var ts;
             };
             ProjectService.prototype.setHostConfiguration = function (args) {
                 var _this = this;
-                var _a;
+                var _a, _b;
                 if (args.file) {
                     var info = this.getScriptInfoForNormalizedPath(server.toNormalizedPath(args.file));
                     if (info) {
@@ -175223,7 +175490,7 @@ var ts;
                         this.logger.info("Format host information updated");
                     }
                     if (args.preferences) {
-                        var _b = this.hostConfiguration.preferences, lazyConfiguredProjectsFromExternalProject = _b.lazyConfiguredProjectsFromExternalProject, includePackageJsonAutoImports = _b.includePackageJsonAutoImports;
+                        var _c = this.hostConfiguration.preferences, lazyConfiguredProjectsFromExternalProject = _c.lazyConfiguredProjectsFromExternalProject, includePackageJsonAutoImports = _c.includePackageJsonAutoImports;
                         this.hostConfiguration.preferences = __assign(__assign({}, this.hostConfiguration.preferences), args.preferences);
                         if (lazyConfiguredProjectsFromExternalProject && !this.hostConfiguration.preferences.lazyConfiguredProjectsFromExternalProject) {
                             // Load configured projects for external projects that are pending reload
@@ -175249,6 +175516,8 @@ var ts;
                     if (args.watchOptions) {
                         this.hostConfiguration.watchOptions = (_a = convertWatchOptions(args.watchOptions)) === null || _a === void 0 ? void 0 : _a.watchOptions;
                         this.logger.info("Host watch options changed to ".concat(JSON.stringify(this.hostConfiguration.watchOptions), ", it will be take effect for next watches."));
+                        (_b = this.pnpWatcher) === null || _b === void 0 ? void 0 : _b.close();
+                        this.watchPnpFile();
                     }
                 }
             };
@@ -176384,6 +176653,27 @@ var ts;
                 });
             };
             /*@internal*/
+            ProjectService.prototype.watchPnpFile = function () {
+                var _this = this;
+                if (typeof process.versions.pnp === "undefined") {
+                    return;
+                }
+                var findPnpApi = require("module").findPnpApi;
+                // eslint-disable-next-line no-null/no-null
+                var pnpFileName = findPnpApi(__filename).resolveRequest("pnpapi", /*issuer*/ null);
+                return this.watchFactory.watchFile(pnpFileName, function () {
+                    _this.forEachProject(function (project) {
+                        for (var _i = 0, _a = project.getScriptInfos(); _i < _a.length; _i++) {
+                            var info = _a[_i];
+                            project.resolutionCache.invalidateResolutionOfFile(info.path);
+                        }
+                        project.markAsDirty();
+                        updateProjectIfDirty(project);
+                    });
+                    _this.delayEnsureProjectForOpenFiles();
+                }, ts.PollingInterval.Low, this.hostConfiguration.watchOptions, ts.WatchType.ConfigFile);
+            };
+            /*@internal*/
             ProjectService.prototype.watchPackageJsonFile = function (path) {
                 var _this = this;
                 var watchers = this.packageJsonFilesMap || (this.packageJsonFilesMap = new ts.Map());
diff --git a/lib/typescript.js b/lib/typescript.js
index 3881df0d0..59b050376 100644
semver exclusivity >=4.8.0-beta <4.8.1-rc
--- a/lib/typescript.js
+++ b/lib/typescript.js
@@ -7333,6 +7333,11 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                // The PnP runtime is always case-sensitive
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    return true;
+                }
                 // win32\win64 are case insensitive platforms
                 if (platform === "win32" || platform === "win64") {
                     return false;
@@ -43023,18 +43028,17 @@ var ts;
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
     /**
      * Returns the path to every node_modules/@types directory from some ancestor directory.
-     * Returns undefined if there are none.
      */
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
             // And if it doesn't exist, tough.
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
@@ -43045,6 +43049,42 @@ var ts;
         var useCaseSensitiveFileNames = typeof host.useCaseSensitiveFileNames === "function" ? host.useCaseSensitiveFileNames() : host.useCaseSensitiveFileNames;
         return ts.comparePaths(path1, path2, !useCaseSensitiveFileNames) === 0 /* Comparison.EqualTo */;
     }
+    /**
+     * @internal
+     */
+    function getPnpTypeRoots(currentDirectory) {
+        var pnpapi = getPnpApi(currentDirectory);
+        if (!pnpapi) {
+            return [];
+        }
+        // Some TS consumers pass relative paths that aren't normalized
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var currentPackage = pnpapi.findPackageLocator("".concat(currentDirectory, "/"));
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            // eslint-disable-next-line no-null/no-null
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    ts.getPnpTypeRoots = getPnpTypeRoots;
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArray(__spreadArray([], nmTypes, true), pnpTypes, true);
+        }
+    }
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
@@ -43184,7 +43224,9 @@ var ts;
                 }
                 var result_4;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
+                    var searchResult = getPnpApi(initialLocationForSecondaryLookup)
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
                     result_4 = searchResult && searchResult.value;
                 }
                 else {
@@ -43911,7 +43953,9 @@ var ts;
                     if (traceEnabled) {
                         trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                     }
-                    resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                    resolved_1 = getPnpApi(containingDirectory)
+                        ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference)
+                        : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
                 }
                 if (!resolved_1)
                     return undefined;
@@ -44859,6 +44903,14 @@ var ts;
     }
     function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference) {
         var candidate = ts.normalizePath(ts.combinePaths(nodeModulesDirectory, moduleName));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, /* rest */ undefined, /* packageDirectory */ undefined);
+    }
+    function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state, cache, redirectedReference) {
+        var candidate = ts.normalizePath(ts.combinePaths(packageDirectory, rest));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, /*moduleName*/ undefined, /*nodeModulesDirectory*/ undefined, /*nodeModulesDirectoryExists*/ true, state, cache, redirectedReference, candidate, rest, packageDirectory);
+    }
+    function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory) {
+        var _a;
         // First look for a nested package.json, as in `node_modules/foo/bar/package.json`.
         var packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
         // But only if we're not respecting export maps (if we are, we might redirect around this location)
@@ -44872,7 +44924,9 @@ var ts;
                 return withPackageId(packageInfo, fromDirectory);
             }
         }
-        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageName;
+        if (rest === undefined)
+            (_a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest);
         var loader = function (extensions, candidate, onlyRecordFailures, state) {
             var _a;
             // package exports are higher priority than file/directory lookups (and, if there's exports present, blocks them)
@@ -44892,7 +44946,8 @@ var ts;
             return withPackageId(packageInfo, pathAndExtension);
         };
         if (rest !== "") { // If "rest" is empty, we just did this search above.
-            var packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
+            if (packageDirectory === undefined)
+                packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
             // Don't use a "types" or "main" from here because we're not loading the root, but a subdirectory -- just here for the packageId and path mappings.
             packageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state);
             if (packageInfo && packageInfo.versionPaths) {
@@ -45079,6 +45134,58 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    /**
+     * We only allow PnP to be used as a resolution strategy if TypeScript
+     * itself is executed under a PnP runtime (and we only allow it to access
+     * the current PnP runtime, not any on the disk). This ensures that we
+     * don't execute potentially malicious code that didn't already have a
+     * chance to be executed (if we're running within the runtime, it means
+     * that the runtime has already been executed).
+     * @internal
+     */
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi("".concat(path, "/"));
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, "".concat(containingDirectory, "/"), { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution).replace(/\/$/, "");
+        }
+        catch (_a) {
+            // Nothing to do
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    /* @internal */
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state, cache, redirectedReference)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? loadModuleFromPnpResolution(Extensions.DtsOnly, typePackageResolution, rest, state, cache, redirectedReference)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 /* @internal */
 var ts;
@@ -116542,6 +116649,8 @@ var ts;
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Partial"] = 1] = "Partial";
         /** Reload completely by re-reading contents of config file from disk and updating program */
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Full"] = 2] = "Full";
+        /** Reload the resolutions */
+        ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Resolutions"] = 3] = "Resolutions";
     })(ConfigFileProgramReloadLevel = ts.ConfigFileProgramReloadLevel || (ts.ConfigFileProgramReloadLevel = {}));
     /**
      * Updates the map of shared extended config file watches with a new set of extended config files from a base config file of the project
@@ -123731,6 +123840,30 @@ var ts;
                 return undefined;
             }
             var parts = ts.getNodeModulePathParts(path);
+            var packageName;
+            if (!parts && typeof process.versions.pnp !== "undefined") {
+                var findPnpApi = require("module").findPnpApi;
+                var pnpApi = findPnpApi(path);
+                var locator = pnpApi === null || pnpApi === void 0 ? void 0 : pnpApi.findPackageLocator(path);
+                // eslint-disable-next-line no-null/no-null
+                if (locator !== null && locator !== undefined) {
+                    var sourceLocator = pnpApi.findPackageLocator("".concat(sourceDirectory, "/"));
+                    // Don't use the package name when the imported file is inside
+                    // the source directory (prefer a relative path instead)
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        // The last character from packageLocation is the trailing "/", we want to point to it
+                        packageRootIndex: information.packageLocation.length - 1,
+                        fileNameIndex: path.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -123770,18 +123903,24 @@ var ts;
             if (isRedirect && !isPackageRootPath) {
                 return undefined;
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            // Get a path that's relative to node_modules or the importing file's path
-            // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            // If PnP is enabled the node_modules entries we'll get will always be relevant even if they
+            // are located in a weird path apparently outside of the source directory
+            if (typeof process.versions.pnp === "undefined") {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                // Get a path that's relative to node_modules or the importing file's path
+                // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
             // If the module was found in @types, get the actual Node package name
-            var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            var nodeModulesDirectoryName = typeof packageName !== "undefined"
+                ? packageName + moduleSpecifier.substring(parts.packageRootIndex)
+                : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
             // For classic resolution, only allow importing from node_modules/@types, not other node_modules
-            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var _a, _b;
                 var packageRootPath = path.substring(0, packageRootIndex);
@@ -124649,6 +124788,10 @@ var ts;
         if (configFileName) {
             configFileWatcher = watchFile(configFileName, scheduleProgramReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
         }
+        var pnpFileWatcher;
+        if (typeof process.versions.pnp !== "undefined") {
+            pnpFileWatcher = watchFile(require.resolve("pnpapi"), scheduleResolutionReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
+        }
         var compilerHost = ts.createCompilerHostFromProgramHost(host, function () { return compilerOptions; }, directoryStructureHost);
         ts.setGetSourceFileAsHashVersioned(compilerHost, host);
         // Members for CompilerHost
@@ -124728,6 +124871,10 @@ var ts;
                 configFileWatcher.close();
                 configFileWatcher = undefined;
             }
+            if (pnpFileWatcher) {
+                pnpFileWatcher.close();
+                pnpFileWatcher = undefined;
+            }
             extendedConfigCache === null || extendedConfigCache === void 0 ? void 0 : extendedConfigCache.clear();
             extendedConfigCache = undefined;
             if (sharedExtendedConfigFileWatchers) {
@@ -124760,7 +124907,8 @@ var ts;
         function getCurrentProgram() {
             return builderProgram && builderProgram.getProgramOrUndefined();
         }
-        function synchronizeProgram() {
+        function synchronizeProgram(forceAllFilesAsInvalidated) {
+            if (forceAllFilesAsInvalidated === void 0) { forceAllFilesAsInvalidated = false; }
             writeLog("Synchronizing program");
             clearInvalidateResolutionsOfFailedLookupLocations();
             var program = getCurrentBuilderProgram();
@@ -124771,7 +124919,7 @@ var ts;
                 }
             }
             // All resolutions are invalid if user provided resolutions
-            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution);
+            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution || forceAllFilesAsInvalidated);
             if (ts.isProgramUptoDate(getCurrentProgram(), rootFileNames, compilerOptions, getSourceVersion, fileExists, hasInvalidatedResolution, hasChangedAutomaticTypeDirectiveNames, getParsedCommandLine, projectReferences)) {
                 if (hasChangedConfigFileParsingErrors) {
                     if (reportFileChangeDetectedOnCreateProgram) {
@@ -124982,6 +125130,12 @@ var ts;
             reloadLevel = ts.ConfigFileProgramReloadLevel.Full;
             scheduleProgramUpdate();
         }
+        function scheduleResolutionReload() {
+            writeLog("Clearing resolutions");
+            resolutionCache.clear();
+            reloadLevel = ts.ConfigFileProgramReloadLevel.Resolutions;
+            scheduleProgramUpdate();
+        }
         function updateProgramWithWatchStatus() {
             timerToUpdateProgram = undefined;
             reportFileChangeDetectedOnCreateProgram = true;
@@ -124997,6 +125151,10 @@ var ts;
                     ts.perfLogger.logStartUpdateProgram("FullConfigReload");
                     reloadConfigFile();
                     break;
+                case ts.ConfigFileProgramReloadLevel.Resolutions:
+                    ts.perfLogger.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+                    synchronizeProgram(/*forceAllFilesAsInvalidated*/ true);
+                    break;
                 default:
                     ts.perfLogger.logStartUpdateProgram("SynchronizeProgram");
                     synchronizeProgram();
@@ -131333,7 +131491,7 @@ var ts;
      * Don't include something from a `node_modules` that isn't actually reachable by a global import.
      * A relative import to node_modules is usually a bad idea.
      */
-    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+    function isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath) {
         // If it's in a `node_modules` but is not reachable from here via a global import, don't bother.
         var toNodeModules = ts.forEachAncestorDirectory(toPath, function (ancestor) { return ts.getBaseFileName(ancestor) === "node_modules" ? ancestor : undefined; });
         var toNodeModulesParent = toNodeModules && ts.getDirectoryPath(getCanonicalFileName(toNodeModules));
@@ -131341,6 +131499,33 @@ var ts;
             || ts.startsWith(getCanonicalFileName(fromPath), toNodeModulesParent)
             || (!!globalCachePath && ts.startsWith(getCanonicalFileName(globalCachePath), toNodeModulesParent));
     }
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi("".concat(path, "/"));
+    }
+    function isImportablePathPnp(fromPath, toPath) {
+        var pnpApi = getPnpApi(fromPath);
+        var fromLocator = pnpApi.findPackageLocator(fromPath);
+        var toLocator = pnpApi.findPackageLocator(toPath);
+        // eslint-disable-next-line no-null/no-null
+        if (toLocator === null) {
+            return false;
+        }
+        var fromInfo = pnpApi.getPackageInformation(fromLocator);
+        var toReference = fromInfo.packageDependencies.get(toLocator.name);
+        return toReference === toLocator.reference;
+    }
+    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+        if (getPnpApi(fromPath)) {
+            return isImportablePathPnp(fromPath, toPath);
+        }
+        else {
+            return isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath);
+        }
+    }
     function forEachExternalModuleToImportFrom(program, host, preferences, useAutoImportProvider, cb) {
         var _a, _b;
         var useCaseSensitiveFileNames = ts.hostUsesCaseSensitiveFileNames(host);
@@ -133229,6 +133414,7 @@ var ts;
              *          This includes all files that are found in node_modules/moduleName/ with acceptable file extensions
              */
             function getCompletionEntriesForNonRelativeModules(fragment, scriptPath, compilerOptions, host, typeChecker) {
+                var _a, _b;
                 var baseUrl = compilerOptions.baseUrl, paths = compilerOptions.paths;
                 var result = [];
                 var extensionOptions = getExtensionOptions(compilerOptions);
@@ -133241,8 +133427,8 @@ var ts;
                     }
                 }
                 var fragmentDirectory = getFragmentDirectory(fragment);
-                for (var _i = 0, _a = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _a.length; _i++) {
-                    var ambientName = _a[_i];
+                for (var _i = 0, _c = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _c.length; _i++) {
+                    var ambientName = _c[_i];
                     result.push(nameAndKind(ambientName, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined));
                 }
                 getCompletionEntriesFromTypings(host, compilerOptions, scriptPath, fragmentDirectory, extensionOptions, result);
@@ -133257,8 +133443,8 @@ var ts;
                                 result.push(nameAndKind(moduleName, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined));
                             }
                         };
-                        for (var _b = 0, _c = enumerateNodeModulesVisibleToScript(host, scriptPath); _b < _c.length; _b++) {
-                            var moduleName = _c[_b];
+                        for (var _d = 0, _e = enumerateNodeModulesVisibleToScript(host, scriptPath); _d < _e.length; _d++) {
+                            var moduleName = _e[_d];
                             _loop_3(moduleName);
                         }
                     }
@@ -133269,7 +133455,43 @@ var ts;
                                 getCompletionEntriesForDirectoryFragment(fragment, nodeModules, extensionOptions, host, /*exclude*/ undefined, result);
                             }
                         };
-                        if (fragmentDirectory && isEmitModuleResolutionRespectingExportMaps(compilerOptions)) {
+                        var checkExports_1 = function (packageFile, fragmentSubpath) {
+                            var packageJson = ts.readJson(packageFile, host);
+                            var exports = packageJson.exports;
+                            if (exports) {
+                                if (typeof exports !== "object" || exports === null) { // eslint-disable-line no-null/no-null
+                                    return true; // null exports or entrypoint only, no sub-modules available
+                                }
+                                var keys = ts.getOwnKeys(exports);
+                                var processedKeys = ts.mapDefined(keys, function (k) {
+                                    if (k === ".")
+                                        return undefined;
+                                    if (!ts.startsWith(k, "./"))
+                                        return undefined;
+                                    var subpath = k.substring(2);
+                                    if (!ts.startsWith(subpath, fragmentSubpath))
+                                        return undefined;
+                                    // subpath is a valid export (barring conditions, which we don't currently check here)
+                                    if (!ts.stringContains(subpath, "*")) {
+                                        return subpath;
+                                    }
+                                    // pattern export - only return everything up to the `*`, so the user can autocomplete, then
+                                    // keep filling in the pattern (we could speculatively return a list of options by hitting disk,
+                                    // but conditions will make that somewhat awkward, as each condition may have a different set of possible
+                                    // options for the `*`.
+                                    return subpath.slice(0, subpath.indexOf("*"));
+                                });
+                                ts.forEach(processedKeys, function (k) {
+                                    if (k) {
+                                        result.push(nameAndKind(k, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined));
+                                    }
+                                });
+                                return true;
+                            }
+                            return false;
+                        };
+                        var shouldCheckExports = fragmentDirectory && isEmitModuleResolutionRespectingExportMaps(compilerOptions);
+                        if (shouldCheckExports) {
                             var nodeModulesDirectoryLookup_1 = ancestorLookup;
                             ancestorLookup = function (ancestor) {
                                 var components = ts.getPathComponents(fragment);
@@ -133287,44 +133509,45 @@ var ts;
                                 }
                                 var packageFile = ts.combinePaths(ancestor, "node_modules", packagePath, "package.json");
                                 if (ts.tryFileExists(host, packageFile)) {
-                                    var packageJson = ts.readJson(packageFile, host);
-                                    var exports = packageJson.exports;
-                                    if (exports) {
-                                        if (typeof exports !== "object" || exports === null) { // eslint-disable-line no-null/no-null
-                                            return; // null exports or entrypoint only, no sub-modules available
-                                        }
-                                        var keys = ts.getOwnKeys(exports);
-                                        var fragmentSubpath_1 = components.join("/");
-                                        var processedKeys = ts.mapDefined(keys, function (k) {
-                                            if (k === ".")
-                                                return undefined;
-                                            if (!ts.startsWith(k, "./"))
-                                                return undefined;
-                                            var subpath = k.substring(2);
-                                            if (!ts.startsWith(subpath, fragmentSubpath_1))
-                                                return undefined;
-                                            // subpath is a valid export (barring conditions, which we don't currently check here)
-                                            if (!ts.stringContains(subpath, "*")) {
-                                                return subpath;
-                                            }
-                                            // pattern export - only return everything up to the `*`, so the user can autocomplete, then
-                                            // keep filling in the pattern (we could speculatively return a list of options by hitting disk,
-                                            // but conditions will make that somewhat awkward, as each condition may have a different set of possible
-                                            // options for the `*`.
-                                            return subpath.slice(0, subpath.indexOf("*"));
-                                        });
-                                        ts.forEach(processedKeys, function (k) {
-                                            if (k) {
-                                                result.push(nameAndKind(k, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined));
-                                            }
-                                        });
+                                    if (checkExports_1(packageFile, components.join("/"))) {
                                         return;
                                     }
                                 }
                                 return nodeModulesDirectoryLookup_1(ancestor);
                             };
                         }
-                        ts.forEachAncestorDirectory(scriptPath, ancestorLookup);
+                        var pnpapi = (_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath);
+                        if (pnpapi) {
+                            // Splits a require request into its components, or return null if the request is a file path
+                            var pathRegExp = /^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:@[^/]+\/)?[^/]+)\/*(.*|)$/;
+                            var dependencyNameMatch = fragment.match(pathRegExp);
+                            if (dependencyNameMatch) {
+                                var dependencyName = dependencyNameMatch[1], subPath = dependencyNameMatch[2];
+                                var unqualified = void 0;
+                                try {
+                                    unqualified = pnpapi.resolveToUnqualified(dependencyName, scriptPath, { considerBuiltins: false });
+                                }
+                                catch (_f) {
+                                    // It's fine if the resolution fails
+                                }
+                                if (unqualified) {
+                                    var normalizedPath = ts.normalizePath(unqualified);
+                                    var shouldGetCompletions = true;
+                                    if (shouldCheckExports) {
+                                        var packageFile = ts.combinePaths(normalizedPath, "package.json");
+                                        if (ts.tryFileExists(host, packageFile) && checkExports_1(packageFile, subPath)) {
+                                            shouldGetCompletions = false;
+                                        }
+                                    }
+                                    if (shouldGetCompletions) {
+                                        getCompletionEntriesForDirectoryFragment(subPath, normalizedPath, extensionOptions, host, /*exclude*/ undefined, result);
+                                    }
+                                }
+                            }
+                        }
+                        else {
+                            ts.forEachAncestorDirectory(scriptPath, ancestorLookup);
+                        }
                     }
                 }
                 return result;
@@ -133430,6 +133653,7 @@ var ts;
                 return addReplacementSpans(toComplete, range.pos + prefix.length, names);
             }
             function getCompletionEntriesFromTypings(host, options, scriptPath, fragmentDirectory, extensionOptions, result) {
+                var _a, _b;
                 if (result === void 0) { result = []; }
                 // Check for typings specified in compiler options
                 var seen = new ts.Map();
@@ -133438,11 +133662,19 @@ var ts;
                     var root = typeRoots_1[_i];
                     getCompletionEntriesFromDirectories(root);
                 }
-                // Also get all @types typings installed in visible node_modules directories
-                for (var _a = 0, _b = ts.findPackageJsons(scriptPath, host); _a < _b.length; _a++) {
-                    var packageJson = _b[_a];
-                    var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
-                    getCompletionEntriesFromDirectories(typesDir);
+                if ((_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath)) {
+                    for (var _c = 0, _d = ts.getPnpTypeRoots(scriptPath); _c < _d.length; _c++) {
+                        var root = _d[_c];
+                        getCompletionEntriesFromDirectories(root);
+                    }
+                }
+                else {
+                    // Also get all @types typings installed in visible node_modules directories
+                    for (var _e = 0, _f = ts.findPackageJsons(scriptPath, host); _e < _f.length; _e++) {
+                        var packageJson = _f[_e];
+                        var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
+                        getCompletionEntriesFromDirectories(typesDir);
+                    }
                 }
                 return result;
                 function getCompletionEntriesFromDirectories(directory) {
@@ -163992,9 +164224,9 @@ var ts;
                 if (isTopLevelDeclarationStatement(statement) &&
                     !isExported(sourceFile, statement, useEs6Exports) &&
                     forEachTopLevelDeclaration(statement, function (d) { return needExport.has(ts.Debug.checkDefined(d.symbol)); })) {
-                    var exports = addExport(statement, useEs6Exports);
-                    if (exports)
-                        return exports;
+                    var exports_1 = addExport(statement, useEs6Exports);
+                    if (exports_1)
+                        return exports_1;
                 }
                 return statement;
             });
diff --git a/lib/typescriptServices.js b/lib/typescriptServices.js
index a856d881b..3a60baf6f 100644
semver exclusivity >=4.8.0-beta <4.8.1-rc
--- a/lib/typescriptServices.js
+++ b/lib/typescriptServices.js
@@ -7333,6 +7333,11 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                // The PnP runtime is always case-sensitive
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    return true;
+                }
                 // win32\win64 are case insensitive platforms
                 if (platform === "win32" || platform === "win64") {
                     return false;
@@ -43023,18 +43028,17 @@ var ts;
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
     /**
      * Returns the path to every node_modules/@types directory from some ancestor directory.
-     * Returns undefined if there are none.
      */
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
             // And if it doesn't exist, tough.
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
@@ -43045,6 +43049,42 @@ var ts;
         var useCaseSensitiveFileNames = typeof host.useCaseSensitiveFileNames === "function" ? host.useCaseSensitiveFileNames() : host.useCaseSensitiveFileNames;
         return ts.comparePaths(path1, path2, !useCaseSensitiveFileNames) === 0 /* Comparison.EqualTo */;
     }
+    /**
+     * @internal
+     */
+    function getPnpTypeRoots(currentDirectory) {
+        var pnpapi = getPnpApi(currentDirectory);
+        if (!pnpapi) {
+            return [];
+        }
+        // Some TS consumers pass relative paths that aren't normalized
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var currentPackage = pnpapi.findPackageLocator("".concat(currentDirectory, "/"));
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            // eslint-disable-next-line no-null/no-null
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    ts.getPnpTypeRoots = getPnpTypeRoots;
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArray(__spreadArray([], nmTypes, true), pnpTypes, true);
+        }
+    }
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
@@ -43184,7 +43224,9 @@ var ts;
                 }
                 var result_4;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
+                    var searchResult = getPnpApi(initialLocationForSecondaryLookup)
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
                     result_4 = searchResult && searchResult.value;
                 }
                 else {
@@ -43911,7 +43953,9 @@ var ts;
                     if (traceEnabled) {
                         trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                     }
-                    resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                    resolved_1 = getPnpApi(containingDirectory)
+                        ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference)
+                        : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
                 }
                 if (!resolved_1)
                     return undefined;
@@ -44859,6 +44903,14 @@ var ts;
     }
     function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference) {
         var candidate = ts.normalizePath(ts.combinePaths(nodeModulesDirectory, moduleName));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, /* rest */ undefined, /* packageDirectory */ undefined);
+    }
+    function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state, cache, redirectedReference) {
+        var candidate = ts.normalizePath(ts.combinePaths(packageDirectory, rest));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, /*moduleName*/ undefined, /*nodeModulesDirectory*/ undefined, /*nodeModulesDirectoryExists*/ true, state, cache, redirectedReference, candidate, rest, packageDirectory);
+    }
+    function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory) {
+        var _a;
         // First look for a nested package.json, as in `node_modules/foo/bar/package.json`.
         var packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
         // But only if we're not respecting export maps (if we are, we might redirect around this location)
@@ -44872,7 +44924,9 @@ var ts;
                 return withPackageId(packageInfo, fromDirectory);
             }
         }
-        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageName;
+        if (rest === undefined)
+            (_a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest);
         var loader = function (extensions, candidate, onlyRecordFailures, state) {
             var _a;
             // package exports are higher priority than file/directory lookups (and, if there's exports present, blocks them)
@@ -44892,7 +44946,8 @@ var ts;
             return withPackageId(packageInfo, pathAndExtension);
         };
         if (rest !== "") { // If "rest" is empty, we just did this search above.
-            var packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
+            if (packageDirectory === undefined)
+                packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
             // Don't use a "types" or "main" from here because we're not loading the root, but a subdirectory -- just here for the packageId and path mappings.
             packageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state);
             if (packageInfo && packageInfo.versionPaths) {
@@ -45079,6 +45134,58 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    /**
+     * We only allow PnP to be used as a resolution strategy if TypeScript
+     * itself is executed under a PnP runtime (and we only allow it to access
+     * the current PnP runtime, not any on the disk). This ensures that we
+     * don't execute potentially malicious code that didn't already have a
+     * chance to be executed (if we're running within the runtime, it means
+     * that the runtime has already been executed).
+     * @internal
+     */
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi("".concat(path, "/"));
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, "".concat(containingDirectory, "/"), { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution).replace(/\/$/, "");
+        }
+        catch (_a) {
+            // Nothing to do
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    /* @internal */
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state, cache, redirectedReference)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? loadModuleFromPnpResolution(Extensions.DtsOnly, typePackageResolution, rest, state, cache, redirectedReference)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 /* @internal */
 var ts;
@@ -116542,6 +116649,8 @@ var ts;
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Partial"] = 1] = "Partial";
         /** Reload completely by re-reading contents of config file from disk and updating program */
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Full"] = 2] = "Full";
+        /** Reload the resolutions */
+        ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Resolutions"] = 3] = "Resolutions";
     })(ConfigFileProgramReloadLevel = ts.ConfigFileProgramReloadLevel || (ts.ConfigFileProgramReloadLevel = {}));
     /**
      * Updates the map of shared extended config file watches with a new set of extended config files from a base config file of the project
@@ -123731,6 +123840,30 @@ var ts;
                 return undefined;
             }
             var parts = ts.getNodeModulePathParts(path);
+            var packageName;
+            if (!parts && typeof process.versions.pnp !== "undefined") {
+                var findPnpApi = require("module").findPnpApi;
+                var pnpApi = findPnpApi(path);
+                var locator = pnpApi === null || pnpApi === void 0 ? void 0 : pnpApi.findPackageLocator(path);
+                // eslint-disable-next-line no-null/no-null
+                if (locator !== null && locator !== undefined) {
+                    var sourceLocator = pnpApi.findPackageLocator("".concat(sourceDirectory, "/"));
+                    // Don't use the package name when the imported file is inside
+                    // the source directory (prefer a relative path instead)
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        // The last character from packageLocation is the trailing "/", we want to point to it
+                        packageRootIndex: information.packageLocation.length - 1,
+                        fileNameIndex: path.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -123770,18 +123903,24 @@ var ts;
             if (isRedirect && !isPackageRootPath) {
                 return undefined;
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            // Get a path that's relative to node_modules or the importing file's path
-            // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            // If PnP is enabled the node_modules entries we'll get will always be relevant even if they
+            // are located in a weird path apparently outside of the source directory
+            if (typeof process.versions.pnp === "undefined") {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                // Get a path that's relative to node_modules or the importing file's path
+                // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
             // If the module was found in @types, get the actual Node package name
-            var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            var nodeModulesDirectoryName = typeof packageName !== "undefined"
+                ? packageName + moduleSpecifier.substring(parts.packageRootIndex)
+                : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
             // For classic resolution, only allow importing from node_modules/@types, not other node_modules
-            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var _a, _b;
                 var packageRootPath = path.substring(0, packageRootIndex);
@@ -124649,6 +124788,10 @@ var ts;
         if (configFileName) {
             configFileWatcher = watchFile(configFileName, scheduleProgramReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
         }
+        var pnpFileWatcher;
+        if (typeof process.versions.pnp !== "undefined") {
+            pnpFileWatcher = watchFile(require.resolve("pnpapi"), scheduleResolutionReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
+        }
         var compilerHost = ts.createCompilerHostFromProgramHost(host, function () { return compilerOptions; }, directoryStructureHost);
         ts.setGetSourceFileAsHashVersioned(compilerHost, host);
         // Members for CompilerHost
@@ -124728,6 +124871,10 @@ var ts;
                 configFileWatcher.close();
                 configFileWatcher = undefined;
             }
+            if (pnpFileWatcher) {
+                pnpFileWatcher.close();
+                pnpFileWatcher = undefined;
+            }
             extendedConfigCache === null || extendedConfigCache === void 0 ? void 0 : extendedConfigCache.clear();
             extendedConfigCache = undefined;
             if (sharedExtendedConfigFileWatchers) {
@@ -124760,7 +124907,8 @@ var ts;
         function getCurrentProgram() {
             return builderProgram && builderProgram.getProgramOrUndefined();
         }
-        function synchronizeProgram() {
+        function synchronizeProgram(forceAllFilesAsInvalidated) {
+            if (forceAllFilesAsInvalidated === void 0) { forceAllFilesAsInvalidated = false; }
             writeLog("Synchronizing program");
             clearInvalidateResolutionsOfFailedLookupLocations();
             var program = getCurrentBuilderProgram();
@@ -124771,7 +124919,7 @@ var ts;
                 }
             }
             // All resolutions are invalid if user provided resolutions
-            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution);
+            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution || forceAllFilesAsInvalidated);
             if (ts.isProgramUptoDate(getCurrentProgram(), rootFileNames, compilerOptions, getSourceVersion, fileExists, hasInvalidatedResolution, hasChangedAutomaticTypeDirectiveNames, getParsedCommandLine, projectReferences)) {
                 if (hasChangedConfigFileParsingErrors) {
                     if (reportFileChangeDetectedOnCreateProgram) {
@@ -124982,6 +125130,12 @@ var ts;
             reloadLevel = ts.ConfigFileProgramReloadLevel.Full;
             scheduleProgramUpdate();
         }
+        function scheduleResolutionReload() {
+            writeLog("Clearing resolutions");
+            resolutionCache.clear();
+            reloadLevel = ts.ConfigFileProgramReloadLevel.Resolutions;
+            scheduleProgramUpdate();
+        }
         function updateProgramWithWatchStatus() {
             timerToUpdateProgram = undefined;
             reportFileChangeDetectedOnCreateProgram = true;
@@ -124997,6 +125151,10 @@ var ts;
                     ts.perfLogger.logStartUpdateProgram("FullConfigReload");
                     reloadConfigFile();
                     break;
+                case ts.ConfigFileProgramReloadLevel.Resolutions:
+                    ts.perfLogger.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+                    synchronizeProgram(/*forceAllFilesAsInvalidated*/ true);
+                    break;
                 default:
                     ts.perfLogger.logStartUpdateProgram("SynchronizeProgram");
                     synchronizeProgram();
@@ -131333,7 +131491,7 @@ var ts;
      * Don't include something from a `node_modules` that isn't actually reachable by a global import.
      * A relative import to node_modules is usually a bad idea.
      */
-    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+    function isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath) {
         // If it's in a `node_modules` but is not reachable from here via a global import, don't bother.
         var toNodeModules = ts.forEachAncestorDirectory(toPath, function (ancestor) { return ts.getBaseFileName(ancestor) === "node_modules" ? ancestor : undefined; });
         var toNodeModulesParent = toNodeModules && ts.getDirectoryPath(getCanonicalFileName(toNodeModules));
@@ -131341,6 +131499,33 @@ var ts;
             || ts.startsWith(getCanonicalFileName(fromPath), toNodeModulesParent)
             || (!!globalCachePath && ts.startsWith(getCanonicalFileName(globalCachePath), toNodeModulesParent));
     }
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi("".concat(path, "/"));
+    }
+    function isImportablePathPnp(fromPath, toPath) {
+        var pnpApi = getPnpApi(fromPath);
+        var fromLocator = pnpApi.findPackageLocator(fromPath);
+        var toLocator = pnpApi.findPackageLocator(toPath);
+        // eslint-disable-next-line no-null/no-null
+        if (toLocator === null) {
+            return false;
+        }
+        var fromInfo = pnpApi.getPackageInformation(fromLocator);
+        var toReference = fromInfo.packageDependencies.get(toLocator.name);
+        return toReference === toLocator.reference;
+    }
+    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+        if (getPnpApi(fromPath)) {
+            return isImportablePathPnp(fromPath, toPath);
+        }
+        else {
+            return isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath);
+        }
+    }
     function forEachExternalModuleToImportFrom(program, host, preferences, useAutoImportProvider, cb) {
         var _a, _b;
         var useCaseSensitiveFileNames = ts.hostUsesCaseSensitiveFileNames(host);
@@ -133229,6 +133414,7 @@ var ts;
              *          This includes all files that are found in node_modules/moduleName/ with acceptable file extensions
              */
             function getCompletionEntriesForNonRelativeModules(fragment, scriptPath, compilerOptions, host, typeChecker) {
+                var _a, _b;
                 var baseUrl = compilerOptions.baseUrl, paths = compilerOptions.paths;
                 var result = [];
                 var extensionOptions = getExtensionOptions(compilerOptions);
@@ -133241,8 +133427,8 @@ var ts;
                     }
                 }
                 var fragmentDirectory = getFragmentDirectory(fragment);
-                for (var _i = 0, _a = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _a.length; _i++) {
-                    var ambientName = _a[_i];
+                for (var _i = 0, _c = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _c.length; _i++) {
+                    var ambientName = _c[_i];
                     result.push(nameAndKind(ambientName, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined));
                 }
                 getCompletionEntriesFromTypings(host, compilerOptions, scriptPath, fragmentDirectory, extensionOptions, result);
@@ -133257,8 +133443,8 @@ var ts;
                                 result.push(nameAndKind(moduleName, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined));
                             }
                         };
-                        for (var _b = 0, _c = enumerateNodeModulesVisibleToScript(host, scriptPath); _b < _c.length; _b++) {
-                            var moduleName = _c[_b];
+                        for (var _d = 0, _e = enumerateNodeModulesVisibleToScript(host, scriptPath); _d < _e.length; _d++) {
+                            var moduleName = _e[_d];
                             _loop_3(moduleName);
                         }
                     }
@@ -133269,7 +133455,43 @@ var ts;
                                 getCompletionEntriesForDirectoryFragment(fragment, nodeModules, extensionOptions, host, /*exclude*/ undefined, result);
                             }
                         };
-                        if (fragmentDirectory && isEmitModuleResolutionRespectingExportMaps(compilerOptions)) {
+                        var checkExports_1 = function (packageFile, fragmentSubpath) {
+                            var packageJson = ts.readJson(packageFile, host);
+                            var exports = packageJson.exports;
+                            if (exports) {
+                                if (typeof exports !== "object" || exports === null) { // eslint-disable-line no-null/no-null
+                                    return true; // null exports or entrypoint only, no sub-modules available
+                                }
+                                var keys = ts.getOwnKeys(exports);
+                                var processedKeys = ts.mapDefined(keys, function (k) {
+                                    if (k === ".")
+                                        return undefined;
+                                    if (!ts.startsWith(k, "./"))
+                                        return undefined;
+                                    var subpath = k.substring(2);
+                                    if (!ts.startsWith(subpath, fragmentSubpath))
+                                        return undefined;
+                                    // subpath is a valid export (barring conditions, which we don't currently check here)
+                                    if (!ts.stringContains(subpath, "*")) {
+                                        return subpath;
+                                    }
+                                    // pattern export - only return everything up to the `*`, so the user can autocomplete, then
+                                    // keep filling in the pattern (we could speculatively return a list of options by hitting disk,
+                                    // but conditions will make that somewhat awkward, as each condition may have a different set of possible
+                                    // options for the `*`.
+                                    return subpath.slice(0, subpath.indexOf("*"));
+                                });
+                                ts.forEach(processedKeys, function (k) {
+                                    if (k) {
+                                        result.push(nameAndKind(k, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined));
+                                    }
+                                });
+                                return true;
+                            }
+                            return false;
+                        };
+                        var shouldCheckExports = fragmentDirectory && isEmitModuleResolutionRespectingExportMaps(compilerOptions);
+                        if (shouldCheckExports) {
                             var nodeModulesDirectoryLookup_1 = ancestorLookup;
                             ancestorLookup = function (ancestor) {
                                 var components = ts.getPathComponents(fragment);
@@ -133287,44 +133509,45 @@ var ts;
                                 }
                                 var packageFile = ts.combinePaths(ancestor, "node_modules", packagePath, "package.json");
                                 if (ts.tryFileExists(host, packageFile)) {
-                                    var packageJson = ts.readJson(packageFile, host);
-                                    var exports = packageJson.exports;
-                                    if (exports) {
-                                        if (typeof exports !== "object" || exports === null) { // eslint-disable-line no-null/no-null
-                                            return; // null exports or entrypoint only, no sub-modules available
-                                        }
-                                        var keys = ts.getOwnKeys(exports);
-                                        var fragmentSubpath_1 = components.join("/");
-                                        var processedKeys = ts.mapDefined(keys, function (k) {
-                                            if (k === ".")
-                                                return undefined;
-                                            if (!ts.startsWith(k, "./"))
-                                                return undefined;
-                                            var subpath = k.substring(2);
-                                            if (!ts.startsWith(subpath, fragmentSubpath_1))
-                                                return undefined;
-                                            // subpath is a valid export (barring conditions, which we don't currently check here)
-                                            if (!ts.stringContains(subpath, "*")) {
-                                                return subpath;
-                                            }
-                                            // pattern export - only return everything up to the `*`, so the user can autocomplete, then
-                                            // keep filling in the pattern (we could speculatively return a list of options by hitting disk,
-                                            // but conditions will make that somewhat awkward, as each condition may have a different set of possible
-                                            // options for the `*`.
-                                            return subpath.slice(0, subpath.indexOf("*"));
-                                        });
-                                        ts.forEach(processedKeys, function (k) {
-                                            if (k) {
-                                                result.push(nameAndKind(k, "external module name" /* ScriptElementKind.externalModuleName */, /*extension*/ undefined));
-                                            }
-                                        });
+                                    if (checkExports_1(packageFile, components.join("/"))) {
                                         return;
                                     }
                                 }
                                 return nodeModulesDirectoryLookup_1(ancestor);
                             };
                         }
-                        ts.forEachAncestorDirectory(scriptPath, ancestorLookup);
+                        var pnpapi = (_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath);
+                        if (pnpapi) {
+                            // Splits a require request into its components, or return null if the request is a file path
+                            var pathRegExp = /^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:@[^/]+\/)?[^/]+)\/*(.*|)$/;
+                            var dependencyNameMatch = fragment.match(pathRegExp);
+                            if (dependencyNameMatch) {
+                                var dependencyName = dependencyNameMatch[1], subPath = dependencyNameMatch[2];
+                                var unqualified = void 0;
+                                try {
+                                    unqualified = pnpapi.resolveToUnqualified(dependencyName, scriptPath, { considerBuiltins: false });
+                                }
+                                catch (_f) {
+                                    // It's fine if the resolution fails
+                                }
+                                if (unqualified) {
+                                    var normalizedPath = ts.normalizePath(unqualified);
+                                    var shouldGetCompletions = true;
+                                    if (shouldCheckExports) {
+                                        var packageFile = ts.combinePaths(normalizedPath, "package.json");
+                                        if (ts.tryFileExists(host, packageFile) && checkExports_1(packageFile, subPath)) {
+                                            shouldGetCompletions = false;
+                                        }
+                                    }
+                                    if (shouldGetCompletions) {
+                                        getCompletionEntriesForDirectoryFragment(subPath, normalizedPath, extensionOptions, host, /*exclude*/ undefined, result);
+                                    }
+                                }
+                            }
+                        }
+                        else {
+                            ts.forEachAncestorDirectory(scriptPath, ancestorLookup);
+                        }
                     }
                 }
                 return result;
@@ -133430,6 +133653,7 @@ var ts;
                 return addReplacementSpans(toComplete, range.pos + prefix.length, names);
             }
             function getCompletionEntriesFromTypings(host, options, scriptPath, fragmentDirectory, extensionOptions, result) {
+                var _a, _b;
                 if (result === void 0) { result = []; }
                 // Check for typings specified in compiler options
                 var seen = new ts.Map();
@@ -133438,11 +133662,19 @@ var ts;
                     var root = typeRoots_1[_i];
                     getCompletionEntriesFromDirectories(root);
                 }
-                // Also get all @types typings installed in visible node_modules directories
-                for (var _a = 0, _b = ts.findPackageJsons(scriptPath, host); _a < _b.length; _a++) {
-                    var packageJson = _b[_a];
-                    var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
-                    getCompletionEntriesFromDirectories(typesDir);
+                if ((_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath)) {
+                    for (var _c = 0, _d = ts.getPnpTypeRoots(scriptPath); _c < _d.length; _c++) {
+                        var root = _d[_c];
+                        getCompletionEntriesFromDirectories(root);
+                    }
+                }
+                else {
+                    // Also get all @types typings installed in visible node_modules directories
+                    for (var _e = 0, _f = ts.findPackageJsons(scriptPath, host); _e < _f.length; _e++) {
+                        var packageJson = _f[_e];
+                        var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
+                        getCompletionEntriesFromDirectories(typesDir);
+                    }
                 }
                 return result;
                 function getCompletionEntriesFromDirectories(directory) {
@@ -163992,9 +164224,9 @@ var ts;
                 if (isTopLevelDeclarationStatement(statement) &&
                     !isExported(sourceFile, statement, useEs6Exports) &&
                     forEachTopLevelDeclaration(statement, function (d) { return needExport.has(ts.Debug.checkDefined(d.symbol)); })) {
-                    var exports = addExport(statement, useEs6Exports);
-                    if (exports)
-                        return exports;
+                    var exports_1 = addExport(statement, useEs6Exports);
+                    if (exports_1)
+                        return exports_1;
                 }
                 return statement;
             });
diff --git a/lib/typingsInstaller.js b/lib/typingsInstaller.js
index c8b3e29f4..8176d8d64 100644
semver exclusivity >=4.8.0-beta <4.8.1-rc
--- a/lib/typingsInstaller.js
+++ b/lib/typingsInstaller.js
@@ -7128,6 +7128,11 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                // The PnP runtime is always case-sensitive
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    return true;
+                }
                 // win32\win64 are case insensitive platforms
                 if (platform === "win32" || platform === "win64") {
                     return false;
@@ -42818,18 +42823,17 @@ var ts;
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
     /**
      * Returns the path to every node_modules/@types directory from some ancestor directory.
-     * Returns undefined if there are none.
      */
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
             // And if it doesn't exist, tough.
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
@@ -42840,6 +42844,42 @@ var ts;
         var useCaseSensitiveFileNames = typeof host.useCaseSensitiveFileNames === "function" ? host.useCaseSensitiveFileNames() : host.useCaseSensitiveFileNames;
         return ts.comparePaths(path1, path2, !useCaseSensitiveFileNames) === 0 /* Comparison.EqualTo */;
     }
+    /**
+     * @internal
+     */
+    function getPnpTypeRoots(currentDirectory) {
+        var pnpapi = getPnpApi(currentDirectory);
+        if (!pnpapi) {
+            return [];
+        }
+        // Some TS consumers pass relative paths that aren't normalized
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var currentPackage = pnpapi.findPackageLocator("".concat(currentDirectory, "/"));
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            // eslint-disable-next-line no-null/no-null
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    ts.getPnpTypeRoots = getPnpTypeRoots;
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArray(__spreadArray([], nmTypes, true), pnpTypes, true);
+        }
+    }
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
@@ -42979,7 +43019,9 @@ var ts;
                 }
                 var result_4;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
+                    var searchResult = getPnpApi(initialLocationForSecondaryLookup)
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
                     result_4 = searchResult && searchResult.value;
                 }
                 else {
@@ -43706,7 +43748,9 @@ var ts;
                     if (traceEnabled) {
                         trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                     }
-                    resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                    resolved_1 = getPnpApi(containingDirectory)
+                        ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference)
+                        : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
                 }
                 if (!resolved_1)
                     return undefined;
@@ -44654,6 +44698,14 @@ var ts;
     }
     function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference) {
         var candidate = ts.normalizePath(ts.combinePaths(nodeModulesDirectory, moduleName));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, /* rest */ undefined, /* packageDirectory */ undefined);
+    }
+    function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state, cache, redirectedReference) {
+        var candidate = ts.normalizePath(ts.combinePaths(packageDirectory, rest));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, /*moduleName*/ undefined, /*nodeModulesDirectory*/ undefined, /*nodeModulesDirectoryExists*/ true, state, cache, redirectedReference, candidate, rest, packageDirectory);
+    }
+    function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory) {
+        var _a;
         // First look for a nested package.json, as in `node_modules/foo/bar/package.json`.
         var packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
         // But only if we're not respecting export maps (if we are, we might redirect around this location)
@@ -44667,7 +44719,9 @@ var ts;
                 return withPackageId(packageInfo, fromDirectory);
             }
         }
-        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageName;
+        if (rest === undefined)
+            (_a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest);
         var loader = function (extensions, candidate, onlyRecordFailures, state) {
             var _a;
             // package exports are higher priority than file/directory lookups (and, if there's exports present, blocks them)
@@ -44687,7 +44741,8 @@ var ts;
             return withPackageId(packageInfo, pathAndExtension);
         };
         if (rest !== "") { // If "rest" is empty, we just did this search above.
-            var packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
+            if (packageDirectory === undefined)
+                packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
             // Don't use a "types" or "main" from here because we're not loading the root, but a subdirectory -- just here for the packageId and path mappings.
             packageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state);
             if (packageInfo && packageInfo.versionPaths) {
@@ -44874,6 +44929,58 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    /**
+     * We only allow PnP to be used as a resolution strategy if TypeScript
+     * itself is executed under a PnP runtime (and we only allow it to access
+     * the current PnP runtime, not any on the disk). This ensures that we
+     * don't execute potentially malicious code that didn't already have a
+     * chance to be executed (if we're running within the runtime, it means
+     * that the runtime has already been executed).
+     * @internal
+     */
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi("".concat(path, "/"));
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, "".concat(containingDirectory, "/"), { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution).replace(/\/$/, "");
+        }
+        catch (_a) {
+            // Nothing to do
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    /* @internal */
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state, cache, redirectedReference)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? loadModuleFromPnpResolution(Extensions.DtsOnly, typePackageResolution, rest, state, cache, redirectedReference)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 /* @internal */
 var ts;
@@ -116337,6 +116444,8 @@ var ts;
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Partial"] = 1] = "Partial";
         /** Reload completely by re-reading contents of config file from disk and updating program */
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Full"] = 2] = "Full";
+        /** Reload the resolutions */
+        ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Resolutions"] = 3] = "Resolutions";
     })(ConfigFileProgramReloadLevel = ts.ConfigFileProgramReloadLevel || (ts.ConfigFileProgramReloadLevel = {}));
     /**
      * Updates the map of shared extended config file watches with a new set of extended config files from a base config file of the project
@@ -123526,6 +123635,30 @@ var ts;
                 return undefined;
             }
             var parts = ts.getNodeModulePathParts(path);
+            var packageName;
+            if (!parts && typeof process.versions.pnp !== "undefined") {
+                var findPnpApi = require("module").findPnpApi;
+                var pnpApi = findPnpApi(path);
+                var locator = pnpApi === null || pnpApi === void 0 ? void 0 : pnpApi.findPackageLocator(path);
+                // eslint-disable-next-line no-null/no-null
+                if (locator !== null && locator !== undefined) {
+                    var sourceLocator = pnpApi.findPackageLocator("".concat(sourceDirectory, "/"));
+                    // Don't use the package name when the imported file is inside
+                    // the source directory (prefer a relative path instead)
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        // The last character from packageLocation is the trailing "/", we want to point to it
+                        packageRootIndex: information.packageLocation.length - 1,
+                        fileNameIndex: path.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -123565,18 +123698,24 @@ var ts;
             if (isRedirect && !isPackageRootPath) {
                 return undefined;
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            // Get a path that's relative to node_modules or the importing file's path
-            // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            // If PnP is enabled the node_modules entries we'll get will always be relevant even if they
+            // are located in a weird path apparently outside of the source directory
+            if (typeof process.versions.pnp === "undefined") {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                // Get a path that's relative to node_modules or the importing file's path
+                // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
             // If the module was found in @types, get the actual Node package name
-            var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            var nodeModulesDirectoryName = typeof packageName !== "undefined"
+                ? packageName + moduleSpecifier.substring(parts.packageRootIndex)
+                : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
             // For classic resolution, only allow importing from node_modules/@types, not other node_modules
-            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            return ts.getEmitModuleResolutionKind(options) === ts.ModuleResolutionKind.Classic && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var _a, _b;
                 var packageRootPath = path.substring(0, packageRootIndex);
@@ -124444,6 +124583,10 @@ var ts;
         if (configFileName) {
             configFileWatcher = watchFile(configFileName, scheduleProgramReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
         }
+        var pnpFileWatcher;
+        if (typeof process.versions.pnp !== "undefined") {
+            pnpFileWatcher = watchFile(require.resolve("pnpapi"), scheduleResolutionReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
+        }
         var compilerHost = ts.createCompilerHostFromProgramHost(host, function () { return compilerOptions; }, directoryStructureHost);
         ts.setGetSourceFileAsHashVersioned(compilerHost, host);
         // Members for CompilerHost
@@ -124523,6 +124666,10 @@ var ts;
                 configFileWatcher.close();
                 configFileWatcher = undefined;
             }
+            if (pnpFileWatcher) {
+                pnpFileWatcher.close();
+                pnpFileWatcher = undefined;
+            }
             extendedConfigCache === null || extendedConfigCache === void 0 ? void 0 : extendedConfigCache.clear();
             extendedConfigCache = undefined;
             if (sharedExtendedConfigFileWatchers) {
@@ -124555,7 +124702,8 @@ var ts;
         function getCurrentProgram() {
             return builderProgram && builderProgram.getProgramOrUndefined();
         }
-        function synchronizeProgram() {
+        function synchronizeProgram(forceAllFilesAsInvalidated) {
+            if (forceAllFilesAsInvalidated === void 0) { forceAllFilesAsInvalidated = false; }
             writeLog("Synchronizing program");
             clearInvalidateResolutionsOfFailedLookupLocations();
             var program = getCurrentBuilderProgram();
@@ -124566,7 +124714,7 @@ var ts;
                 }
             }
             // All resolutions are invalid if user provided resolutions
-            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution);
+            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution || forceAllFilesAsInvalidated);
             if (ts.isProgramUptoDate(getCurrentProgram(), rootFileNames, compilerOptions, getSourceVersion, fileExists, hasInvalidatedResolution, hasChangedAutomaticTypeDirectiveNames, getParsedCommandLine, projectReferences)) {
                 if (hasChangedConfigFileParsingErrors) {
                     if (reportFileChangeDetectedOnCreateProgram) {
@@ -124777,6 +124925,12 @@ var ts;
             reloadLevel = ts.ConfigFileProgramReloadLevel.Full;
             scheduleProgramUpdate();
         }
+        function scheduleResolutionReload() {
+            writeLog("Clearing resolutions");
+            resolutionCache.clear();
+            reloadLevel = ts.ConfigFileProgramReloadLevel.Resolutions;
+            scheduleProgramUpdate();
+        }
         function updateProgramWithWatchStatus() {
             timerToUpdateProgram = undefined;
             reportFileChangeDetectedOnCreateProgram = true;
@@ -124792,6 +124946,10 @@ var ts;
                     ts.perfLogger.logStartUpdateProgram("FullConfigReload");
                     reloadConfigFile();
                     break;
+                case ts.ConfigFileProgramReloadLevel.Resolutions:
+                    ts.perfLogger.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+                    synchronizeProgram(/*forceAllFilesAsInvalidated*/ true);
+                    break;
                 default:
                     ts.perfLogger.logStartUpdateProgram("SynchronizeProgram");
                     synchronizeProgram();
