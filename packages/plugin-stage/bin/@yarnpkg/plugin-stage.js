module.exports={name:"@yarnpkg/plugin-stage",factory:function(t){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var a=e[o]={i:o,l:!1,exports:{}};return t[o].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(o,a,function(e){return t[e]}.bind(null,a));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=4)}([function(e,n){e.exports=t("@yarnpkg/fslib")},function(e,n){e.exports=t("@yarnpkg/core")},function(e,n){e.exports=t("clipanion")},function(e,n){e.exports=t("@yarnpkg/cli")},function(t,e,n){"use strict";n.r(e);var o,a=n(3),i=n(1),r=n(0),s=n(2);async function c(t,{marker:e}){do{if(r.xfs.existsSync(r.ppath.join(t,e)))return t;t=r.ppath.dirname(t)}while("/"!==t);return null}function l(t,e){let n=0,o=0;for(const a of t)"wip"!==a&&(e.test(a)?n+=1:o+=1);return n>=o}!function(t){t[t.CREATE=0]="CREATE",t[t.DELETE=1]="DELETE",t[t.ADD=2]="ADD",t[t.REMOVE=3]="REMOVE",t[t.MODIFY=4]="MODIFY"}(o||(o={}));const u=new Map([[o.CREATE,"create"],[o.DELETE,"delete"],[o.ADD,"add"],[o.REMOVE,"remove"],[o.MODIFY,"update"]]);const p=11;async function f(t){const{code:e,stdout:n}=await i.execUtils.execvp("git",["log","-1","--pretty=format:%H"],{cwd:t});return 0===e?n.trim():null}async function d(t,e){const n=[],a=e.filter(t=>"package.json"===r.ppath.basename(t.path));for(const{action:e,path:s}of a){const a=r.ppath.relative(t,s);if(e===o.MODIFY){const e=await f(t),{stdout:r}=await i.execUtils.execvp("git",["show",`${e}:${a}`],{cwd:t,strict:!0}),c=await i.Manifest.fromText(r),l=await i.Manifest.fromFile(s),u=new Map([...l.dependencies,...l.devDependencies]),p=new Map([...c.dependencies,...c.devDependencies]);for(const[t,e]of p){const a=i.structUtils.stringifyIdent(e),r=u.get(t);r?r.range!==e.range&&n.push([o.MODIFY,`${a} to ${r.range}`]):n.push([o.REMOVE,a])}for(const[t,e]of u)p.has(t)||n.push([o.ADD,i.structUtils.stringifyIdent(e)])}else if(e===o.CREATE){const t=await i.Manifest.fromFile(s);t.name?n.push([o.CREATE,i.structUtils.stringifyIdent(t.name)]):n.push([o.CREATE,"a package"])}else{if(e!==o.DELETE)throw new Error("Assertion failed: Unsupported action type");{const e=await f(t),{stdout:r}=await i.execUtils.execvp("git",["show",`${e}:${a}`],{cwd:t,strict:!0}),s=await i.Manifest.fromText(r);s.name?n.push([o.DELETE,i.structUtils.stringifyIdent(s.name)]):n.push([o.DELETE,"a package"])}}}const{code:s,stdout:c}=await i.execUtils.execvp("git",["log",`-${p}`,"--pretty=format:%s"],{cwd:t});return function(t,e){const n=function(t){return t.useComponent?"chore(yarn): ":""}(t),o=[],a=e.slice().sort((t,e)=>t[0]-e[0]);for(;a.length>0;){const[e,n]=a.shift();let i=u.get(e);t.useUpperCase&&0===o.length&&(i=`${i[0].toUpperCase()}${i.slice(1)}`),t.useThirdPerson&&(i+="s");const r=[n];for(;a.length>0&&a[0][0]===e;){const[,t]=a.shift();r.push(t)}r.sort();let s=r.shift();1===r.length?s+=" (and one other)":r.length>1&&(s+=` (and ${r.length} others)`),o.push(`${i} ${s}`)}return`${n}${o.join(", ")}`}(function(t){return{useThirdPerson:l(t,/^(\w\(\w+\):\s*)?\w+s/),useUpperCase:l(t,/^(\w\(\w+\):\s*)?[A-Z]/),useComponent:l(t,/^\w\(\w+\):/)}}(0===s?c.split(/\n/g).filter(t=>""!==t):[]),n)}var m=function(t,e,n,o){var a,i=arguments.length,r=i<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,n,o);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(r=(i<3?a(r):i>3?a(e,n,r):a(e,n))||r);return i>3&&r&&Object.defineProperty(e,n,r),r};const h=[{findRoot:async t=>await c(t,{marker:Object(r.toFilename)(".git")}),async filterChanges(t,e,n){const{stdout:a}=await i.execUtils.execvp("git",["status","-s"],{cwd:t,strict:!0}),s=a.toString().split(/\n/g);return[].concat(...s.map(e=>{if(""===e)return[];const n=e.slice(0,3),a=r.ppath.resolve(t,e.slice(3));return"?? "===n&&e.endsWith("/")?function(t){const e=[],n=[t];for(;n.length>0;){const t=n.pop(),o=r.xfs.readdirSync(t);for(const a of o){const o=r.ppath.resolve(t,a);r.xfs.lstatSync(o).isDirectory()?n.push(o):e.push(o)}}return e}(a).map(t=>({action:o.CREATE,path:t})):" A "===n||"?? "===n?[{action:o.CREATE,path:a}]:" M "===n?[{action:o.MODIFY,path:a}]:" D "===n?[{action:o.DELETE,path:a}]:[]})).filter(t=>(function(t,{roots:e,names:n}){if(n.has(r.ppath.basename(t)))return!0;do{if(e.has(t))return!0;t=r.ppath.dirname(t)}while("/"!==t);return!1})(t.path,{roots:e,names:n}))},genCommitMessage:async(t,e)=>await d(t,e),async makeCommit(t,e,n){const o=e.map(t=>r.npath.fromPortablePath(t.path));await i.execUtils.execvp("git",["add","-N","--",...o],{cwd:t,strict:!0}),await i.execUtils.execvp("git",["commit","-m",`${n}\n\nCommit generated via \`yarn stage\`\n`,"--",...o],{cwd:t,strict:!0})},async makeReset(t,e){const n=e.map(t=>r.npath.fromPortablePath(t.path));await i.execUtils.execvp("git",["reset","HEAD","--",...n],{cwd:t,strict:!0})}},{findRoot:async t=>await c(t,{marker:Object(r.toFilename)(".hg")}),filterChanges:async(t,e,n)=>[],genCommitMessage:async(t,e)=>"",async makeCommit(t,e,n){},async makeReset(t,e){},async makeUpdate(t,e){}}];class g extends a.BaseCommand{constructor(){super(...arguments),this.commit=!1,this.reset=!1,this.update=!1,this.dryRun=!1}async execute(){const t=await i.Configuration.find(this.context.cwd,this.context.plugins),{project:e}=await i.Project.find(t,this.context.cwd),{driver:n,root:o}=await async function(t){let e=null,n=null;for(const o of h)if(null!==(n=await o.findRoot(t))){e=o;break}if(null===e||null===n)throw new s.UsageError("No stage driver has been found for your current project");return{driver:e,root:n}}(e.cwd),a=[t.get("bstatePath"),t.get("cacheFolder"),t.get("globalFolder"),t.get("virtualFolder"),t.get("yarnPath")];await t.triggerHook(t=>t.populateYarnPaths,e,t=>{a.push(t)});const c=new Set;for(const t of a)for(const e of y(o,t))c.add(e);const l=new Set([t.get("rcFilename"),t.get("lockfileFilename"),"package.json"]),u=await n.filterChanges(o,c,l),p=await n.genCommitMessage(o,u);if(this.dryRun)if(this.commit)this.context.stdout.write(`${p}\n`);else for(const t of u)this.context.stdout.write(`${r.npath.fromPortablePath(t.path)}\n`);else 0===u.length?this.context.stdout.write("No changes found!"):this.commit?await n.makeCommit(o,u,p):this.reset&&await n.makeReset(o,u)}}function y(t,e){const n=[];if(null===e)return n;for(;;){let o;(e===t||e.startsWith(`${t}/`))&&n.push(e);try{o=r.xfs.statSync(e)}catch(t){break}if(!o.isSymbolicLink())break;e=r.ppath.resolve(r.ppath.dirname(e),r.xfs.readlinkSync(e))}return n}g.usage=s.Command.Usage({description:"add all yarn files to your vcs",details:"\n      This command will add to your staging area the files belonging to Yarn (typically any modified `package.json` and `.yarnrc.yml` files, but also linker-generated files, cache data, etc). It will take your ignore list into account, so the cache files won't be added if the cache is ignored in a `.gitignore` file (assuming you use Git).\n\n      Running `--reset` will instead remove them from the staging area (the changes will still be there, but won't be committed until you stage them back).\n\n      Since the staging area is a non-existent concept in Mercurial, Yarn will always create a new commit when running this command on Mercurial repositories. You can get this behavior when using Git by using the `--commit` flag which will directly create a commit.\n    ",examples:[["Adds all modified project files to the staging area","yarn stage"],["Creates a new commit containing all modified project files","yarn stage --commit"]]}),m([s.Command.Boolean("-c,--commit")],g.prototype,"commit",void 0),m([s.Command.Boolean("-r,--reset")],g.prototype,"reset",void 0),m([s.Command.Boolean("-u,--update")],g.prototype,"update",void 0),m([s.Command.Boolean("-n,--dry-run")],g.prototype,"dryRun",void 0),m([s.Command.Path("stage")],g.prototype,"execute",null);const w={commands:[g]};e.default=w}])}};