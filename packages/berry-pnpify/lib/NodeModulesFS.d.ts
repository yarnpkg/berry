/// <reference types="node" />
import { CreateReadStreamOptions, CreateWriteStreamOptions } from '@berry/fslib';
import { FakeFS, WriteFileOptions } from '@berry/fslib';
import fs from 'fs';
export declare type NodeModulesFSOptions = {
    baseFs?: FakeFS;
};
export declare class NodeModulesFS extends FakeFS {
    private readonly baseFs;
    private readonly pathResolver;
    constructor({ baseFs }?: NodeModulesFSOptions);
    getRealPath(): string;
    getBaseFs(): FakeFS;
    private resolveFilePath;
    private throwIfPathReadonly;
    private resolveStatPath;
    openPromise(p: string, flags: string, mode?: number): Promise<number>;
    openSync(p: string, flags: string, mode?: number): number;
    closePromise(fd: number): Promise<void>;
    closeSync(fd: number): void;
    createReadStream(p: string, opts?: CreateReadStreamOptions): fs.ReadStream;
    createWriteStream(p: string, opts?: CreateWriteStreamOptions): fs.WriteStream;
    realpathPromise(p: string): Promise<string>;
    realpathSync(p: string): string;
    existsPromise(p: string): Promise<boolean>;
    existsSync(p: string): boolean;
    accessPromise(p: string, mode?: number): Promise<void>;
    accessSync(p: string, mode?: number): void;
    statPromise(p: string): Promise<fs.Stats>;
    statSync(p: string): fs.Stats;
    lstatPromise(p: string): Promise<fs.Stats>;
    lstatSync(p: string): fs.Stats;
    chmodPromise(p: string, mask: number): Promise<void>;
    chmodSync(p: string, mask: number): void;
    renamePromise(oldP: string, newP: string): Promise<void>;
    renameSync(oldP: string, newP: string): void;
    copyFilePromise(sourceP: string, destP: string, flags?: number): Promise<void>;
    copyFileSync(sourceP: string, destP: string, flags?: number): void;
    writeFilePromise(p: string, content: string | Buffer | ArrayBuffer | DataView, opts?: WriteFileOptions): Promise<void>;
    writeFileSync(p: string, content: string | Buffer | ArrayBuffer | DataView, opts?: WriteFileOptions): void;
    unlinkPromise(p: string): Promise<void>;
    unlinkSync(p: string): void;
    utimesPromise(p: string, atime: Date | string | number, mtime: Date | string | number): Promise<void>;
    utimesSync(p: string, atime: Date | string | number, mtime: Date | string | number): void;
    mkdirPromise(p: string): Promise<void>;
    mkdirSync(p: string): void;
    rmdirPromise(p: string): Promise<void>;
    rmdirSync(p: string): void;
    symlinkPromise(target: string, p: string): Promise<void>;
    symlinkSync(target: string, p: string): void;
    readFilePromise(p: string, encoding: 'utf8'): Promise<string>;
    readFilePromise(p: string, encoding?: string): Promise<Buffer>;
    readFileSync(p: string, encoding: 'utf8'): string;
    readFileSync(p: string, encoding?: string): Buffer;
    readdirPromise(p: string): Promise<string[]>;
    readdirSync(p: string): string[];
    readlinkPromise(p: string): Promise<string>;
    readlinkSync(p: string): string;
}
